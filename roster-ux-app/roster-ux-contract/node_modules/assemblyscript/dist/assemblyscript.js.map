{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/extra/ast.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/passes/findusedlocals.ts","webpack://assemblyscript/./src/passes/pass.ts","webpack://assemblyscript/./src/passes/rtrace.ts","webpack://assemblyscript/./src/passes/shadowstack.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/terminal.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/vector.ts","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/webpack/runtime/global","webpack://assemblyscript/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__911__","Long","wasm","WebAssembly","Instance","Module","Uint8Array","e","low","high","unsigned","isLong","obj","prototype","__isLong__","Object","defineProperty","value","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","kind","range","name","TypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","parameterKind","type","initializer","ParameterNode","args","DecoratorNode","fromNode","commentKind","text","CommentNode","isQuoted","IdentifierExpression","elementExpressions","ArrayLiteralExpression","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","elementExpression","ElementAccessExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","typeName","NewExpression","NullExpression","names","values","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","property","PropertyAccessExpression","pattern","patternFlags","RegexpLiteralExpression","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","tag","parts","rawParts","TemplateLiteralExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","expr","CompiledExpression","statements","BlockStatement","label","BreakStatement","decorators","flags","typeParameters","implementsTypes","members","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","ExportDefaultStatement","externalName","ExportImportStatement","localName","exportedName","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","declarations","ImportStatement","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","variable","iterable","ForOfStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureNode","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","literalKind","LITERAL","changetype","FLOAT","INTEGER","STRING","NULL","TRUE","FALSE","node","CALL","PROPERTYACCESS","isAccessOn","THIS","SUPER","TypeNode","super","typeParameterNodes","NAMEDTYPE","namedTypeNode","next","typeArgumentNodes","k","hasGenericComponent","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","assert","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","CommonFlags","NONE","flag","nameNode","IDENTIFIER","nameStr","charCodeAt","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","numTypeArguments","Range","join","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","OMITTED","PARENTHESIZED","REGEXP","TERNARY","TEMPLATE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","COMPILED","Statement","sourceKind","normalizedPath","SOURCE","Array","debugInfoIndex","exportPaths","lineCache","lineColumn","internalPath","mangleInternalPath","pos","lastIndexOf","PATH_DELIMITER","simplePath","source","LIBRARY_SUBST","LIBRARY","LIBRARY_ENTRY","off","end","push","l","r","m","s","unchecked","DeclarationStatement","INDEXSIGNATURE","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","indexSignature","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","startsWith","resolvePath","LIBRARY_PREFIX","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","ArrowKind","FUNCTIONDECLARATION","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","len","cur","isTrivialAlphanum","decorator","BuiltinNames","start","started","argumentsLength","setArgumentsLength","abort","trace","seed","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","clz","ctz","popcnt","rotl","rotr","abs","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","call_indirect","instantiate","idof","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_add","i64_add","f32_add","f64_add","i32_sub","i64_sub","f32_sub","f64_sub","i32_mul","i64_mul","f32_mul","f64_mul","i32_div_s","i32_div_u","i64_div_s","i64_div_u","f32_div","f64_div","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load_zero","v128_load_lane","v128_store_lane","v128_load","v128_load8x8_s","v128_load8x8_u","v128_load16x4_s","v128_load16x4_u","v128_load32x2_s","v128_load32x2_u","v128_load8_splat","v128_load16_splat","v128_load32_splat","v128_load64_splat","v128_load32_zero","v128_load64_zero","v128_load8_lane","v128_load16_lane","v128_load32_lane","v128_load64_lane","v128_store8_lane","v128_store16_lane","v128_store32_lane","v128_store64_lane","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_sat","v128_sub_sat","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_popcnt","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_ceil","v128_floor","v128_trunc","v128_nearest","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_convert_low","v128_trunc_sat","v128_trunc_sat_zero","v128_narrow","v128_extend_low","v128_extend_high","v128_extadd_pairwise","v128_demote_zero","v128_promote_low","v128_q15mulr_sat","v128_extmul_low","v128_extmul_high","i8x16","i16x8","i32x4","i64x2","f32x4","f64x2","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_sat_s","i8x16_add_sat_u","i8x16_sub_sat_s","i8x16_sub_sat_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_all_true","i8x16_bitmask","i8x16_popcnt","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i8x16_shuffle","i8x16_swizzle","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_sat_s","i16x8_add_sat_u","i16x8_sub_sat_s","i16x8_sub_sat_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_extend_low_i8x16_s","i16x8_extend_low_i8x16_u","i16x8_extend_high_i8x16_s","i16x8_extend_high_i8x16_u","i16x8_extadd_pairwise_i8x16_s","i16x8_extadd_pairwise_i8x16_u","i16x8_q15mulr_sat_s","i16x8_extmul_low_i8x16_s","i16x8_extmul_low_i8x16_u","i16x8_extmul_high_i8x16_s","i16x8_extmul_high_i8x16_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_trunc_sat_f64x2_s_zero","i32x4_trunc_sat_f64x2_u_zero","i32x4_extend_low_i16x8_s","i32x4_extend_low_i16x8_u","i32x4_extend_high_i16x8_s","i32x4_extend_high_i16x8_u","i32x4_extadd_pairwise_i16x8_s","i32x4_extadd_pairwise_i16x8_u","i32x4_extmul_low_i16x8_s","i32x4_extmul_low_i16x8_u","i32x4_extmul_high_i16x8_s","i32x4_extmul_high_i16x8_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_mul","i64x2_abs","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_all_true","i64x2_bitmask","i64x2_eq","i64x2_ne","i64x2_lt_s","i64x2_lt_u","i64x2_le_s","i64x2_le_u","i64x2_gt_s","i64x2_gt_u","i64x2_ge_s","i64x2_ge_u","i64x2_extend_low_i32x4_s","i64x2_extend_low_i32x4_u","i64x2_extend_high_i32x4_s","i64x2_extend_high_i32x4_u","i64x2_extmul_low_i32x4_s","i64x2_extmul_low_i32x4_u","i64x2_extmul_high_i32x4_s","i64x2_extmul_high_i32x4_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_ceil","f32x4_floor","f32x4_trunc","f32x4_nearest","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_demote_f64x2_zero","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_ceil","f64x2_floor","f64x2_trunc","f64x2_nearest","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_low_i32x4_s","f64x2_convert_low_i32x4_u","f64x2_promote_low_f32x4","i31_new","i31_get","data_end","stack_pointer","heap_base","rtti_base","visit_globals","visit_members","tostack","isFinite","ERROR","WARNING","INFO","Function","memory_size","memory_grow","memory_copy","memory_fill","memory_data","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Int64Array","Uint64Array","Float32Array","Float64Array","String_raw","wasiAbort","wasiTrace","wasiSeed","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","arg0","compileExpression","operands","Type","currentType","isValue","unary","UnaryOp","ClzI32","options","isWasm64","ClzI64","error","DiagnosticCode","Operation_0_cannot_be_applied_to_type_1","reportNode","typeArgumentsRange","builtin_ctz","CtzI32","CtzI64","builtin_popcnt","PopcntI32","PopcntI64","builtin_rotl","arg1","flow","currentFlow","temp1","getTempLocal","findUsedLocals","setLocalFlag","index","LocalFlags","WRAPPED","temp2","ret","binary","BinaryOp","OrI32","ShlI32","local_tee","AndI32","ShrU32","local_get","TypeRef","I32","SubI32","freeTempLocal","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","auto","XorI32","AddI32","ShrI32","usizeType","XorI64","AddI64","ShrI64","sizeTypeRef","I64","AbsF32","AbsF64","builtin_max","isNumericLiteral","op","GtI32","GtU32","GtI64","GtU64","MaxF32","MaxF64","typeRef","toRef","builtin_min","LtI32","LtU32","LtI64","LtU64","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32ToI32","ReinterpretF64ToI64","ReinterpretI32ToF32","ReinterpretI64ToF64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","isIntegerValue","numOperands","immOffset","immAlign","byteSize","evaluateImmediateOffset","evaluateImmediateAlign","isSignedIntegerValue","builtin_store","void","contextIsExact","inType","convertExpression","builtin_add","isNumericValue","makeAdd","builtin_sub","makeSub","builtin_mul","makeMul","builtin_div","makeDiv","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","AtomicRMWOp","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","arg2","builtin_atomic_wait","builtin_diagnostic","category","checkTypeAbsent","emitDiagnostic","User_defined_0","DiagnosticCategory","nop","builtin_conversion","builtin_i8x16","precomp","runExpression","ExpressionRunnerFlags","PreserveSideeffects","writeI8","getConstValueI32","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","idx","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","SIMDExtractOp","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","SIMDReplaceOp","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","isPowerOf2","mask","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleI8x16","builtin_v128_load_splat","simd_load","SIMDLoadOp","Load8Splat","Load16Splat","Load32Splat","Load64Splat","builtin_v128_load_ext","Load8x8S","Load8x8U","Load16x4S","Load16x4U","Load32x2S","Load32x2U","builtin_v128_load_zero","Load32Zero","Load64Zero","builtin_v128_load_lane","simd_loadstorelane","SIMDLoadStoreLaneOp","Load8Lane","Load16Lane","Load32Lane","Load64Lane","builtin_v128_store_lane","Store8Lane","Store16Lane","Store32Lane","Store64Lane","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI16x8","MulI32x4","MulI64x2","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_sat","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_sat","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqI64x2","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeI64x2","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtI64x2","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeI64x2","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtI64x2","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeI64x2","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsI64x2","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_ceil","CeilF32x4","CeilF64x2","builtin_v128_floor","FloorF32x4","FloorF64x2","builtin_v128_trunc","TruncF32x4","TruncF64x2","builtin_v128_nearest","NearestF32x4","NearestF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","builtin_v128_convert_low","ConvertLowI32x4ToF64x2","ConvertLowU32x4ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","builtin_v128_trunc_sat_zero","TruncSatF64x2ToI32x4Zero","TruncSatF64x2ToU32x4Zero","builtin_v128_extend_low","ExtendLowI8x16ToI16x8","ExtendLowU8x16ToU16x8","ExtendLowI16x8ToI32x4","ExtendLowU16x8ToU32x4","ExtendLowI32x4ToI64x2","ExtendLowU32x4ToU64x2","builtin_v128_extend_high","ExtendHighI8x16ToI16x8","ExtendHighU8x16ToU16x8","ExtendHighI16x8ToI32x4","ExtendHighU16x8ToU32x4","ExtendHighI32x4ToI64x2","ExtendHighU32x4ToU64x2","builtin_v128_shl","simd_shift","SIMDShiftOp","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","BitmaskI64x2","builtin_v128_popcnt","PopcntI8x16","builtin_v128_extadd_pairwise","ExtaddPairwiseI8x16ToI16x8","ExtaddPairwiseU8x16ToU16x8","ExtaddPairwiseI16x8ToI32x4","ExtaddPairwiseU16x8ToU32x4","builtin_v128_demote_zero","DemoteZeroF64x2ToF32x4","builtin_v128_promote_low","PromoteLowF32x4ToF64x2","builtin_v128_q15mulr_sat","Q15mulrSatI16x8","builtin_v128_extmul_low","ExtmulLowI16x8","ExtmulLowU16x8","ExtmulLowI32x4","ExtmulLowU32x4","ExtmulLowI64x2","ExtmulLowU64x2","builtin_v128_extmul_high","ExtmulHighI16x8","ExtmulHighU16x8","ExtmulHighI32x4","ExtmulHighU32x4","ExtmulHighI64x2","ExtmulHighU64x2","ensureVisitMembersOf","instance","visitRef","program","sizeTypeSize","visitInstance","base","call","internalName","None","hasVisitImpl","isDeclaredInLibrary","visitPrototype","lookupInSelf","ElementKind","FUNCTION_PROTOTYPE","resolver","resolveFunction","compileFunction","visitSignature","visitThisType","thisType","parameterTypes","isStrictlyAssignableTo","needsTempValue","_values","Map_values","j","member","FIELD","parent","fieldOffset","memoryOffset","if","addFunction","createType","flatten","typeToRuntimeFlags","alignLog2","is","evaluateConstantType","Expected_0_type_arguments_but_got_1","Expected_0_arguments_but_got_1","argumentsRange","usize64","getConstValueI64High","getConstValueI64Low","usize32","naturalAlign","align","_0_must_be_a_power_of_two","feature","hasFeature","Feature_0_is_not_enabled","featureToString","setCurrentTypeOnError","Type_0_is_not_generic","expected","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","i64_is_i32","i64_low","i64_is_u32","i64_high","thisOperand","builtins","Map","function_builtins","set","isFloatValue","isBooleanValue","classReference","getClass","isAssignableTo","stringInstance","extends","arrayPrototype","isNullableReference","element","lookupExpression","ReportMode","SWALLOW","getExpressionId","ExpressionId","Const","signatureReference","Type_0_has_no_call_signatures","i64_new","getClassOrWrapper","firstOperand","isLiteralKind","String_literal_expected","fieldName","classMembers","has","get","Type_0_has_no_property_1","nextMemoryOffset","resultType","isInternalReference","getSignature","ensureStaticString","id","hasDecorator","DecoratorFlags","maybeDropCondition","LocalGet","NeF32","getLocalGetIndex","F32","temp","NeF64","F64","EqF32","SubF32","EqF64","SubF64","isAny","makeIsTrueish","compileCallDirect","offset","elementType","valuesOperand","Array_literal_expected","numElements","exprs","isStatic","makeZero","buf","writeStaticBuffer","byteLength","addAlignedMemorySegment","i31ref","fromType","isChangeableTo","Type_0_cannot_be_changed_to_type_1","nonNullableType","noAssert","evaled","Default","getExpressionType","getConstValueF32","getConstValueF64","makeAbort","EqzI32","EqzI64","ref_is","RefIsOp","RefIsNull","alreadyUnchecked","unset","indexArg","operandExprs","paramTypeRefs","classInstance","This_expression_is_not_constructable","ctor","ensureConstructor","checkFieldInitialization","compileInstantiate","functionPrototype","ftype","requiredParameters","functionArg","shift","thisArg","_this_cannot_be_referenced_in_current_location","compileCallIndirect","Not_implemented_0","isizeType","writeI16","writeI32","writeF32","writeF64","AndV128","OrV128","XorV128","AndnotV128","builtin_v128_bitwise_unary","NotV128","simd_ternary","builtin_v128_bitwise_ternary","SIMDTernaryOp","Bitselect","AnyTrueV128","runtimeFeatures","elementsByName","global","INLINED","constantIntegerValue","global_get","block","managedClasses","nextId","_keys","Map_keys","instanceId","isPointerfree","return","current","switch","SubI64","count","data","abvInstance","arrayBufferViewInstance","abvPrototype","setPrototype","mapPrototype","staticArrayPrototype","lastId","getArrayValueType","getTypeArgumentsTo","rttiFlags","segment","addGlobal","instanceofInstance","stmts","instances","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","funcref","externref","anyref","eqref","dataref","u8x16","u16x8","u32x4","u64x2","void_","number","boolean","string","native","indexof","valueof","returnof","nonnull","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_EXPORT_RUNTIME","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","ASC_FEATURE_GC","ASC_FEATURE_MEMORY64","ASC_VERSION_MAJOR","ASC_VERSION_MINOR","ASC_VERSION_PATCH","I8","I16","Isize","U8","U16","U32","U64","Usize","Bool","V128","Funcref","Externref","Anyref","Eqref","I31ref","Dataref","String","StaticArray","Set","ArrayBufferView","ArrayBuffer","Mathf","NativeMath","NativeMathf","TemplateStringsArray","ipow32","ipow64","alloc","realloc","free","new_","renew","link","collect","typeinfo","instanceof_","visit","newBuffer","newArray","Feature","Target","Typeinfo","TypeinfoFlags","ExportNames","target","WASM32","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","zeroFilledMemory","importTable","exportTable","sourceMap","explicitStart","memoryBase","tableBase","globalAliases","features","noUnsafe","pedantic","lowMemoryLimit","exportRuntime","stackSize","bundleMajorVersion","bundleMinorVersion","bundlePatchVersion","optimizeLevelHint","shrinkLevelHint","WASM64","isize64","isize32","Constraints","RuntimeFeatures","memory","table","runtimeFunctions","runtimeGlobals","Compiler","DiagnosticEmitter","diagnostics","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","inlineStack","lazyFunctions","pendingClassInstanceOf","virtualStubs","pendingElements","doneModuleExports","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","i32PowInstance","i64PowInstance","_reusableCallExpression","create","setLowMemoryUnused","featureFlags","FeatureFlags","SignExt","MutableGloabls","TruncSat","BulkMemory","SIMD","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","GC","Memory64","setFeatures","startFunctionInstance","makeNativeFunction","Signature","currentBody","shadowStack","ShadowStackPass","compile","hasShadowStack","initialize","actualFunction","startFunctionBody","files","filesByName","file","USER_ENTRY","compileFile","compileExports","ensureModuleExports","requireFunction","hasExport","addFunctionExport","requireGlobal","compileGlobal","addGlobalExport","functionsToCompile","Set_values","clear","compileClassInstanceOf","VIRTUAL","INSTANCE","ensureVirtualStub","ensureVarargsStub","virtualStubsSeen","discoveredOverload","overloadInstances","resolveOverloads","finalizeVirtualStub","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","UNLIMITED_MEMORY","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","functionTableNames","addFunctionTable","UNLIMITED_TABLE","global_set","ensureArgumentsLength","startIsEmpty","isWasi","unshift","funcRef","paramRefs","resultRefs","typesToRefs","additionalLocals","finalize","setStart","walkModule","lookup","RtraceMemory","elementName","ensureModuleExport","exportsStar","prefix","functionInstances","instanceName","GENERIC","fullName","Exported_generic_function_or_class_has_no_concrete_instances","identifierNode","CLASS_PROTOTYPE","classPrototype","classInstances","PROPERTY_PROTOTYPE","propertyInstance","CONST","STATIC","READONLY","exportName","Cannot_export_a_mutable_global","ENUMVALUE","enumValue","isImmutable","functionInstance","hasManagedOperands","noteExport","getManagedOperandIndices","PROPERTY","getterInstance","setterInstance","fieldInstance","getterExportName","compileFieldGetter","internalGetterName","internalGetterSignature","setterExportName","compileFieldSetter","internalSetterName","internalSetterSignature","isUnmanaged","ENUM","INTERFACE_PROTOTYPE","NAMESPACE","TYPEDEFINITION","subPrefix","implicitExport","SCOPED","memberName","PRIVATE","compileMembers","compileEnum","resolveClass","compileClass","resolveProperty","compileProperty","compileElement","exportStar","normalizedPathWithoutExtension","pathWithIndex","File_0_not_found","startFunction","startSignature","previousBody","previousFlow","compileTopLevelStatement","locals","localsByIndex","numLocals","varTypes","ERRORED","initExpr","typeNode","initializerNode","RESOLVED","resolvedType","resolveType","delete","Type_expected","setType","checkTypeSupported","atEnd","Type_0_is_not_assignable_to_type_1","AMBIENT","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","GlobalGet","fromName","getGlobalGetName","isGlobalMutable","getGlobal","warning","Mutable_value_cannot_be_inlined","constantValueKind","constantFloatValue","compileInlineConstant","Decorator_0_is_not_valid_here","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","setConstantIntegerValue","MODULE_EXPORT","forceStdAlternative","numParameters","visited","paramIdentifier","paramName","Duplicate_identifier_0","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","addFunctionImport","getFunction","ABSTRACT","INTERFACE","Function_implementation_is_missing_or_not_immediately_following_the_declaration","thisLocal","lookupLocal","bodyStartIndex","compileStatements","GET","SET","canOverflow","isNonnull","allocStmts","makeConditionalAllocation","makeFieldInitializationInConstructor","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","staticMembers","instanceMembers","compileField","getterRef","valueTypeRef","thisTypeRef","setterRef","bodyExpr","linkInstance","compilePropertyGetter","compilePropertySetter","buffer","alignment","MemorySegment","computeBlockStart64","stringValue","ptr","ensureStaticStringPtr","stringSegment","totalOverhead","segments","createBuffer","addRuntimeMemorySegment","elementTypeRef","writeI64","arrayBufferInstance","OBJECTInstance","writeField","bufferSegment","arrayInstance","bufferLength","readI32","arrayLength","bufferAddress","STUB","memorySegment","rtInstance","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","Nop","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","Block","getBlockName","getBlockChildCount","getBlockChildAt","needsExplicitUnreachable","outerFlow","innerFlow","fork","freeScopedLocals","inherit","labelNode","breakLabel","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","loopLabel","bodyFlow","bodyStmts","possiblyContinues","condFlow","condExpr","condKind","evaluateCondition","drop","Flow","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","tcond","loopStmts","local_set","inheritNonnullIfTrue","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritNonnullIfFalse","inheritMutual","valueExpression","constraints","inlineReturnLabel","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","message","newArgs","numDeclarations","initializers","uniqueMap","contextualTypeArguments","dummy","addScopedDummyLocal","freeScopedDummyLocal","isConst","local","Local","parentFunction","setConstantFloatValue","scopedLocals","existing","errorRelated","_const_declarations_must_be_initialized","LET","existingLocal","getScopedLocal","isNative","addScopedLocal","CONSTANT","addLocal","makeLocalAssignment","isShortIntegerValue","doCompileWhileStatement","computeSmallIntegerShift","computeSmallIntegerMask","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","compiled","wrap","ensureSmallIntegerWrap","explicit","makeRuntimeNonNullCheck","isExternalReference","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32ToF64","DemoteF64ToF32","saturating","isLongIntegerValue","TruncSatF32ToI64","TruncF32ToI64","TruncSatF32ToI32","TruncF32ToI32","TruncSatF32ToU64","TruncF32ToU64","TruncSatF32ToU32","TruncF32ToU32","TruncSatF64ToI64","TruncF64ToI64","TruncSatF64ToI32","TruncF64ToI32","TruncSatF64ToU64","TruncF64ToU64","TruncSatF64ToU32","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64ToI32","ExtendI32ToI64","ExtendU32ToU64","isVaryingIntegerValue","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","PREFIX","AS","NONNULL","exceptVoid","info","Expression_is_never_null","leftExpr","leftType","rightExpr","rightType","commonType","compound","Token","LESSTHAN","overload","lookupOverload","OperatorKind","LT","compileBinaryOverload","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","makeLt","GREATERTHAN","GT","makeGt","LESSTHAN_EQUALS","LE","makeLe","GREATERTHAN_EQUALS","GE","makeGe","EQUALS_EQUALS_EQUALS","EQUALS_EQUALS","EQ","operatorTokenToString","makeEq","EXCLAMATION_EQUALS_EQUALS","EXCLAMATION_EQUALS","NE","makeNe","EQUALS","compileAssignment","PLUS_EQUALS","PLUS","ADD","The_0_operator_cannot_be_applied_to_type_1","MINUS_EQUALS","MINUS","SUB","ASTERISK_EQUALS","ASTERISK","MUL","ASTERISK_ASTERISK_EQUALS","ASTERISK_ASTERISK","POW","makePow","SLASH_EQUALS","SLASH","DIV","PERCENT_EQUALS","PERCENT","REM","makeRem","LESSTHAN_LESSTHAN_EQUALS","LESSTHAN_LESSTHAN","intType","BITWISE_SHL","makeShl","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN","BITWISE_SHR","makeShr","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","BITWISE_SHR_U","makeShru","AMPERSAND_EQUALS","AMPERSAND","BITWISE_AND","makeAnd","BAR_EQUALS","BAR","BITWISE_OR","makeOr","CARET_EQUALS","CARET","BITWISE_XOR","makeXor","AMPERSAND_AMPERSAND","rightFlow","cloneExpression","BAR_BAR","targetType","getTypeOfElement","makeAssignment","currentThisExpression","currentElementExpression","LtF32","LtF64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","ref_eq","NeI32","AddF32","AddF64","MulI32","MulI64","MulF32","MulF64","Cannot_find_name_0","makeCallDirect","namespace","namespaceMembers","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI64","ShrU64","AndI64","OrI64","operatorInstance","valueExpr","thisExpression","LOCAL","Variable_0_used_before_its_declaration","checkUnsafe","propertyPrototype","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","INDEXED_SET","INDEXED_GET","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","Indexed_access_may_involve_bounds_checking","indexExpression","tee","isLocalFlag","isConstructor","setThisFieldFlag","FieldFlags","INITIALIZED","fieldParent","makeFieldAssignment","thisExpr","returnTypeRef","tempThis","elementExpr","tempTarget","tempElement","localIndex","unsetLocalFlag","field","fieldType","fieldTypeRef","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","_super_can_only_be_referenced_in_a_derived_class","baseCtorInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","compileCallExpressionBuiltin","maybeInferCall","inlinedValue","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","Expression_cannot_be_represented_by_a_type","createCallExpression","resolveTypeArguments","callee","BuiltinContext","fn","methodName","hasThis","The_this_types_of_each_signature_are_incompatible","hasRest","minimum","maximum","relatedReportNode","isLibrary","Operation_is_unsafe","argumentExpressions","checkCallSignature","isAccessOnThis","isAccessOnSuper","includes","makeCallInline","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","paramType","paramExpr","immediatelyDropped","createInline","usedLocals","argumentLocal","getParameterName","addScopedAlias","initType","checkFieldInitializationInFlow","original","stub","varargsStub","originalSignature","originalParameterTypes","originalParameterDeclarations","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","numNames","ofN","Optional_parameter_must_have_an_initializer","virtualStub","ref","tempIndex","builder","SwitchBuilder","overloadInstance","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","n","needsVarargsStub","calledName","getClassOrInterface","addCase","extendees","getAllExtendees","a","b","extendee","removeFunction","render","isConstZero","Function_0_is_virtual_and_will_not_be_inlined","theOperands","slice","allOptionalsAreConstant","compilesToConst","resolved","lastOperand","getSideEffects","SideEffects","WritesGlobal","lastOperandType","operandsTostack","makeCallIndirect","numExpressions","targetExpression","resolveExpression","indexedGet","clone","isNamed","isSemanticallyAnonymous","FunctionPrototype","nextAnonymousId","contextualSignature","signatureNode","numPresentParameters","parameterNode","isTypeOmitted","thisTypeNode","outer","worked","ensureRuntimeFunction","fname","asNullable","Expression_resolves_to_unusual_type_0","_this_cannot_be_referenced_in_constructor_arguments","_super_cannot_be_referenced_in_constructor_arguments","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","lookupIdentifierExpression","localType","globalType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime","namedType","hasTypeArguments","resolveTypeName","makeInstanceofClass","expectedType","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","intValue","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileTemplateLiteral","compileObjectLiteral","numParts","stringType","lhsLen","rhsLen","makeToString","hasPrefix","lhs","rhs","concatMethod","getMethod","exprA","exprB","addStaticBuffer","joinInstance","indexedSetInstance","temps","tsaArrayInstance","templateStringsArrayInstance","first","arraySegment","partExprs","rawExprs","addStaticArrayHeader","rawHeaderSegment","createCompiledExpression","nativeRange","compileCallExpressionLike","contextualClass","compileStaticArrayLiteral","arrayType","tempDataStart","arrayAddress","makeNewArray","arrayTypeRef","dataStartMember","newArrayInstance","bufferSize","newBufferInstance","classType","Cannot_create_an_instance_of_an_abstract_class","ctorPrototype","constructorPrototype","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","classTypeRef","omittedFields","memberKey","Property_0_does_not_exist_on_type_1","Property_0_is_private_and_only_accessible_within_class_1","PROTECTED","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","resolveClassInclTypeArguments","constructorInstance","baseClass","baseCtor","makeNativeFunctionDeclaration","setResolvedInstance","relatedNode","didCheckFieldInitialization","isThisFieldFlag","DEFINITELY_ASSIGNED","Property_0_is_always_assigned_before_being_used","Unnecessary_definite_assignment","Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned","ctorInstance","ctxType","parentEnum","Property_0_is_used_before_being_assigned","Object_is_possibly_null","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","Unreachable","PLUS_PLUS","POSTFIX_INC","getLocalSetValue","compileUnaryOverload","makeOne","MINUS_MINUS","POSTFIX_DEC","setValue","NegF32","NegF64","PREFIX_INC","PREFIX_DEC","EXCLAMATION","NOT","TILDE","BITWISE_NOT","makeNegOne","TYPEOF","compileTypeof","DOT_DOT_DOT","typeString","REPORT","Extend8I32","Extend16I32","addDebugInfoFile","debugInfoRef","debugLocations","supported","parameterReportNode","v128_zero","ref_null","toStringInstance","toStringSignature","identifierAndSignatureRange","toStringReturnType","allocInstance","newInstance","thisIndex","makeAllocation","thisLocalIndex","nonParameterFields","fieldPrototype","codeLocation","abortInstance","messageArg","makeStaticAbort","messageExpr","filenameExpr","lineAt","columnAt","mangleInternalName","arg","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","sb","indentLevel","build","indent","typeToString","originalName","walk","TSDBuilder","remainingMembers","isInterface","extendsNode","code","diagnosticCategoryToString","PEDANTIC","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_CYAN","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","DiagnosticMessage","relatedRange","replace","thisRange","otherRange","thisRelatedRange","otherRelatedRange","formatDiagnosticContext","isLineBreak","isColorsEnabled","COLOR_RESET","useColors","showContext","wasColorsEnabled","setColorsEnabled","relatedSource","withRange","seenInSource","seenMessagesAtPos","ASTBuilder","visitNode","finish","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","elements","visitArguments","numArgs","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitTemplateLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","visitRawString","quote","last","lastCharPos","isDefault","serializeExternalModifiers","numImplementsTypes","numMembers","numValues","serializeAccessModifiers","numTypeParameters","firstDeclaration","REST","OPTIONAL","DECLARE","PUBLIC","FlowFlags","ConditionKind","localFlags","thisFieldFlags","inlineFunction","initThisFieldFlags","nextInlineId","resetBreakContext","branch","except","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempFuncrefs","tempExternrefs","tempAnyrefs","tempEqrefs","tempI31refs","tempDatarefs","resetTemporaryName","scopedLocal","setTemporaryName","scopedDummy","Cannot_redeclare_block_scoped_variable_0","scopedAlias","scope","localsByName","defaultIfInlined","actualParent","actualClass","fieldFlags","nextBreakId","stack","breakStack","otherFlags","conditionKind","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","leftFieldFlags","newFieldFlags","rightFieldFlags","key","before","after","LocalSet","isLocalTee","getLocalSetIndex","iff","If","getIfFalse","getIfCondition","getIfTrue","Unary","getUnaryOp","getUnaryValue","Binary","getBinaryOp","getBinaryLeft","getBinaryRight","exprType","canConversionOverflow","isUnsignedIntegerValue","Extend8I64","Extend16I64","Extend32I64","Load","signed","isLoadSigned","getLoadBytes","Select","getSelectThen","getSelectElse","Call","instancesByName","getCallTarget","levels","formatDiagnosticMessage","Options","alias","DEFAULT_STACK_SIZE","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","FEATURE_GC","FEATURE_MEMORY64","optimizeLevel","shrinkLevel","Program","diagnosticsOffset","getSource","isEntry","parser","parseFile","nextFile","getDependee","util","Auto","ExternalKind","RefAsOp","BrOnOp","useShadowStack","sizeType","hasTemporaryFunction","cachedStringsToPointers","cachedPointersToStrings","lit","binaryen","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","i64_is","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","_BinaryenRefEq","_last","isWam64","ClzSize","CtzSize","PopcntSize","EqzSize","_BinaryenUnary","AddSize","SubSize","MulSize","DivISize","DivUSize","RemISize","RemUSize","AndSize","OrSize","XorSize","ShlSize","ShrISize","ShrUSize","RotlSize","RotrSize","EqSize","NeSize","LtISize","LtUSize","LeISize","LeUSize","GtISize","GtUSize","GeISize","GeUSize","_BinaryenBinary","_BinaryenMemorySize","_BinaryenMemoryGrow","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","cStr","allocStringCached","_BinaryenGlobalGet","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","replacement","_BinaryenAtomicCmpxchg","timeout","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","allocPtrArray","_BinaryenBlock","single","Return","Throw","singleType","_BinaryenBreak","_BinaryenDrop","ReadsLocal","ReadsGlobal","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","tableName","_BinaryenUnreachable","dest","_BinaryenMemoryCopy","_BinaryenMemoryFill","tagName","_BinaryenThrow","_BinaryenRethrow","_BinaryenPop","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","vec","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","_BinaryenSIMDShuffle","c","_BinaryenSIMDTernary","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenSIMDLoadStoreLane","_BinaryenRefIs","_BinaryenRefAs","_BinaryenRefFunc","_BinaryenI31New","_BinaryenI31Get","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","_BinaryenAddTag","_BinaryenGetTag","_BinaryenRemoveTag","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","func","_BinaryenSetStart","cStr1","cStr2","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddTagExport","_BinaryenRemoveExport","_BinaryenGetExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","_BinaryenAddGlobalImport","_BinaryenAddTagImport","initial","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","tableRef","_BinaryenGetTable","_BinaryenTableSetInitial","_BinaryenTableSetMax","_BinaryenAddTable","_BinaryenAddActiveElementSegment","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetZeroFilledMemory","_BinaryenSetZeroFilledMemory","_BinaryenGetFastMath","_BinaryenSetFastMath","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenGetAllowInliningFunctionsWithLoops","enabled","_BinaryenSetAllowInliningFunctionsWithLoops","_BinaryenModuleGetFeatures","_BinaryenModuleSetFeatures","passes","cStrs","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","debugInfo","setOptimizeLevel","setShrinkLevel","setDebugInfo","setZeroFilledMemory","setFastMath","clearPassArguments","setAlwaysInlineMaxSize","setFlexibleInlineMaxSize","setOneCallerInlineMaxSize","setAllowInliningFunctionsWithLoops","getLowMemoryUnused","getFeatures","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","__i32_load8_u","readBuffer","watFormat","cached","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenLocalGetGetIndex","globalName","_BinaryenGlobalGetGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChildAt","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperandAt","_BinaryenMemoryGrowGetDelta","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","_BinaryenTagGetName","_BinaryenTagGetParams","_BinaryenTagGetResults","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","_BinaryenExpressionGetSideEffects","u8s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","arr","ch","fromCharCodes","labelPostfix","labels","defaultLabel","lastCase","output","Break","numChildren","Dependee","Parser","sources","backlog","seenlog","donelog","onComment","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","dependee","Source","USER","tn","Tokenizer","skip","ENDOFFILE","parseTopLevelStatement","skipStatement","startPos","AT","tokenPos","parseDecorator","exportStart","exportEnd","defaultStart","defaultEnd","DEFAULT","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","peek","nextTokenPos","parseEnum","parseVariable","VAR","parseFunction","state","mark","abstractStart","abstractEnd","nextTokenOnNewLine","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","IdentifierHandling","PREFER","parseNamespace","parseExportImport","parseImport","TYPE","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","DOT","Identifier_expected","acceptParenthesized","suppressErrors","token","OPENPAREN","isNullableSignature","tryParseFunctionType","CLOSEPAREN","_0_expected","Unexpected_token","innerType","parseType","createNamedType","STRINGLITERAL","parseTypeName","parameter","notNullStart","notNull","OPENBRACKET","bracketStart","CLOSEBRACKET","bracketRange","nullable","isSignature","firstParamNameNoType","firstParamKind","paramStart","COLON","QUESTION","A_rest_parameter_cannot_be_optional","param","createParameter","createOmittedType","EQUALS_GREATERTHAN","createFunctionType","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","SEMICOLON","parentFlags","parentDecorators","isIllegalVariableIdentifier","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","createVariableDeclaration","OPENBRACE","CLOSEBRACE","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","nextToken","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","EXTENDS","createTypeParameter","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createFunctionDeclaration","createEmptyIdentifierExpression","parseFunctionExpressionCommon","explicitThis","bodyExpression","createExpressionStatement","createFunctionExpression","IMPLEMENTS","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","isGetter","getStart","getEnd","setEnd","isGetterOrSetter","createConstructorExpression","retIndex","parseIndexSignature","ALWAYS","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","createNamespaceDeclaration","parseExportMember","FROM","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","OF","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","ELSE","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","CASE","createSwitchCase","_case_or_default_expected","createThrowStatement","CATCH","FINALLY","createTryStatement","createTypeDeclaration","createVoidStatement","createWhileStatement","YIELD","DELETE","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createOmittedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","TEMPLATELITERAL","parseTemplateLiteral","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","INTEGERLITERAL","readInteger","checkForIdentifierStartAfterNumericLiteral","createIntegerLiteralExpression","FLOATLITERAL","readFloat","createFloatLiteralExpression","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Unexpected_end_of_text","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","readStringStart","readStringEnd","readingTemplateString","createTemplateLiteralExpression","potentiallyGeneric","skipBlock","depth","IN","Precedence","FindUsedLocalsVisitor","Visitor","used","localGet","localSet","singleton","visitor","_currentExpression","currentExpression","previousExpression","visitLabel","visitBlock","visitIf","Loop","visitLoop","_BinaryenBreakGetValue","visitBreak","Switch","_BinaryenSwitchGetDefaultName","_BinaryenSwitchGetNumNames","_BinaryenSwitchGetNameAt","_BinaryenSwitchGetCondition","_BinaryenSwitchGetValue","visitSwitch","visitCallPre","visitName","visitCall","CallIndirect","visitCallIndirectPre","_BinaryenCallIndirectGetTarget","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperandAt","visitCallIndirect","visitIndex","visitLocalGet","visitLocalSet","visitGlobalGet","GlobalSet","_BinaryenGlobalSetGetName","_BinaryenGlobalSetGetValue","visitGlobalSet","visitLoad","Store","visitStore","visitConst","visitUnary","visitBinary","visitSelect","Drop","visitDrop","visitReturn","MemorySize","visitMemorySize","MemoryGrow","visitMemoryGrow","visitNop","visitUnreachable","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","visitAtomicRMW","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","visitAtomicCmpxchg","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","visitAtomicWait","AtomicNotify","_BinaryenAtomicNotifyGetPtr","_BinaryenAtomicNotifyGetNotifyCount","visitAtomicNotify","AtomicFence","visitAtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","visitSIMDExtract","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","visitSIMDReplace","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","visitSIMDShuffle","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","visitSIMDTernary","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","visitSIMDShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","visitSIMDLoad","SIMDLoadStoreLane","_BinaryenSIMDLoadStoreLaneGetPtr","_BinaryenSIMDLoadStoreLaneGetVec","visitSIMDLoadStoreLane","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","visitMemoryInit","DataDrop","visitDataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","visitMemoryCopy","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","visitMemoryFill","Pop","visitPop","RefNull","visitRefNull","RefIs","_BinaryenRefIsGetValue","visitRefIs","RefFunc","_BinaryenRefFuncGetFunc","visitRefFunc","RefEq","_BinaryenRefEqGetLeft","_BinaryenRefEqGetRight","visitRefEq","Try","_BinaryenTryGetBody","numCatchBodies","_BinaryenTryGetNumCatchBodies","_BinaryenTryGetCatchBodyAt","visitTry","visitTag","_BinaryenThrowGetTag","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperandAt","visitThrow","Rethrow","visitRethrow","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperandAt","visitTupleMake","TupleExtract","_BinaryenTupleExtractGetTuple","visitTupleExtract","I31New","_BinaryenI31NewGetValue","visitI31New","I31Get","_BinaryenI31GetGetI31","visitI31Get","CallRef","visitCallRef","RefTest","visitRefTest","RefCast","visitRefCast","BrOn","visitBrOn","RttCanon","visitRttCanon","RttSub","visitRttSub","StructNew","visitStructNew","StructGet","visitStructGet","StructSet","visitStructSet","ArrayNew","visitArrayNew","ArrayGet","visitArrayGet","ArraySet","visitArraySet","ArrayLen","visitArrayLen","RefAs","visitRefAs","replaceChild","search","child","_BinaryenBlockSetChildAt","_BinaryenIfSetCondition","_BinaryenIfSetIfTrue","_BinaryenIfSetIfFalse","_BinaryenLoopSetBody","_BinaryenBreakSetCondition","_BinaryenBreakSetValue","_BinaryenSwitchSetCondition","_BinaryenSwitchSetValue","_BinaryenCallSetOperandAt","_BinaryenCallIndirectSetTarget","_BinaryenCallIndirectSetOperandAt","_BinaryenLocalSetSetValue","_BinaryenGlobalSetSetValue","_BinaryenLoadSetPtr","_BinaryenStoreSetPtr","_BinaryenStoreSetValue","_BinaryenUnarySetValue","_BinaryenBinarySetLeft","_BinaryenBinarySetRight","_BinaryenSelectSetIfTrue","_BinaryenSelectSetIfFalse","_BinaryenSelectSetCondition","_BinaryenDropSetValue","_BinaryenReturnSetValue","_BinaryenMemoryGrowSetDelta","_BinaryenAtomicRMWSetPtr","_BinaryenAtomicRMWSetValue","_BinaryenAtomicCmpxchgSetPtr","_BinaryenAtomicCmpxchgSetExpected","repl","_BinaryenAtomicCmpxchgSetReplacement","_BinaryenAtomicWaitSetPtr","_BinaryenAtomicWaitSetExpected","_BinaryenAtomicWaitSetTimeout","_BinaryenAtomicNotifySetPtr","_BinaryenAtomicNotifySetNotifyCount","_BinaryenSIMDExtractSetVec","_BinaryenSIMDReplaceSetVec","_BinaryenSIMDReplaceSetValue","_BinaryenSIMDShuffleSetLeft","_BinaryenSIMDShuffleSetRight","_BinaryenSIMDTernarySetA","_BinaryenSIMDTernarySetB","_BinaryenSIMDTernarySetC","_BinaryenSIMDShiftSetVec","_BinaryenSIMDShiftSetShift","_BinaryenSIMDLoadSetPtr","_BinaryenSIMDLoadStoreLaneSetPtr","_BinaryenSIMDLoadStoreLaneSetVec","_BinaryenMemoryInitSetDest","_BinaryenMemoryInitSetOffset","_BinaryenMemoryInitSetSize","_BinaryenMemoryCopySetDest","_BinaryenMemoryCopySetSource","_BinaryenMemoryCopySetSize","_BinaryenMemoryFillSetDest","_BinaryenMemoryFillSetValue","_BinaryenMemoryFillSetSize","_BinaryenRefIsSetValue","_BinaryenRefEqSetLeft","_BinaryenRefEqSetRight","_BinaryenTrySetBody","catchBody","_BinaryenTrySetCatchBodyAt","_BinaryenThrowSetOperandAt","_BinaryenTupleMakeSetOperandAt","_BinaryenTupleExtractSetTuple","_BinaryenI31NewSetValue","i31Expr","_BinaryenI31GetSetI31","_currentFunction","_currentGlobal","currentFunction","currentGlobal","walkFunctions","walkGlobals","moduleRef","_BinaryenGetNumFunctions","walkFunction","_BinaryenGetFunctionByIndex","_BinaryenGetNumGlobals","walkGlobal","_BinaryenGetGlobalByIndex","init","_BinaryenFunctionSetBody","parentExpressionOrNull","_BinaryenExpressionFinalize","Pass","seenStores","ptrType","readStringCached","checkRT","matchPattern","needsSlot","slotMaps","tempMaps","exportMap","hasStackCheckFunction","callSlotOffset","callSlotStack","slotMap","slotIndex","managedOperandIndices","tempMap","_BinaryenFunctionGetNumLocals","ptrBinaryAdd","ptrBinarySub","ptrConst","makeStackCheck","frameSize","remain","nativeSource","numSlots","match","noteSlot","getSharedTemp","ptrSize","updateCallOperands","callIndirect","replaceCurrent","numVars","vars","exportRef","_BinaryenExportGetKind","internalNameRef","_BinaryenExportGetValue","externalNameRef","_BinaryenExportGetName","expandType","numParams","wrapperName","wrapperNameRef","makeStackOffset","instrumentReturns","InstrumentReturns","makeStackFill","bodyType","updateFunction","updateExport","parentPass","AL_MASK","AL_SIZE","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","fromDecorator","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","INVALID","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","nextClassId","nextSignatureId","initialized","elementsByDeclaration","wrapperClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_functionPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_objectInstance","_templateStringsArrayInstance","_allocInstance","_reallocInstance","_freeInstance","_newInstance","_renewInstance","_linkInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_newBufferInstance","_newArrayInstance","_BLOCKInstance","_OBJECTInstance","nativeDummySignature","Resolver","nativeFile","File","requireClass","BLOCKInstance","blockOverhead","objectOverhead","currentOffset","payloadSize","blockSize","computeBlockStart","blockMinsize","decoratorFlags","registerNativeType","TypeDefinition","makeNativeTypeDeclaration","registerConstantInteger","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","starExports","foreignFile","lookupForeignFile","ensureExportStar","madeProgress","queuedImport","lookupForeign","splice","asAliasNamespace","Module_0_has_no_exported_member_1","exportNames","queuedExport","ensureExport","globalElement","isDeclaredElement","registerWrapperClass","thisPrototype","baseElement","basePrototype","Class_0_is_final_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","firstChar","markModuleExports","thisInstanceMembers","baseInstanceMembers","thisMember","baseMember","thisMethod","baseMethod","visibilityEquals","Overload_signatures_must_all_be_public_private_or_protected","overloads","baseMethodInstances","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","nextPrototype","markModuleExport","className","classElement","wrappedType","isIntegerInclReference","Global","makeNativeVariableDeclaration","merged","tryMerge","lookupExport","fileQueuedExports","queuedExportForeignPath","otherFile","acceptedFlags","fromKind","Duplicate_decorator","ClassPrototype","checkDecorators","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","FieldPrototype","addInstance","checkOperatorOverloads","firstArg","_0_is_not_a_valid_operator","overloadPrototypes","Duplicate_function_implementation","operatorKind","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","InterfacePrototype","initializeFieldAsProperty","Namespace","copyMembers","Element","shadowType","FILE","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","isPublic","vis","declaredElements","DeclaredElement","selfProperty","selfGetter","selfSetter","typedElements","TypedElement","aliasNamespaces","ensureGlobal","makeNativeNamespaceDeclaration","ns","copyExportsToNamespace","inSelf","ConstantValueKind","VariableLikeElement","i64_zero","boundPrototypes","parentKind","bound","instanceKey","nameInclTypeParameters","parameterType","parameterName","createParent","registerConcreteElement","getDefaultParameterName","postfix","setDebugLocation","FIELD_PROTOTYPE","_internalGetterName","_internalSetterName","_internalGetterSignature","_internalSetterSignature","toBound","_isInterface","basePtototype","Class","interfaces","_id","implementers","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","uncheckedOverload","overhead","computeBlockSize","baseOffset","typeKind","writeI32AsI64","writeI64AsI32","extendedPrototype","float32ArrayPrototype","float64ArrayPrototype","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","exceptIfMember","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","srcMembers","destMembers","asGlobal","cachedDefaultParameterNames","resolveClassPending","ctxElement","ctxTypes","reportMode","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_cannot_be_nullable","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveBuiltinNotNullableType","parameterTypeNode","returnTypeNode","typeArgumentNode","ensureOneTypeArgument","typeArgument","prev","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","oldCtxTypes","ctxFlow","resolveFunctionInclTypeArguments","typeParameterNames","argumentNodes","argumentExpression","propagateInferredGenericTypes","resolvedTypeArguments","typeParameterNode","inferredType","resolvedDefaultType","Type_argument_expected","ensureResolvedLazyGlobal","isTypedElement","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","targetNode","propertyName","variableLikeElement","wrapper","baseInstance","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_bool","Type_0_is_illegal_in_this_context","superLocal","fltType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","isClass","varType","varElement","thenType","elseType","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","methodOrPropertyName","baseMembers","parentClassInstance","unboundOverloadPrototype","unboundOverloadParent","isProperty","propertyParent","boundProperty","boundPropertyInstance","boundPrototype","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","instanceMemberPrototypes","properties","fieldTypeNode","baseField","Field","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","overloadKind","overloadPrototype","IndexSignature","pending","dependsOnInstance","_values2","Property","tokenFromKeyword","ASYNC","AWAIT","DEBUGGER","IS","KEYOF","MODULE","PACKAGE","WITH","tokenIsAlsoIdentifier","identifierHandling","unsafeNext","maxTokenLength","chr","isDecimalDigit","commentStartPos","LINE","TRIPLE","closed","testInteger","isIdentifierStart","posBefore","isIdentifierPart","maybeKeywordToken","isWhiteSpace","Invalid_character","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","reusableState","State","isTaggedTemplate","Unterminated_string_literal","readEscapeSequence","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","sepEnd","i64_4","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","sepCount","readDecimalFloatPartial","replaceAll","parseFloat","allowLeadingZeroSep","startIfTaggedTemplate","An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","TypeKind","TypeFlags","_nonNullableType","_nullableType","nullableType","signednessIsRelevant","currentClass","targetClass","targetFunction","isVectorValue","signednessIsImportant","validWat","nullablePostfix","numTypes","signatureTypes","numParameterTypes","typeRefs","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","indices","optionalStart","restIndex","cloneParameterTypes","readI64","i32_as_f32","f32_as_i32","i64_as_f64","valueI64","f64_as_i64","overrides","cloned","v","x","separator","ipos","dirname","origin","COLOR_GRAY","COLOR_GREEN","COLOR_BLUE","COLOR_WHITE","colorsEnabled","isEnabled","color","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","midVal","unmanaged","g","toText","wrapModule","emitStackIR","emitText","toAsmjs","emitAsmjs","keys","i64_one","i64_neg_one","i64_pow","rightLo","rightHi","i64_div","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shr","i64_not","i64_eq","i64_ne","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","minSafeF64","maxSafeF64","i64_is_f64","fround","globalScope","window","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","Infinity","NaN","clz32","round","y","sign","isTrueish","CHUNKSIZE","apply","fromCodePoint","at","charAt","configurable","replacment","split","arraySort","sort","comparator","forEach","Ctr","findLastIndex","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","arguments","console","byteOffset","warn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","globalThis"],"mappings":"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AAG,EAAA/pC,YAAYoD,UAAW,OAAO,EAGlD,MAEF,KAAK,EAAAklC,YAAYwd,gBAAiB,CAChC,IAAI1Q,EAA6BhM,EAAQgM,UACzC,GAAIA,EAEF,IAAK,IAAInM,EAAUC,WAAWkM,GAAYjM,EAAI,EAAGxkC,EAAIskC,EAAQx8C,OAAQ08C,EAAIxkC,IAAKwkC,EAAG,CAE/E,GADepkC,UAAUkkC,EAAQE,IACpBY,GAAG,EAAA/pC,YAAYoD,UAAW,OAAO,EAGlD,MAEF,QACE,GAAIgmC,EAAOW,GAAG,EAAA/pC,YAAYoD,WAAag2E,EAAkBhwC,GAAS,OAAO,GAMjF,OAAO,EA1TT,gB,2HC7WA,SAAYve,GACV,+CACA,mDACA,yCACA,6DACA,qGACA,iHACA,iHACA,mHACA,qHACA,uHACA,iMACA,iFACA,2FACA,+DACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,2FACA,uEACA,mDACA,+EACA,mGACA,uKACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,yDACA,uGACA,qHACA,yEACA,yLACA,2GACA,+KACA,uIACA,uIACA,+GACA,iGACA,yHACA,2EACA,qIACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,sJACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,oHACA,8GACA,sHACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA,w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/Y,GACvB,OAAO,EAAA6xC,WAAWG,MAAMhyC,IAI1B,oBAAyBA,GACvB,OAAO,EAAAqyC,WAAWL,MAAMhyC,IAI1B,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,eACS,EAAAihD,Q,u9CCrST,eACA,SACA,SAiCA,IAAiBh8D,EAkBL0yB,EAmBAzS,EAgFAtiB,EAoRA8B,EA+iFA0gD,GAx7FZ,SAAiBngD,GACF,EAAAqb,KAAgB,EAChB,EAAAmtC,YAAuB,EACvB,EAAAvoD,IAAe,EACf,EAAAkB,IAAe,EACf,EAAAwgB,IAAe,EACf,EAAAG,IAAe,EACf,EAAA8K,KAAgB,EAChB,EAAAC,QAAmB,EACnB,EAAAC,UAAqB,EACrB,EAAAC,OAAkB,EAClB,EAAAC,MAAiB,GACjB,EAAAC,OAAkB,GAClB,EAAAC,QAAmB,GACnB,EAAA+uC,MAAiB,EAdhC,CAAiBj8D,EAAA,EAAAA,UAAA,EAAAA,QAAO,KAkBxB,SAAY0yB,GACV,iBACA,yBACA,uCACA,2BACA,mBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,kBACA,8BACA,4DACA,qBAfF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAmBxB,SAAYzS,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,gCACA,gCACA,kBACA,kCACA,8BACA,sCACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,8CACA,gCACA,4BACA,gCACA,gCACA,kBACA,0BACA,sBACA,0BACA,sBACA,kBACA,sBACA,0BACA,8BACA,oCACA,wBACA,wBACA,0BACA,0BACA,0BACA,oBACA,4BACA,wBACA,8BACA,8BACA,8BACA,4BACA,4BACA,4BACA,4BACA,8BACA,sBAnEF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAuExB,SAAYi8C,GACV,2BACA,qBACA,uBACA,uBACA,i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GX,OAASS,EAAM,GACb,GAAIT,EAAejD,WAAW0D,IAAQmlI,EACpC,OAAO5lI,EAAezW,UAAU,EAAGkX,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BT,EAAwB+lI,GAClD,OAAI/lI,EAAeyC,WAAW,QACrBzC,EAEFwC,EACLsjI,EAAQC,GAAU,EAAAplI,eAAiBX,IAKvC,a,4PC3Ga,EAAAgmI,WAAa,QAEb,EAAA5uD,UAAY,QAEZ,EAAA6uD,YAAc,QAEd,EAAA9uD,aAAe,QAEf,EAAA+uD,WAAa,QAEb,EAAAjvD,cAAgB,QAEhB,EAAAC,WAAa,QAEb,EAAAivD,YAAc,QAEd,EAAAnuD,YAAc,OAG3B,IAAIouD,GAAgB,EAGpB,6BACE,OAAOA,GAIT,4BAAiCC,GAG/B,OADAD,EAAgBC,EADCA,GAMnB,oBAAyBxzI,EAAcyzI,GACrC,OAAOF,EAAgBE,EAAQzzI,EAAO,EAAAmlF,YAAcnlF,I,yBCyItD,SAAgB2sI,EAAehyC,GAC7B,OAAOA,GAAK,IAAeA,GAAK,G,iNA7KlC,SAAkB+4C,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B/4C,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,mBAKA,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,sBAA2BA,GACzB,OAAOgyC,EAAehyC,KAAY,GAAJA,IAAW,KAAmB,GAAJA,IAAW,KAIrE,6BAAkC3W,GAChC,OAAOA,GAAQ,IAAcA,GAAQ,KAC9BA,GAAQ,IAAcA,GAAQ,IAC9BA,GAAQ,IAAeA,GAAQ,IAIxC,6BAAkC2W,GAChC,IAAIg5C,EAAS,GAAJh5C,EACT,OAAOg5C,GAAM,IAAcA,GAAM,KACrB,IAALh5C,GACK,IAALA,GACAA,EAAI,SA8KqB3W,EA9KY2W,GA+K9B,KAAO3W,EAAO,QACrB4vD,EAAmB5vD,EAAa6vD,IAFzC,IAAkC7vD,GA1KlC,4BAAiC2W,GAC/B,MAAMg5C,EAAS,GAAJh5C,EACX,OAAOg5C,GAAM,IAAcA,GAAM,KAC1Bh5C,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB3W,EAzKY2W,GA0K7B,KAAO3W,EAAO,QACrB4vD,EAAmB5vD,EAAa8vD,IAFzC,IAAiC9vD,GArKjC,MAAM6vD,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__911__) {\nreturn ","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\nimport {\n  ExpressionRef\n} from \"./module\";\n\nimport {\n  Type\n} from \"./types\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  OMITTED,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n  COMPILED,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: Expression[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createOmittedExpression(\n    range: Range\n  ): OmittedExpression {\n    return new OmittedExpression(range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createTemplateLiteralExpression(\n    tag: Expression | null,\n    parts: string[],\n    rawParts: string[],\n    expressions: Expression[],\n    range: Range\n  ): TemplateLiteralExpression {\n    return new TemplateLiteralExpression(tag, parts, rawParts, expressions, range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  static createCompiledExpression(\n    expr: ExpressionRef,\n    type: Type,\n    range: Range\n  ): Expression {\n    return new CompiledExpression(expr, type, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  private isAccessOn(kind: NodeKind): bool {\n    let node = changetype<Node>(this);\n    if (node.kind == NodeKind.CALL) {\n      node = (<CallExpression>node).expression;\n    }\n    if (node.kind == NodeKind.PROPERTYACCESS) {\n      let target = (<PropertyAccessExpression>node).expression;\n      if (target.kind == kind) return true;\n    }\n    return false;\n  }\n\n  /** Checks if this node accesses a method or property on `this`. */\n  get isAccessOnThis(): bool {\n    return this.isAccessOn(NodeKind.THIS);\n  }\n\n  /** Checks if this node accesses a method or property on `super`. */\n  get isAccessOnSuper(): bool {\n    return this.isAccessOn(NodeKind.SUPER);\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  TEMPLATE,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents an omitted expression, e.g. within an array literal. */\nexport class OmittedExpression extends Expression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.OMITTED, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a template literal expression. */\nexport class TemplateLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Tag expression, if any. */\n    public tag: Expression | null,\n    /** String parts. */\n    public parts: string[],\n    /** Raw string parts. */\n    public rawParts: string[],\n    /** Expression parts. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.TEMPLATE, range);\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n/** Represents a special pre-compiled expression. If the expression has side-effects, special care has to be taken. */\nexport class CompiledExpression extends Expression {\n  constructor(\n    /** Compiled expression. */\n    public expr: ExpressionRef,\n    /** Type of the compiled expression. */\n    public type: Type,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMPILED, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, new Range(0, text.length));\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.range.source = this;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Remembered column number. */\n  private lineColumn: i32 = 1;\n\n  /** Determines the line number at the specified position. Starts at `1`. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. Starts at `1`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = normalizedPath;\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  SIMDLoadOp,\n  SIMDLoadStoreLaneOp,\n  RefIsOp,\n  TypeRef,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype,\n  Class\n} from \"./program\";\n\nimport {\n  findUsedLocals,\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const add = \"~lib/builtins/add\";\n  export const sub = \"~lib/builtins/sub\";\n  export const mul = \"~lib/builtins/mul\";\n  export const div = \"~lib/builtins/div\";\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_add = \"~lib/builtins/i32.add\";\n  export const i64_add = \"~lib/builtins/i64.add\";\n  export const f32_add = \"~lib/builtins/f32.add\";\n  export const f64_add = \"~lib/builtins/f64.add\";\n  export const i32_sub = \"~lib/builtins/i32.sub\";\n  export const i64_sub = \"~lib/builtins/i64.sub\";\n  export const f32_sub = \"~lib/builtins/f32.sub\";\n  export const f64_sub = \"~lib/builtins/f64.sub\";\n  export const i32_mul = \"~lib/builtins/i32.mul\";\n  export const i64_mul = \"~lib/builtins/i64.mul\";\n  export const f32_mul = \"~lib/builtins/f32.mul\";\n  export const f64_mul = \"~lib/builtins/f64.mul\";\n  export const i32_div_s = \"~lib/builtins/i32.div_s\";\n  export const i32_div_u = \"~lib/builtins/i32.div_u\";\n  export const i64_div_s = \"~lib/builtins/i64.div_s\";\n  export const i64_div_u = \"~lib/builtins/i64.div_u\";\n  export const f32_div = \"~lib/builtins/f32.div\";\n  export const f64_div = \"~lib/builtins/f64.div\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load_zero = \"~lib/builtins/v128.load_zero\";\n  export const v128_load_lane = \"~lib/builtins/v128.load_lane\";\n  export const v128_store_lane = \"~lib/builtins/v128.store_lane\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_load8x8_s = \"~lib/builtins/v128.load8x8_s\";\n  export const v128_load8x8_u = \"~lib/builtins/v128.load8x8_u\";\n  export const v128_load16x4_s = \"~lib/builtins/v128.load16x4_s\";\n  export const v128_load16x4_u = \"~lib/builtins/v128.load16x4_u\";\n  export const v128_load32x2_s = \"~lib/builtins/v128.load32x2_s\";\n  export const v128_load32x2_u = \"~lib/builtins/v128.load32x2_u\";\n  export const v128_load8_splat = \"~lib/builtins/v128.load8_splat\";\n  export const v128_load16_splat = \"~lib/builtins/v128.load16_splat\";\n  export const v128_load32_splat = \"~lib/builtins/v128.load32_splat\";\n  export const v128_load64_splat = \"~lib/builtins/v128.load64_splat\";\n  export const v128_load32_zero = \"~lib/builtins/v128.load32_zero\";\n  export const v128_load64_zero = \"~lib/builtins/v128.load64_zero\";\n  export const v128_load8_lane = \"~lib/builtins/v128.load8_lane\";\n  export const v128_load16_lane = \"~lib/builtins/v128.load16_lane\";\n  export const v128_load32_lane = \"~lib/builtins/v128.load32_lane\";\n  export const v128_load64_lane = \"~lib/builtins/v128.load64_lane\";\n  export const v128_store8_lane = \"~lib/builtins/v128.store8_lane\";\n  export const v128_store16_lane = \"~lib/builtins/v128.store16_lane\";\n  export const v128_store32_lane = \"~lib/builtins/v128.store32_lane\";\n  export const v128_store64_lane = \"~lib/builtins/v128.store64_lane\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_sat = \"~lib/builtins/v128.add_sat\";\n  export const v128_sub_sat = \"~lib/builtins/v128.sub_sat\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_popcnt = \"~lib/builtins/v128.popcnt\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_ceil = \"~lib/builtins/v128.ceil\";\n  export const v128_floor = \"~lib/builtins/v128.floor\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n  export const v128_nearest = \"~lib/builtins/v128.nearest\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_convert_low = \"~lib/builtins/v128.convert_low\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_trunc_sat_zero = \"~lib/builtins/v128.trunc_sat_zero\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_extend_low = \"~lib/builtins/v128.extend_low\";\n  export const v128_extend_high = \"~lib/builtins/v128.extend_high\";\n  export const v128_extadd_pairwise = \"~lib/builtins/v128.extadd_pairwise\";\n  export const v128_demote_zero = \"~lib/builtins/v128.demote_zero\";\n  export const v128_promote_low = \"~lib/builtins/v128.promote_low\";\n  export const v128_q15mulr_sat = \"~lib/builtins/v128.q15mulr_sat\";\n  export const v128_extmul_low = \"~lib/builtins/v128.extmul_low\";\n  export const v128_extmul_high = \"~lib/builtins/v128.extmul_high\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_sat_s = \"~lib/builtins/i8x16.add_sat_s\";\n  export const i8x16_add_sat_u = \"~lib/builtins/i8x16.add_sat_u\";\n  export const i8x16_sub_sat_s = \"~lib/builtins/i8x16.sub_sat_s\";\n  export const i8x16_sub_sat_u = \"~lib/builtins/i8x16.sub_sat_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_popcnt = \"~lib/builtins/i8x16.popcnt\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n  export const i8x16_shuffle = \"~lib/builtins/i8x16.shuffle\";\n  export const i8x16_swizzle = \"~lib/builtins/i8x16.swizzle\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_sat_s = \"~lib/builtins/i16x8.add_sat_s\";\n  export const i16x8_add_sat_u = \"~lib/builtins/i16x8.add_sat_u\";\n  export const i16x8_sub_sat_s = \"~lib/builtins/i16x8.sub_sat_s\";\n  export const i16x8_sub_sat_u = \"~lib/builtins/i16x8.sub_sat_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_extend_low_i8x16_s = \"~lib/builtins/i16x8.extend_low_i8x16_s\";\n  export const i16x8_extend_low_i8x16_u = \"~lib/builtins/i16x8.extend_low_i8x16_u\";\n  export const i16x8_extend_high_i8x16_s = \"~lib/builtins/i16x8.extend_high_i8x16_s\";\n  export const i16x8_extend_high_i8x16_u = \"~lib/builtins/i16x8.extend_high_i8x16_u\";\n  export const i16x8_extadd_pairwise_i8x16_s = \"~lib/builtins/i16x8.extadd_pairwise_i8x16_s\";\n  export const i16x8_extadd_pairwise_i8x16_u = \"~lib/builtins/i16x8.extadd_pairwise_i8x16_u\";\n  export const i16x8_q15mulr_sat_s = \"~lib/builtins/i16x8.q15mulr_sat_s\";\n  export const i16x8_extmul_low_i8x16_s = \"~lib/builtins/i16x8.extmul_low_i8x16_s\";\n  export const i16x8_extmul_low_i8x16_u = \"~lib/builtins/i16x8.extmul_low_i8x16_u\";\n  export const i16x8_extmul_high_i8x16_s = \"~lib/builtins/i16x8.extmul_high_i8x16_s\";\n  export const i16x8_extmul_high_i8x16_u = \"~lib/builtins/i16x8.extmul_high_i8x16_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_trunc_sat_f64x2_s_zero = \"~lib/builtins/i32x4.trunc_sat_f64x2_s_zero\";\n  export const i32x4_trunc_sat_f64x2_u_zero = \"~lib/builtins/i32x4.trunc_sat_f64x2_u_zero\";\n  export const i32x4_extend_low_i16x8_s = \"~lib/builtins/i32x4.extend_low_i16x8_s\";\n  export const i32x4_extend_low_i16x8_u = \"~lib/builtins/i32x4.extend_low_i16x8_u\";\n  export const i32x4_extend_high_i16x8_s = \"~lib/builtins/i32x4.extend_high_i16x8_s\";\n  export const i32x4_extend_high_i16x8_u = \"~lib/builtins/i32x4.extend_high_i16x8_u\";\n  export const i32x4_extadd_pairwise_i16x8_s = \"~lib/builtins/i32x4.extadd_pairwise_i16x8_s\";\n  export const i32x4_extadd_pairwise_i16x8_u = \"~lib/builtins/i32x4.extadd_pairwise_i16x8_u\";\n  export const i32x4_extmul_low_i16x8_s = \"~lib/builtins/i32x4.extmul_low_i16x8_s\";\n  export const i32x4_extmul_low_i16x8_u = \"~lib/builtins/i32x4.extmul_low_i16x8_u\";\n  export const i32x4_extmul_high_i16x8_s = \"~lib/builtins/i32x4.extmul_high_i16x8_s\";\n  export const i32x4_extmul_high_i16x8_u = \"~lib/builtins/i32x4.extmul_high_i16x8_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\";\n  export const i64x2_mul = \"~lib/builtins/i64x2.mul\";\n  export const i64x2_abs = \"~lib/builtins/i64x2.abs\";\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\";\n  export const i64x2_bitmask = \"~lib/builtins/i64x2.bitmask\";\n  export const i64x2_eq = \"~lib/builtins/i64x2.eq\";\n  export const i64x2_ne = \"~lib/builtins/i64x2.ne\";\n  export const i64x2_lt_s = \"~lib/builtins/i64x2.lt_s\";\n  export const i64x2_lt_u = \"~lib/builtins/i64x2.lt_u\";\n  export const i64x2_le_s = \"~lib/builtins/i64x2.le_s\";\n  export const i64x2_le_u = \"~lib/builtins/i64x2.le_u\";\n  export const i64x2_gt_s = \"~lib/builtins/i64x2.gt_s\";\n  export const i64x2_gt_u = \"~lib/builtins/i64x2.gt_u\";\n  export const i64x2_ge_s = \"~lib/builtins/i64x2.ge_s\";\n  export const i64x2_ge_u = \"~lib/builtins/i64x2.ge_u\";\n  export const i64x2_extend_low_i32x4_s = \"~lib/builtins/i64x2.extend_low_i32x4_s\";\n  export const i64x2_extend_low_i32x4_u = \"~lib/builtins/i64x2.extend_low_i32x4_u\";\n  export const i64x2_extend_high_i32x4_s = \"~lib/builtins/i64x2.extend_high_i32x4_s\";\n  export const i64x2_extend_high_i32x4_u = \"~lib/builtins/i64x2.extend_high_i32x4_u\";\n  export const i64x2_extmul_low_i32x4_s = \"~lib/builtins/i64x2.extmul_low_i32x4_s\";\n  export const i64x2_extmul_low_i32x4_u = \"~lib/builtins/i64x2.extmul_low_i32x4_u\";\n  export const i64x2_extmul_high_i32x4_s = \"~lib/builtins/i64x2.extmul_high_i32x4_s\";\n  export const i64x2_extmul_high_i32x4_u = \"~lib/builtins/i64x2.extmul_high_i32x4_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n  export const f32x4_floor = \"~lib/builtins/f32x4.floor\";\n  export const f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n  export const f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_demote_f64x2_zero = \"~lib/builtins/f32x4.demote_f64x2_zero\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n  export const f64x2_floor = \"~lib/builtins/f64x2.floor\";\n  export const f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n  export const f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_low_i32x4_s = \"~lib/builtins/f64x2.convert_low_i32x4_s\";\n  export const f64x2_convert_low_i32x4_u = \"~lib/builtins/f64x2.convert_low_i32x4_u\";\n  export const f64x2_promote_low_f32x4 = \"~lib/builtins/f64x2.promote_low_f32x4\";\n\n  export const i31_new = \"~lib/builtins/i31.new\";\n  export const i31_get = \"~lib/builtins/i31.get\";\n\n  // internals\n  export const data_end = \"~lib/memory/__data_end\";\n  export const stack_pointer = \"~lib/memory/__stack_pointer\";\n  export const heap_base = \"~lib/memory/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n  export const tostack = \"~lib/rt/__tostack\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/function.ts\n  export const Function = \"~lib/function/Function\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/string.ts\n  export const String_raw = \"~lib/string/String.raw\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Provided this operand, if any. */\n    public thisOperand: Expression | null,\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n/** Function builtins map. */\nexport const function_builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFloatValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isBooleanValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isSignedIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isAssignableTo(compiler.program.stringInstance)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.extends(compiler.program.arrayPrototype)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isArrayLike\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFunction ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isNullableReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element !== null ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classReference = type.getClassOrWrapper(compiler.program);\n  if (!classReference) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.isIntegerValue && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.isIntegerValue && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classReference.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classReference.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classReference.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.isInternalReference) {\n    let classReference = resultType.getClass();\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      assert(resultType.getSignature());\n      value = \"Function\";\n    }\n  } else {\n    value = resultType.toString();\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  let signatureReference = type.getSignature();\n  if (signatureReference) {\n    return module.i32(signatureReference.id);\n  }\n  let classReference = type.getClassOrWrapper(compiler.program);\n  if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n    return module.i32(classReference.id);\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8: // not wrapped\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value << (shift & mask)) | (value >>> ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_tee(temp1.index, arg0, false), // i32\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1, false), // i32\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_get(temp1.index, TypeRef.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, TypeRef.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value >>> (shift & mask)) | (value << ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_tee(temp1.index, arg0, false), // i32\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1, false), // i32\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_get(temp1.index, TypeRef.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, TypeRef.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0, false), // i32\n                module.i32(31)\n              ),\n              false // i32\n            ),\n            module.local_get(temp1.index, TypeRef.I32)\n          ),\n          module.local_get(temp2.index, TypeRef.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0, false), // i32/i64\n                isWasm64 ? module.i64(63) : module.i32(31)\n              ),\n              false // i32/i64\n            ),\n            module.local_get(temp1.index, options.sizeTypeRef)\n          ),\n          module.local_get(temp2.index, options.sizeTypeRef)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0, false), // i64\n                module.i64(63)\n              ),\n              false // i64\n            ),\n            module.local_get(temp1.index, TypeRef.I64)\n          ),\n          module.local_get(temp2.index, TypeRef.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op as i32 != -1) {\n      let flow = compiler.currentFlow;\n      let typeRef = type.toRef();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0, false), // numeric\n        module.local_tee(temp2.index, arg1, false), // numeric\n        module.binary(op,\n          module.local_get(temp1.index, typeRef),\n          module.local_get(temp2.index, typeRef)\n        ),\n        typeRef\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op as i32 != -1) {\n      let flow = compiler.currentFlow;\n      let typeRef = type.toRef();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0, false), // numeric\n        module.local_tee(temp2.index, arg1, false), // numeric\n        module.binary(op,\n          module.local_get(temp1.index, typeRef),\n          module.local_get(temp2.index, typeRef)\n        ),\n        typeRef\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32ToI32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64ToI64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64ToI64\n            : UnaryOp.ReinterpretF32ToI32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32ToF32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64ToF64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), TypeRef.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0, false), // f32\n          module.local_get(temp.index, TypeRef.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), TypeRef.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0, false), // f64\n          module.local_get(temp.index, TypeRef.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), TypeRef.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0, false), // f32\n            module.local_get(temp.index, TypeRef.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), TypeRef.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0, false), // f64\n            module.local_get(temp.index, TypeRef.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.isSignedIntegerValue,\n    arg0,\n    outType.toRef(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(ptr: usize, value: T*, immOffset?: usize, immAlign?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toRef(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// add<T?>(left: T, right: T) -> T\nfunction builtin_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeAdd(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"add\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.add, builtin_add);\n\n// sub<T?>(left: T, right: T) -> T\nfunction builtin_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeSub(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"sub\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sub, builtin_sub);\n\n// mul<T?>(left: T, right: T) -> T\nfunction builtin_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeMul(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"mul\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.mul, builtin_mul);\n\n// div<T?>(left: T, right: T) -> T\nfunction builtin_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeDiv(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"div\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.div, builtin_div);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toRef(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue|| // float to int\n      inType.size < type.size  // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toRef(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toRef());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    arg2 = compiler.convertExpression(arg2, inType, type, false, operands[2]);\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toRef());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toRef());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType, // ^\n    operands[2]\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2, type.toRef());\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.memory_size();\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  return module.memory_grow(compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.CONV_IMPLICIT));\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.isValue) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = compiler.compileExpression(elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType, elementExpression);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addAlignedMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addAlignedMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === GC =====================================================================================\n\nfunction builtin_i31_new(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i31ref;\n  return module.i31_new(arg0);\n}\nbuiltins.set(BuiltinNames.i31_new, builtin_i31_new);\n\nfunction builtin_i31_get(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.i31ref, Constraints.CONV_IMPLICIT);\n  if (ctx.contextualType.is(TypeFlags.UNSIGNED)) {\n    compiler.currentType = Type.u32;\n    return module.i31_get(arg0, false);\n  } else {\n    compiler.currentType = Type.i32;\n    return module.i31_get(arg0, true);\n  }\n}\nbuiltins.set(BuiltinNames.i31_get, builtin_i31_get);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>TypeRef.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>TypeRef.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>TypeRef.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>TypeRef.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: return module.if(module.ref_is(RefIsOp.RefIsNull, arg0), abort);\n\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0, false), // numeric\n          module.local_get(temp.index, TypeRef.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0, false) // i64\n          ),\n          abort,\n          module.local_get(temp.index, TypeRef.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0, type.isManaged)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.sizeTypeRef)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0, false), // f32\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, TypeRef.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0, false), // f64\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, TypeRef.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: {\n        let temp = flow.getTempLocal(type);\n        let ret = module.if(\n          module.ref_is(RefIsOp.RefIsNull,\n            module.local_tee(temp.index, arg0, false) // ref\n          ),\n          abort,\n          module.local_get(temp.index, type.toRef())\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// call_indirect<T?>(index: u32, ...args: *[]) -> T\nfunction builtin_call_indirect(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, i32.MAX_VALUE)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var returnType: Type;\n  if (typeArguments) {\n    assert(typeArguments.length);\n    returnType = typeArguments[0];\n  } else {\n    returnType = ctx.contextualType;\n  }\n  var indexArg = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length - 1;\n  var operandExprs = new Array<ExpressionRef>(numOperands);\n  var paramTypeRefs = new Array<TypeRef>(numOperands);\n  for (let i = 0; i < numOperands; ++i) {\n    operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.auto);\n    paramTypeRefs[i] = compiler.currentType.toRef();\n  }\n  compiler.currentType = returnType;\n  return module.call_indirect(indexArg, operandExprs, createType(paramTypeRefs), returnType.toRef());\n}\nbuiltins.set(BuiltinNames.call_indirect, builtin_call_indirect);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.getClass();\n  if (!classInstance) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  var ctor = compiler.ensureConstructor(classInstance, ctx.reportNode);\n  compiler.checkFieldInitialization(classInstance, ctx.reportNode);\n  return compiler.compileInstantiate(ctor, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Function builtins ======================================================================\n\n// Function<T>#call(thisArg: thisof<T> | null, ...args: *[]) -> returnof<T>\nfunction builtin_function_call(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var parent = ctx.prototype.parent;\n  assert(parent.kind == ElementKind.CLASS);\n  var classInstance = <Class>parent;\n  assert(classInstance.prototype == compiler.program.functionPrototype);\n  var typeArguments = assert(classInstance.typeArguments);\n  assert(typeArguments.length == 1);\n  var ftype = typeArguments[0];\n  var signature = assert(ftype.getSignature());\n  var returnType = signature.returnType;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1 + signature.requiredParameters, 1 + signature.parameterTypes.length)\n  ) {\n    compiler.currentType = returnType;\n    return compiler.module.unreachable();\n  }\n  var functionArg = compiler.compileExpression(assert(ctx.thisOperand), ftype, Constraints.CONV_IMPLICIT);\n  var thisOperand = assert(ctx.operands.shift());\n  var thisType = signature.thisType;\n  var thisArg: usize = 0;\n  if (thisType) {\n    thisArg = compiler.compileExpression(thisOperand, thisType, Constraints.CONV_IMPLICIT);\n  } else if (thisOperand.kind != NodeKind.NULL) {\n    compiler.error(\n      DiagnosticCode._this_cannot_be_referenced_in_current_location,\n      thisOperand.range\n    );\n    return compiler.module.unreachable();\n  }\n  return compiler.compileCallIndirect(signature, functionArg, ctx.operands, ctx.reportNode, thisArg, ctx.contextualType == Type.void);\n}\nfunction_builtins.set(\"call\", builtin_function_call);\n\n// String.raw(parts: TemplateStringsArray, ...values: unknown[]): string\nfunction builtin_string_raw(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = ctx.compiler.program.stringInstance.type;\n  compiler.error(\n    DiagnosticCode.Not_implemented_0,\n    ctx.reportNode.range, \"String.raw\"\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.String_raw, builtin_string_raw);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (type.isValue) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleI8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.Load8Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.Load16Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.Load32Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.Load32Splat, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.Load64Splat, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.Load8x8S, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.Load8x8U, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.Load16x4S, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.Load16x4U, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.Load32x2S, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.Load32x2U, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.load_zero<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_zero(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: return module.simd_load(SIMDLoadOp.Load32Zero, arg0, immOffset, immAlign);\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: return module.simd_load(SIMDLoadOp.Load64Zero, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.simd_load(compiler.options.isWasm64 ? SIMDLoadOp.Load64Zero : SIMDLoadOp.Load32Zero, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_zero\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_zero, builtin_v128_load_zero);\n\n// v128.load_lane<TFrom!>(ptr: usize, vec: v128, idx: u8, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 5)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.u8, Constraints.CONV_IMPLICIT);\n  var idx = 0;\n  var precomp = module.runExpression(arg2, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[2].range\n    );\n  }\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 4) {\n    immOffset = evaluateImmediateOffset(operands[3], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 5) {\n      immAlign = evaluateImmediateAlign(operands[4], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load8Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load16Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load32Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load64Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.simd_loadstorelane(compiler.options.isWasm64 ? SIMDLoadStoreLaneOp.Load64Lane : SIMDLoadStoreLaneOp.Load32Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_lane, builtin_v128_load_lane);\n\n// v128.store_lane<TFrom!>(ptr: usize, vec: v128, idx: u8, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_store_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 5)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.u8, Constraints.CONV_IMPLICIT);\n  var idx = 0;\n  var precomp = module.runExpression(arg2, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[2].range\n    );\n  }\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 4) {\n    immOffset = evaluateImmediateOffset(operands[3], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 5) {\n      immAlign = evaluateImmediateAlign(operands[4], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store8Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store16Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store32Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store64Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.simd_loadstorelane(compiler.options.isWasm64 ? SIMDLoadStoreLaneOp.Store64Lane : SIMDLoadStoreLaneOp.Store32Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.store_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_store_lane, builtin_v128_store_lane);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.MulI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.MulI64x2 : BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_sat, builtin_v128_add_sat);\n\n// v128.sub_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_sat, builtin_v128_sub_sat);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.EqI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.EqI64x2 : BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.NeI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.NeI64x2 : BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.LtI64x2, arg0, arg1);\n      // no LtU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LtI64x2 : BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.LeI64x2, arg0, arg1);\n      // no LeU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LeI64x2 : BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.GtI64x2, arg0, arg1);\n      // no GtU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GtI64x2 : BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.GeI64x2, arg0, arg1);\n      // no GeU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GeI64x2 : BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.AbsI64x2, arg0);\n      case TypeKind.ISIZE: return module.unary(compiler.options.isWasm64 ? UnaryOp.AbsI64x2 : UnaryOp.AbsI32x4, arg0);\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.convert_low<T!>(a: v128) -> v128\nfunction builtin_v128_convert_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertLowI32x4ToF64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertLowU32x4ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert_low, builtin_v128_convert_low);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.trunc_sat_zero<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat_zero(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF64x2ToI32x4Zero, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF64x2ToU32x4Zero, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat_zero\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat_zero, builtin_v128_trunc_sat_zero);\n\n// v128.extend_low<T!>(a: v128) -> v128\nfunction builtin_v128_extend_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtendLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtendLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtendLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtendLowU16x8ToU32x4, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ExtendLowI32x4ToI64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ExtendLowU32x4ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extend_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extend_low, builtin_v128_extend_low);\n\n// v128.extend_high<T!>(a: v128) -> v128\nfunction builtin_v128_extend_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtendHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtendHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtendHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtendHighU16x8ToU32x4, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ExtendHighI32x4ToI64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ExtendHighU32x4ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extend_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extend_high, builtin_v128_extend_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndnotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  return module.unary(UnaryOp.AnyTrueV128, arg0);\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(compiler.options.isWasm64 ? UnaryOp.AllTrueI64x2 : UnaryOp.AllTrueI32x4, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.BitmaskI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.unary(compiler.options.isWasm64 ? UnaryOp.BitmaskI64x2 : UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.popcnt<T!>(a: v128) -> v128\nfunction builtin_v128_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.PopcntI8x16, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_popcnt, builtin_v128_popcnt);\n\n// v128.extadd_pairwise<T!>(a: v128) -> v128\nfunction builtin_v128_extadd_pairwise(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtaddPairwiseI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtaddPairwiseU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtaddPairwiseI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtaddPairwiseU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extadd_pairwise\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extadd_pairwise, builtin_v128_extadd_pairwise);\n\n// v128.demote_zero<T?>(a: v128) -> v128\nfunction builtin_v128_demote_zero(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments ? typeArguments[0] : Type.f64;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F64: return module.unary(UnaryOp.DemoteZeroF64x2ToF32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.demote_zero\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_demote_zero, builtin_v128_demote_zero);\n\n// v128.promote_low<T?>(a: v128) -> v128\nfunction builtin_v128_promote_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments ? typeArguments[0] : Type.f32;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.PromoteLowF32x4ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.promote_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_promote_low, builtin_v128_promote_low);\n\n// v128.q15mulr_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_q15mulr_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.Q15mulrSatI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.q15mulr_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_q15mulr_sat, builtin_v128_q15mulr_sat);\n\n// v128.extmul_low<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_extmul_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.ExtmulLowI16x8, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.ExtmulLowU16x8, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.ExtmulLowI32x4, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.ExtmulLowU32x4, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.ExtmulLowI64x2, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.ExtmulLowU64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extmul_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extmul_low, builtin_v128_extmul_low);\n\n// v128.extmul_high<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_extmul_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.ExtmulHighI16x8, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.ExtmulHighU16x8, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.ExtmulHighI32x4, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.ExtmulHighU32x4, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.ExtmulHighI64x2, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.ExtmulHighU64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extmul_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extmul_high, builtin_v128_extmul_high);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], TypeRef.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], TypeRef.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.add -> add<i32>\nfunction builtin_i32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_add, builtin_i32_add);\n\n// i64.add -> add<i64>\nfunction builtin_i64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_add, builtin_i64_add);\n\n// f32.add -> add<f32>\nfunction builtin_f32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32_add, builtin_f32_add);\n\n// f64.add -> add<f64>\nfunction builtin_f64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64_add, builtin_f64_add);\n\n// i32.sub -> sub<i32>\nfunction builtin_i32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_sub, builtin_i32_sub);\n\n// i64.sub -> sub<i64>\nfunction builtin_i64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_sub, builtin_i64_sub);\n\n// f32.sub -> sub<f32>\nfunction builtin_f32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sub, builtin_f32_sub);\n\n// f64.sub -> sub<f64>\nfunction builtin_f64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sub, builtin_f64_sub);\n\n// i32.mul -> mul<i32>\nfunction builtin_i32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32_mul, builtin_i32_mul);\n\n// i64.mul -> mul<i64>\nfunction builtin_i64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64_mul, builtin_i64_mul);\n\n// f32.mul -> mul<f32>\nfunction builtin_f32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32_mul, builtin_f32_mul);\n\n// f64.mul -> mul<f64>\nfunction builtin_f64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64_mul, builtin_f64_mul);\n\n// i32.div_s -> div<i32>\nfunction builtin_i32_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_s, builtin_i32_div_s);\n\n// i32.div_u -> div<u32>\nfunction builtin_i32_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.u32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_u, builtin_i32_div_u);\n\n// i64.div_s -> div_s<i64>\nfunction builtin_i64_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_s, builtin_i64_div_s);\n\n// i64.div_u -> div_u<u64>\nfunction builtin_i64_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.u64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_u, builtin_i64_div_u);\n\n// f32.div -> div<f32>\nfunction builtin_f32_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32_div, builtin_f32_div);\n\n// f64.div -> div<f64>\nfunction builtin_f64_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64_div, builtin_f64_div);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.load8x8_s -> v128.load_ext<i8>\nfunction builtin_v128_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8x8_s, builtin_v128_load8x8_s);\n\n// v128.load8x8_u -> v128.load_ext<u8>\nfunction builtin_v128_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8x8_u, builtin_v128_load8x8_u);\n\n// v128.load16x4_s -> v128.load_ext<i16>\nfunction builtin_v128_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16x4_s, builtin_v128_load16x4_s);\n\n// v128.load16x4_u -> v128.load_ext<u16>\nfunction builtin_v128_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16x4_u, builtin_v128_load16x4_u);\n\n// v128.load32x2_s -> v128.load_ext<i32>\nfunction builtin_v128_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32x2_s, builtin_v128_load32x2_s);\n\n// v128.load32x2_u -> v128.load_ext<u32>\nfunction builtin_v128_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32x2_u, builtin_v128_load32x2_u);\n\n// v128.load8_splat -> v128.load_splat<u8>\nfunction builtin_v128_load8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8_splat, builtin_v128_load8_splat);\n\n// v128.load16_splat -> v128.load_splat<u16>\nfunction builtin_v128_load16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16_splat, builtin_v128_load16_splat);\n\n// v128.load32_splat -> v128.load_splat<u32>\nfunction builtin_v128_load32_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_splat, builtin_v128_load32_splat);\n\n// v128.load64_splat -> v128.load_splat<u64>\nfunction builtin_v128_load64_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_splat, builtin_v128_load64_splat);\n\n// v128.load32_zero -> v128.load_zero<u32>\nfunction builtin_v128_load32_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_zero(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_zero, builtin_v128_load32_zero);\n\n// v128.load64_zero -> v128.load_zero<u64>\nfunction builtin_v128_load64_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_zero(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_zero, builtin_v128_load64_zero);\n\n// v128.load8_lane -> v128.load_lane<u8>\nfunction builtin_v128_load8_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8_lane, builtin_v128_load8_lane);\n\n// v128.load16_lane -> v128.load_lane<u16>\nfunction builtin_v128_load16_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16_lane, builtin_v128_load16_lane);\n\n// v128.load32_lane -> v128.load_lane<u32>\nfunction builtin_v128_load32_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_lane, builtin_v128_load32_lane);\n\n// v128.load64_lane -> v128.load_lane<u64>\nfunction builtin_v128_load64_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_lane, builtin_v128_load64_lane);\n\n// v128.store8_lane -> v128.store_lane<u8>\nfunction builtin_v128_store8_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store8_lane, builtin_v128_store8_lane);\n\n// v128.store16_lane -> v128.store_lane<u16>\nfunction builtin_v128_store16_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store16_lane, builtin_v128_store16_lane);\n\n// v128.store32_lane -> v128.store_lane<u32>\nfunction builtin_v128_store32_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store32_lane, builtin_v128_store32_lane);\n\n// v128.store64_lane -> v128.store_lane<u64>\nfunction builtin_v128_store64_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store64_lane, builtin_v128_store64_lane);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_sat_s -> v128.add_sat<i8>\nfunction builtin_i8x16_add_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_sat_s, builtin_i8x16_add_sat_s);\n\n// i8x16.add_sat_u -> v128.add_sat<u8>\nfunction builtin_i8x16_add_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_sat_u, builtin_i8x16_add_sat_u);\n\n// i8x16.sub_sat_s -> v128.sub_sat<i8>\nfunction builtin_i8x16_sub_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_sat_s, builtin_i8x16_sub_sat_s);\n\n// i8x16.sub_sat_u -> v128.sub_sat<u8>\nfunction builtin_i8x16_sub_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_sat_u, builtin_i8x16_sub_sat_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.popcnt -> v128.popcnt<i8>\nfunction builtin_i8x16_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_popcnt, builtin_i8x16_popcnt);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_i8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shuffle, builtin_i8x16_shuffle);\n\n// i8x16.swizzle -> v128.swizzle\nfunction builtin_i8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_swizzle, builtin_i8x16_swizzle);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_sat_s -> v128.add_sat<i16>\nfunction builtin_i16x8_add_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_sat_s, builtin_i16x8_add_sat_s);\n\n// i16x8.add_sat_u -> v128.add_sat<u16>\nfunction builtin_i16x8_add_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_sat_u, builtin_i16x8_add_sat_u);\n\n// i16x8.sub_sat_s -> v128.sub_sat<i16>\nfunction builtin_i16x8_sub_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_sat_s, builtin_i16x8_sub_sat_s);\n\n// i16x8.sub_sat_u -> v128.sub_sat<u16>\nfunction builtin_i16x8_sub_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_sat_u, builtin_i16x8_sub_sat_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.extend_low_i8x16_s -> v128.extend_low<i8>\nfunction builtin_i16x8_extend_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_low_i8x16_s, builtin_i16x8_extend_low_i8x16_s);\n\n// i16x8.extend_low_i8x16_u -> v128.extend_low<u8>\nfunction builtin_i16x8_extend_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_low_i8x16_u, builtin_i16x8_extend_low_i8x16_u);\n\n// i16x8.extend_high_i8x16_s -> v128.extend_high<i8>\nfunction builtin_i16x8_extend_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_high_i8x16_s, builtin_i16x8_extend_high_i8x16_s);\n\n// i16x8.extend_high_i8x16_u -> v128.extend_high<u8>\nfunction builtin_i16x8_extend_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_high_i8x16_u, builtin_i16x8_extend_high_i8x16_u);\n\n// i16x8.extadd_pairwise_i8x16_s -> v128.extadd_pairwise<i8>\nfunction builtin_i16x8_extadd_pairwise_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extadd_pairwise_i8x16_s, builtin_i16x8_extadd_pairwise_i8x16_s);\n\n// i16x8.extadd_pairwise_i8x16_u -> v128.extadd_pairwise<u8>\nfunction builtin_i16x8_extadd_pairwise_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extadd_pairwise_i8x16_u, builtin_i16x8_extadd_pairwise_i8x16_u);\n\n// i16x8.q15mulr_sat_s -> v128.q15mulr_sat<i16>\nfunction builtin_i16x8_q15mulr_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_q15mulr_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_q15mulr_sat_s, builtin_i16x8_q15mulr_sat_s);\n\n// i16x8.extmul_low_i8x16_s -> v128.extmul_low<i16>\nfunction builtin_i16x8_extmul_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_low_i8x16_s, builtin_i16x8_extmul_low_i8x16_s);\n\n// i16x8.extmul_low_i8x16_u -> v128.extmul_low<u16>\nfunction builtin_i16x8_extmul_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_low_i8x16_u, builtin_i16x8_extmul_low_i8x16_u);\n\n// i16x8.extmul_high_i8x16_s -> v128.extmul_high<i16>\nfunction builtin_i16x8_extmul_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_high_i8x16_s, builtin_i16x8_extmul_high_i8x16_s);\n\n// i16x8.extmul_high_i8x16_u -> v128.extmul_high<u16>\nfunction builtin_i16x8_extmul_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_high_i8x16_u, builtin_i16x8_extmul_high_i8x16_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.trunc_sat_f64x2_s_zero -> v128.trunc_sat_zero<i32>\nfunction builtin_i32x4_trunc_sat_f64x2_s_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat_zero(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f64x2_s_zero, builtin_i32x4_trunc_sat_f64x2_s_zero);\n\n// i32x4.trunc_sat_f64x2_u_zero -> v128.trunc_sat_zero<u32>\nfunction builtin_i32x4_trunc_sat_f64x2_u_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat_zero(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f64x2_u_zero, builtin_i32x4_trunc_sat_f64x2_u_zero);\n\n// i32x4.extend_low_i16x8_s -> // v128.extend_low<i16>\nfunction builtin_i32x4_extend_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_low_i16x8_s, builtin_i32x4_extend_low_i16x8_s);\n\n// i32x4.extend_low_i16x8_u -> v128.extend_low<u16>\nfunction builtin_i32x4_extend_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_low_i16x8_u, builtin_i32x4_extend_low_i16x8_u);\n\n// i32x4.extend_high_i16x8_s -> v128.extend_high<i16>\nfunction builtin_i32x4_extend_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_high_i16x8_s, builtin_i32x4_extend_high_i16x8_s);\n\n// i32x4.extend_high_i16x8_u -> v128.extend_high<u16>\nfunction builtin_i32x4_extend_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_high_i16x8_u, builtin_i32x4_extend_high_i16x8_u);\n\n// i32x4.extadd_pairwise_i16x8_s -> v128.extadd_pairwise<i16>\nfunction builtin_i32x4_extadd_pairwise_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extadd_pairwise_i16x8_s, builtin_i32x4_extadd_pairwise_i16x8_s);\n\n// i32x4.extadd_pairwise_i16x8_u -> v128.extadd_pairwise<u16>\nfunction builtin_i32x4_extadd_pairwise_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extadd_pairwise_i16x8_u, builtin_i32x4_extadd_pairwise_i16x8_u);\n\n// i32x4.extmul_low_i16x8_s -> v128.extmul_low<i16>\nfunction builtin_i32x4_extmul_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_low_i16x8_s, builtin_i32x4_extmul_low_i16x8_s);\n\n// i32x4.extmul_low_i16x8_u -> v128.extmul_low<u16>\nfunction builtin_i32x4_extmul_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_low_i16x8_u, builtin_i32x4_extmul_low_i16x8_u);\n\n// i32x4.extmul_high_i16x8_s -> v128.extmul_high<i16>\nfunction builtin_i32x4_extmul_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_high_i16x8_s, builtin_i32x4_extmul_high_i16x8_s);\n\n// i32x4.extmul_high_i16x8_u -> v128.extmul_high<u16>\nfunction builtin_i32x4_extmul_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_high_i16x8_u, builtin_i32x4_extmul_high_i16x8_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.mul -> v128.mul<i64>\nfunction builtin_i64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_mul, builtin_i64x2_mul);\n\n// i64x2.abs -> v128.abs<i64>\nfunction builtin_i64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_abs, builtin_i64x2_abs);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.bitmask -> v128.bitmask<i64>\nfunction builtin_i64x2_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_bitmask, builtin_i64x2_bitmask);\n\n// i64x2.eq -> v128.eq<i64>\nfunction builtin_i64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_eq, builtin_i64x2_eq);\n\n// i64x2.ne -> v128.ne<i64>\nfunction builtin_i64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ne, builtin_i64x2_ne);\n\n// i64x2.lt_s -> v128.lt<i64>\nfunction builtin_i64x2_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_lt_s, builtin_i64x2_lt_s);\n\n// i64x2.le_s -> v128.le<i64>\nfunction builtin_i64x2_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_le_s, builtin_i64x2_le_s);\n\n// i64x2.gt_s -> v128.gt<i64>\nfunction builtin_i64x2_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_gt_s, builtin_i64x2_gt_s);\n\n// i64x2.ge_s -> v128.ge<i64>\nfunction builtin_i64x2_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ge_s, builtin_i64x2_ge_s);\n\n// i64x2.extend_low_i32x4_s -> // v128.extend_low<i32>\nfunction builtin_i64x2_extend_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_low_i32x4_s, builtin_i64x2_extend_low_i32x4_s);\n\n// i64x2.extend_low_i32x4_u -> v128.extend_low<u32>\nfunction builtin_i64x2_extend_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_low_i32x4_u, builtin_i64x2_extend_low_i32x4_u);\n\n// i64x2.extend_high_i32x4_s -> v128.extend_high<i32>\nfunction builtin_i64x2_extend_high_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_high_i32x4_s, builtin_i64x2_extend_high_i32x4_s);\n\n// i64x2.extend_high_i32x4_u -> v128.extend_high<u32>\nfunction builtin_i64x2_extend_high_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_high_i32x4_u, builtin_i64x2_extend_high_i32x4_u);\n\n// i64x2.extmul_low_i32x4_s -> v128.extmul_low<i32>\nfunction builtin_i64x2_extmul_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_low_i32x4_s, builtin_i64x2_extmul_low_i32x4_s);\n\n// i64x2.extmul_low_i32x4_u -> v128.extmul_low<u32>\nfunction builtin_i64x2_extmul_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_low_i32x4_u, builtin_i64x2_extmul_low_i32x4_u);\n\n// i64x2.extmul_high_i32x4_s -> v128.extmul_high<i32>\nfunction builtin_i64x2_extmul_high_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_high_i32x4_s, builtin_i64x2_extmul_high_i32x4_s);\n\n// i64x2.extmul_high_i32x4_u -> v128.extmul_high<u32>\nfunction builtin_i64x2_extmul_high_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_high_i32x4_u, builtin_i64x2_extmul_high_i32x4_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.demote_f64x2_zero -> v128.demote_zero<f64>\nfunction builtin_f32x4_demote_f64x2_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_demote_zero(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_demote_f64x2_zero, builtin_f32x4_demote_f64x2_zero);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_low_i32x4_s -> v128.convert_low<i32>\nfunction builtin_f64x2_convert_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert_low(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_low_i32x4_s, builtin_f64x2_convert_low_i32x4_s);\n\n// f64x2.convert_low_i32x4_u -> v128.convert_low<u32>\nfunction builtin_f64x2_convert_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert_low(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_low_i32x4_u, builtin_f64x2_convert_low_i32x4_u);\n\n// f64x2.promote_low_f32x4 -> v128.promote_low<f32>\nfunction builtin_f64x4_promote_low_f32x4(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_promote_low(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_promote_low_f32x4, builtin_f64x4_promote_low_f32x4);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var sizeTypeRef = compiler.options.sizeTypeRef;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classReference = globalType.getClass();\n    if (\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value)),\n              module.local_get(0, TypeRef.I32) // cookie\n            ], TypeRef.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, sizeTypeRef),\n              false // internal\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, sizeTypeRef), // tempRef != null\n              module.local_get(0, TypeRef.I32) // cookie\n            ], TypeRef.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    TypeRef.I32,  // cookie\n    TypeRef.None, // => void\n    [ sizeTypeRef ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Ensures that the visitor function of the specified class is compiled. */\nfunction ensureVisitMembersOf(compiler: Compiler, instance: Class): void {\n  assert(instance.type.isManaged);\n  if (instance.visitRef) return;\n\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var sizeTypeRef = usizeType.toRef();\n  var sizeTypeSize = usizeType.byteSize;\n  var visitInstance = assert(program.visitInstance);\n  var body = new Array<ExpressionRef>();\n\n  // If the class has a base class, call its visitor first\n  var base = instance.base;\n  if (base) {\n    body.push(\n      module.call(base.internalName + \"~visit\", [\n        module.local_get(0, sizeTypeRef), // this\n        module.local_get(1, TypeRef.I32)  // cookie\n      ], TypeRef.None)\n    );\n  }\n\n  // Some standard library components provide a custom visitor implementation,\n  // for example to visit all members of a collection, e.g. arrays and maps.\n  var hasVisitImpl = false;\n  if (instance.isDeclaredInLibrary) {\n    let visitPrototype = instance.lookupInSelf(\"__visit\");\n    if (visitPrototype) {\n      assert(visitPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitInstance = program.resolver.resolveFunction(<FunctionPrototype>visitPrototype, null);\n      if (!visitInstance || !compiler.compileFunction(visitInstance)) {\n        body.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSignature = visitInstance.signature;\n        let visitThisType = assert(visitSignature.thisType);\n        assert(\n          visitSignature.parameterTypes.length == 1 &&\n          visitSignature.parameterTypes[0] == Type.u32 &&\n          visitSignature.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        body.push(\n          module.call(visitInstance.internalName, [\n            module.local_get(0, sizeTypeRef), // this\n            module.local_get(1, TypeRef.I32)  // cookie\n          ], TypeRef.None)\n        );\n      }\n      hasVisitImpl = true;\n    }\n  }\n\n  // Otherwise, if there is no custom visitor, generate a visitor function\n  // according to class layout, visiting all _own_ managed members.\n  var needsTempValue = false;\n  if (!hasVisitImpl) {\n    let members = instance.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n        let member = unchecked(_values[j]);\n        if (member.kind == ElementKind.FIELD) {\n          if ((<Field>member).parent === instance) {\n            let fieldType = (<Field>member).type;\n            if (fieldType.isManaged) {\n              let fieldOffset = (<Field>member).memoryOffset;\n              assert(fieldOffset >= 0);\n              needsTempValue = true;\n              body.push(\n                // if ($2 = value) __visit($2, $1)\n                module.if(\n                  module.local_tee(2,\n                    module.load(sizeTypeSize, false,\n                      module.local_get(0, sizeTypeRef),\n                      sizeTypeRef, fieldOffset\n                    ),\n                    false // internal\n                  ),\n                  module.call(visitInstance.internalName, [\n                    module.local_get(2, sizeTypeRef), // value\n                    module.local_get(1, TypeRef.I32)  // cookie\n                  ], TypeRef.None)\n                )\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Create the visitor function\n  instance.visitRef = module.addFunction(instance.internalName + \"~visit\",\n    createType([sizeTypeRef, TypeRef.I32]),\n    TypeRef.None,\n    needsTempValue ? [ sizeTypeRef ] : null,\n    module.flatten(body, TypeRef.None)\n  );\n\n  // And make sure the base visitor function exists\n  if (base && base.type.isManaged) {\n    // errored earlier if not managed\n    ensureVisitMembersOf(compiler, base);\n  }\n}\n\n/** Compiles the `__visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var sizeTypeRef = usizeType.toRef();\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  compiler.compileFunction(visitInstance, true); // is lazy, make sure it is compiled\n\n  // Prepare a mapping of class names to visitor calls. Each name corresponds to\n  // the respective sequential (0..N) class id.\n  var names = new Array<string>();\n  var cases = new Array<ExpressionRef>();\n  var nextId = 0;\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    assert(instanceId == nextId++);\n    let instance = assert(managedClasses.get(instanceId));\n    names[i] = instance.internalName;\n    if (instance.isPointerfree) {\n      cases[i] = module.return();\n    } else {\n      cases[i] = module.block(null, [\n        module.call(instance.internalName + \"~visit\", [\n          module.local_get(0, sizeTypeRef), // this\n          module.local_get(1, TypeRef.I32)  // cookie\n        ], TypeRef.None),\n        module.return()\n      ], TypeRef.None);\n      ensureVisitMembersOf(compiler, instance);\n    }\n  }\n\n  // Make a br_table of the mapping, calling visitor functions by unique class id\n  var current = module.block(names[0], [\n    module.switch(names, \"invalid\",\n      // load<u32>(changetype<usize>(this) - 8)\n      module.load(4, false,\n        sizeTypeRef == TypeRef.I64\n          ? module.binary(BinaryOp.SubI64,\n              module.local_get(0, sizeTypeRef),\n              module.i64(8)\n            )\n          : module.binary(BinaryOp.SubI32,\n              module.local_get(0, sizeTypeRef),\n              module.i32(8) // rtId is at -8\n            ),\n        TypeRef.I32, 0\n      )\n    )\n  ], TypeRef.None);\n\n  // Wrap blocks in order\n  for (let i = 0, k = names.length - 1; i < k; ++i) {\n    current = module.block(names[i + 1], [\n      current,\n      cases[i]\n    ], TypeRef.None);\n  }\n\n  // Wrap the last id in an 'invalid' block to break out of on invalid ids\n  current = module.block(\"invalid\", [\n    current,\n    cases[names.length - 1]\n  ], TypeRef.None);\n\n  // Add the function, executing an unreachable if breaking to 'invalid'\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ sizeTypeRef, TypeRef.I32 ]), // this, cookie\n    TypeRef.None, // => void\n    null,\n    module.flatten([\n      current,\n      module.unreachable()\n    ])\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isPointerfree) flags |= TypeinfoFlags.POINTERFREE;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addAlignedMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, TypeRef.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, TypeRef.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var sizeTypeRef = compiler.options.sizeTypeRef;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        sizeTypeRef == TypeRef.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, sizeTypeRef)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, sizeTypeRef),\n            module.i32(instance.id)\n          ], TypeRef.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", sizeTypeRef, TypeRef.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.isIntegerValue) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITELY_ASSIGNED = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Did error. */\n  ERRORED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a stub. */\n  STUB = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 28,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const funcref = \"funcref\";\n  export const externref = \"externref\";\n  export const anyref = \"anyref\";\n  export const eqref = \"eqref\";\n  export const i31ref = \"i31ref\";\n  export const dataref = \"dataref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  export const nonnull = \"nonnull\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_EXPORT_RUNTIME = \"ASC_EXPORT_RUNTIME\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  export const ASC_FEATURE_GC = \"ASC_FEATURE_GC\";\n  export const ASC_FEATURE_MEMORY64 = \"ASC_FEATURE_MEMORY64\";\n  export const ASC_VERSION_MAJOR = \"ASC_VERSION_MAJOR\";\n  export const ASC_VERSION_MINOR = \"ASC_VERSION_MINOR\";\n  export const ASC_VERSION_PATCH = \"ASC_VERSION_PATCH\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Funcref = \"Funcref\";\n  export const Externref = \"Externref\";\n  export const Anyref = \"Anyref\";\n  export const Eqref = \"Eqref\";\n  export const I31ref = \"I31ref\";\n  export const Dataref = \"Dataref\";\n  export const String = \"String\";\n  export const Object = \"Object\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const Function = \"Function\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const TemplateStringsArray = \"TemplateStringsArray\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const ipow32 = \"ipow32\";\n  export const ipow64 = \"ipow64\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const new_ = \"__new\";\n  export const renew = \"__renew\";\n  export const link = \"__link\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const newBuffer = \"__newBuffer\";\n  export const newArray = \"__newArray\";\n  export const BLOCK = \"~lib/rt/common/BLOCK\";\n  export const OBJECT = \"~lib/rt/common/OBJECT\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  function_builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  RefIsOp,\n  TypeRef,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChildAt,\n  getBlockName,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags,\n  isConstZero\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  FieldFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  TemplateLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  CompiledExpression,\n\n  TypeNode,\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToRefs\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  uniqueMap,\n  isPowerOf2,\n  v128_zero,\n  readI32\n} from \"./util\";\n\nimport {\n  RtraceMemory\n} from \"./passes/rtrace\";\n\nimport {\n  ShadowStackPass\n} from \"./passes/shadowstack\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imported memory is zero filled. */\n  zeroFilledMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS | Feature.SIGN_EXTENSION;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n  /** If true, exports the runtime helpers. */\n  exportRuntime: bool = false;\n  /** Stack size in bytes, if using a stack. */\n  stackSize: i32 = 0;\n  /** Semantic major bundle version from root package.json */\n  bundleMajorVersion: i32 = 0;\n  /** Semantic minor bundle version from root package.json */\n  bundleMinorVersion: i32 = 0;\n  /** Semantic patch bundle version from root package.json */\n  bundlePatchVersion: i32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the size type reference matching the target. */\n  get sizeTypeRef(): TypeRef {\n    return this.target == Target.WASM64 ? TypeRef.I64 : TypeRef.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 4,\n  /** Indicates that the value will become `this` of a property access or instance call. */\n  IS_THIS = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires data setup. */\n  DATA = 1 << 0,\n  /** Requires a stack. */\n  STACK = 1 << 1,\n  /** Requires heap setup. */\n  HEAP = 1 << 2,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 3,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 4,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 5,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 6\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Functions to export if `--exportRuntime` is set. */\nconst runtimeFunctions = [ \"__new\", \"__pin\", \"__unpin\", \"__collect\" ];\n/** Globals to export if `--exportRuntime` is set. */\nconst runtimeGlobals = [ \"__rtti_base\" ];\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled functions. */\n  lazyFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Virtually called stubs that may have overloads. */\n  virtualStubs: Set<Function> = new Set();\n  /** Elements currently undergoing compilation. */\n  pendingElements: Set<Element> = new Set();\n  /** Elements, that are module exports, already processed */\n  doneModuleExports: Set<Element> = new Set();\n  /** Shadow stack reference. */\n  shadowStack!: ShadowStackPass;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create(options.stackSize > 0, options.sizeTypeRef);\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.TruncSat;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    if (options.hasFeature(Feature.GC)) featureFlags |= FeatureFlags.GC;\n    if (options.hasFeature(Feature.MEMORY64)) featureFlags |= FeatureFlags.Memory64;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n    this.shadowStack = new ShadowStackPass(this);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n    var resolver = this.resolver;\n    var hasShadowStack = options.stackSize > 0; // implies runtime=incremental\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable data, heap and rtti offset dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.data_end, TypeRef.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.heap_base, TypeRef.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, TypeRef.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.data_end, TypeRef.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.heap_base, TypeRef.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, TypeRef.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // compile and export runtime if requested\n    if (this.options.exportRuntime) {\n      for (let i = 0, k = runtimeFunctions.length; i < k; ++i) {\n        let name = runtimeFunctions[i];\n        let instance = program.requireFunction(name);\n        if (this.compileFunction(instance) && !module.hasExport(name)) {\n          module.addFunctionExport(instance.internalName, name);\n        }\n      }\n      for (let i = 0, k = runtimeGlobals.length; i < k; ++i) {\n        let name = runtimeGlobals[i];\n        let instance = program.requireGlobal(name);\n        if (this.compileGlobal(instance) && !module.hasExport(name)) {\n          module.addGlobalExport(instance.internalName, name);\n        }\n      }\n    }\n\n    // compile lazy functions\n    var lazyFunctions = this.lazyFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual stubs\n    var functionTable = this.functionTable;\n    var virtualStubs = this.virtualStubs;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // includes varargs stub\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualStubsSeen = new Set<Function>();\n    do {\n      // virtual stubs and overloads have cross-dependencies on each other, in that compiling\n      // either may discover the respective other. do this in a loop until no more are found.\n      resolver.discoveredOverload = false;\n      for (let _values = Set_values(virtualStubs), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        let overloadInstances = resolver.resolveOverloads(instance);\n        if (overloadInstances) {\n          for (let i = 0, k = overloadInstances.length; i < k; ++i) {\n            this.compileFunction(overloadInstances[i]);\n          }\n        }\n        virtualStubsSeen.add(instance);\n      }\n    } while (virtualStubs.size > virtualStubsSeen.size || resolver.discoveredOverload);\n    virtualStubsSeen.clear();\n    for (let _values = Set_values(virtualStubs), i = 0, k = _values.length; i < k; ++i) {\n      this.finalizeVirtualStub(_values[i]);\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    var memoryOffset = i64_align(this.memoryOffset, options.usizeType.byteSize);\n\n    // finalize data\n    module.removeGlobal(BuiltinNames.data_end);\n    if ((this.runtimeFeatures & RuntimeFeatures.DATA) != 0 || hasShadowStack) {\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.data_end, TypeRef.I64, false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.data_end, TypeRef.I32, false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // finalize stack (grows down from __heap_base to __data_end)\n    module.removeGlobal(BuiltinNames.stack_pointer);\n    if ((this.runtimeFeatures & RuntimeFeatures.STACK) != 0 || hasShadowStack) {\n      memoryOffset = i64_align(\n        i64_add(memoryOffset, i64_new(options.stackSize)),\n        options.usizeType.byteSize\n      );\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.stack_pointer, TypeRef.I64, true,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.stack_pointer, TypeRef.I32, true,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // finalize heap\n    module.removeGlobal(BuiltinNames.heap_base);\n    if ((this.runtimeFeatures & RuntimeFeatures.HEAP) != 0 || hasShadowStack) {\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.heap_base, TypeRef.I64, false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.heap_base, TypeRef.I32, false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    this.memoryOffset = memoryOffset;\n\n    // check that we didn't exceed lowMemoryLimit already\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.addFunctionTable(\"0\", tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, TypeRef.I32, TypeRef.None, null,\n        module.global_set(this.ensureArgumentsLength(), module.local_get(0, TypeRef.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n\n    // NOTE: no more element compiles from here. may go to the start function!\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, TypeRef.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.global_set(BuiltinNames.started, module.i32(1))\n        );\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, TypeRef.I32),\n            module.return()\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        typesToRefs(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // Run custom passes\n    if (hasShadowStack) {\n      this.shadowStack.walkModule();\n    }\n    if (program.lookup(\"ASC_RTRACE\") != null) {\n      new RtraceMemory(this).walkModule();\n    }\n\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    var module = this.module;\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>element;\n        let functionInstances = functionPrototype.instances;\n        if (functionInstances !== null && functionInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (functionPrototype.is(CommonFlags.GENERIC)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n              functionPrototype.identifierNode.range\n            );\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classPrototype = <ClassPrototype>element;\n        let classInstances = classPrototype.instances;\n        if (classInstances !== null && classInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (classPrototype.is(CommonFlags.GENERIC)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n              classPrototype.identifierNode.range\n            );\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else if (global.is(CommonFlags.COMPILED)) {\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(element.internalName, exportName);\n          }\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else if (enumValue.is(CommonFlags.COMPILED)) {\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(element.internalName, exportName);\n          }\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) {\n            let exportName = prefix + name;\n            if (!module.hasExport(exportName)) {\n              module.addFunctionExport(functionInstance.internalName, exportName);\n              if (signature.hasManagedOperands) {\n                this.shadowStack.noteExport(exportName, signature.getManagedOperandIndices());\n              }\n            }\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let getterExportName = prefix + GETTER_PREFIX + name;\n          if (this.compileFieldGetter(fieldInstance) && !module.hasExport(getterExportName)) {\n            module.addFunctionExport(fieldInstance.internalGetterName, getterExportName);\n            let signature = fieldInstance.internalGetterSignature;\n            if (signature.hasManagedOperands) {\n              this.shadowStack.noteExport(getterExportName, signature.getManagedOperandIndices());\n            }\n          }\n          if (!element.is(CommonFlags.READONLY)) {\n            let setterExportName = prefix + SETTER_PREFIX + name;\n            if (this.compileFieldSetter(fieldInstance) && !module.hasExport(setterExportName)) {\n              module.addFunctionExport(fieldInstance.internalSetterName, setterExportName);\n              let signature = fieldInstance.internalSetterSignature;\n              if (signature.hasManagedOperands) {\n                this.shadowStack.noteExport(setterExportName, signature.getManagedOperandIndices());\n              }\n            }\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n\n          if (!this.doneModuleExports.has(element)) {\n            module.addGlobal(internalName, TypeRef.I32, false, module.i32(classInstance.id));\n            this.doneModuleExports.add(element);\n          }\n\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(internalName, exportName);\n          }\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<TypeRef>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toRef();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.paramRefs,\n        startSignature.resultRefs,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, TypeRef.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return !global.is(CommonFlags.ERRORED);\n    global.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(global);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) {\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        global.set(CommonFlags.ERRORED);\n        pendingElements.delete(global);\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      let internalName = global.internalName;\n      if (internalName == BuiltinNames.data_end) this.runtimeFeatures |= RuntimeFeatures.DATA;\n      else if (internalName == BuiltinNames.stack_pointer) this.runtimeFeatures |= RuntimeFeatures.STACK;\n      else if (internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      pendingElements.delete(global);\n      return true;\n    }\n\n    var type = global.type;\n    var typeRef = type.toRef();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          typeRef,\n          !isDeclaredConstant\n        );\n        pendingElements.delete(global);\n        return true;\n      }\n\n      // Importing mutable globals is not supported in the MVP\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        global.declaration.range, \"mutable-globals\"\n      );\n      global.set(CommonFlags.ERRORED);\n      pendingElements.delete(global);\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>TypeRef.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>TypeRef.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>TypeRef.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>TypeRef.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              global.set(CommonFlags.ERRORED);\n              pendingElements.delete(global);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC);\n      } else {\n        initExpr = this.makeZero(type, global.declaration);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, typeRef, true, this.makeZero(type, global.declaration));\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, typeRef, !isDeclaredConstant, initExpr);\n    }\n    pendingElements.delete(global);\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return !element.is(CommonFlags.ERRORED);\n    element.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(element);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, TypeRef.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, TypeRef.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, TypeRef.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, TypeRef.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    pendingElements.delete(element);\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return !instance.is(CommonFlags.ERRORED);\n\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyFunctions.add(instance);\n        return true;\n      }\n    }\n\n    // ensure the function hasn't duplicate parameters\n    var parameters = instance.prototype.functionTypeNode.parameters;\n    var numParameters = parameters.length;\n    if (numParameters >= 2) {\n      let visited = new Set<string>();\n      visited.add(parameters[0].name.text);\n      for (let i = 1; i < numParameters; i++) {\n        let paramIdentifier = parameters[i].name;\n        let paramName = paramIdentifier.text;\n        if (!visited.has(paramName)) {\n          visited.add(paramName);\n        } else {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            paramIdentifier.range, paramName\n          );\n        }\n      }\n    }\n\n    instance.set(CommonFlags.COMPILED);\n    var pendingElements = this.pendingElements;\n    pendingElements.add(instance);\n\n    var previousType = this.currentType;\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      if (!this.compileFunctionBody(instance, stmts)) {\n        stmts.push(module.unreachable());\n      }\n\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        typesToRefs(instance.additionalLocals),\n        module.flatten(stmts, instance.signature.returnType.toRef())\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.paramRefs,\n        signature.resultRefs\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n      instance.set(CommonFlags.ERRORED);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    pendingElements.delete(instance);\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.signature.thisType\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n    var bodyStartIndex = stmts.length;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          this.makeConditionalAllocation(classInstance, thisLocal.index)\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n\n        // Insert right before the body\n        for (let i = stmts.length - 1; i >= bodyStartIndex; --i) {\n          stmts[i + 1] = stmts[i];\n        }\n        stmts[bodyStartIndex] = module.flatten(allocStmts, TypeRef.None);\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        stmts.push(\n          module.local_get(thisLocal.index, this.options.sizeTypeRef)\n        );\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    this.checkFieldInitialization(instance);\n\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    if (instance.getterRef) return true;\n    var module = this.module;\n    var valueType = instance.type;\n    var valueTypeRef = valueType.toRef();\n    var thisTypeRef = this.options.sizeTypeRef;\n    // return this.field\n    instance.getterRef = module.addFunction(instance.internalGetterName, thisTypeRef, valueTypeRef, null,\n      module.load(valueType.byteSize, valueType.isSignedIntegerValue,\n        module.local_get(0, thisTypeRef),\n        valueTypeRef, instance.memoryOffset\n      )\n    );\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var thisTypeRef = this.options.sizeTypeRef;\n    var valueTypeRef = type.toRef();\n    var module = this.module;\n    // void(this.field = value)\n    var bodyExpr = module.store(type.byteSize,\n      module.local_get(0, thisTypeRef),\n      module.local_get(1, valueTypeRef),\n      valueTypeRef, instance.memoryOffset\n    );\n    if (type.isManaged) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      if ((<Class>parent).type.isManaged) {\n        let linkInstance = this.program.linkInstance;\n        this.compileFunction(linkInstance);\n        bodyExpr = module.block(null, [\n          bodyExpr,\n          module.call(linkInstance.internalName, [\n            module.local_get(0, thisTypeRef),\n            module.local_get(1, valueTypeRef),\n            module.i32(0)\n          ], TypeRef.None)\n        ], TypeRef.None);\n      }\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ thisTypeRef, valueTypeRef ]), TypeRef.None, null,\n      bodyExpr\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addAlignedMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Adds a static memory segment representing a runtime object. */\n  addRuntimeMemorySegment(buffer: Uint8Array): MemorySegment {\n    var memoryOffset = this.program.computeBlockStart64(this.memoryOffset);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer expression. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var ptr = this.ensureStaticStringPtr(stringValue);\n    this.currentType = this.program.stringInstance.type;\n    return this.module.usize(ptr);\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticStringPtr(stringValue: string): i64 {\n    var program = this.program;\n    var totalOverhead = program.totalOverhead;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let len = stringValue.length;\n      let buf = stringInstance.createBuffer(len << 1);\n      for (let i = 0; i < len; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, totalOverhead + (i << 1));\n      }\n      stringSegment = this.addRuntimeMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    return i64_add(stringSegment.offset, i64_new(totalOverhead));\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var elementTypeRef = elementType.toRef();\n    switch (<u32>elementTypeRef) {\n      case <u32>TypeRef.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == elementTypeRef);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == elementTypeRef);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == elementTypeRef);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>TypeRef.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == elementTypeRef);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>TypeRef.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == elementTypeRef);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>TypeRef.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == elementTypeRef);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var arrayBufferInstance = program.arrayBufferInstance;\n    var buf = arrayBufferInstance.createBuffer(values.length * elementType.byteSize);\n    this.program.OBJECTInstance.writeField(\"rtId\", id, buf, 0); // use specified rtId\n    this.writeStaticBuffer(buf, program.totalOverhead, elementType, values);\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(\n    elementType: Type,\n    bufferSegment: MemorySegment,\n    /** Optional array instance override. */\n    arrayInstance: Class | null = null\n  ): MemorySegment {\n    var program = this.program;\n    if (!arrayInstance) {\n      arrayInstance = assert(this.resolver.resolveClass(this.program.arrayPrototype, [ elementType ]));\n    }\n    var bufferLength = readI32(bufferSegment.buffer, program.OBJECTInstance.offsetof(\"rtSize\"));\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n    var bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n    var buf = arrayInstance.createBuffer();\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf));\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a runtime counterpart of the specified function exists and returns its address. */\n  ensureRuntimeFunction(instance: Function): i64 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var program = this.program;\n    var memorySegment = instance.memorySegment;\n    if (!memorySegment) {\n\n      // Add to the function table\n      let functionTable = this.functionTable;\n      let tableBase = this.options.tableBase;\n      if (!tableBase) tableBase = 1; // leave first elem blank\n      let index = tableBase + functionTable.length;\n      functionTable.push(instance);\n\n      // Create runtime function\n      let rtInstance = assert(this.resolver.resolveClass(program.functionPrototype, [ instance.type ]));\n      let buf = rtInstance.createBuffer();\n      assert(rtInstance.writeField(\"_index\", index, buf));\n      assert(rtInstance.writeField(\"_env\", 0, buf));\n      instance.memorySegment = memorySegment = this.addRuntimeMemorySegment(buf);\n    }\n    return i64_add(memorySegment.offset, i64_new(program.totalOverhead));\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChildAt(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.freeScopedLocals();\n    flow.set(FlowFlags.BREAKS);\n    return module.br(breakLabel);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    flow.freeScopedLocals();\n    return module.br(continueLabel);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $loop                             ├◄───────────┐ recompile?\n    //   (?block $continue                      └─┐          │\n    //    (body)                                  │ bodyFlow │\n    //   )                                      ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //                                        │ └─┐          │ but does not continue\n    //   (br_if (cond) $loop)                 │   │ condFlow │\n    //                                        │ ┌─┘          │\n    //                                        ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"do-loop|\" + label;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    var possiblyContinues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS) && !possiblyContinues) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType,\n        statement.condition\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      if (possiblyContinues) {\n        bodyStmts = [\n          module.block(continueLabel, bodyStmts)\n        ];\n      }\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        bodyStmts.push(\n          module.br(loopLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        bodyStmts.push(\n          module.br(loopLabel,\n            condExpr\n          )\n        );\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations. Note that\n        // this may be necessary multiple times where locals depend on each other.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(loopLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //                                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //                                │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //                                │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    //                                ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType,\n        condition\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr, false) // bool\n    );\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations. Note that this\n      // may be necessary multiple times where locals depend on each other.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, TypeRef.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //                   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //                   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      expr = this.compileExpression(valueExpression, returnType, constraints);\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      this.currentType = returnType;\n      return module.unreachable();\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // Handle inline return\n    if (flow.isInline) {\n      return !expr\n        ? isLastInBody\n          ? module.nop()\n          : module.br(assert(flow.inlineReturnLabel))\n        : isLastInBody\n          ? expr\n          : this.currentType == Type.void\n            ? module.block(null, [ expr, module.br(assert(flow.inlineReturnLabel)) ])\n            : module.br(assert(flow.inlineReturnLabel), 0, expr);\n    }\n\n    // Otherwise emit a normal return\n    return !expr\n      ? isLastInBody\n        ? module.nop()\n        : module.return()\n      : isLastInBody\n        ? expr\n        : this.currentType == Type.void\n          ? module.block(null, [ expr, module.return() ])\n          : module.return(expr);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      ),\n      false // u32\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, TypeRef.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n      ? \"case\" + defaultIndex.toString()\n      : \"break\"\n    ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, TypeRef.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, TypeRef.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    flow.freeScopedLocals();\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          let pendingElements = this.pendingElements;\n          let dummy = flow.addScopedDummyLocal(name, type, statement); // pending dummy\n          pendingElements.add(dummy);\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT\n          );\n          pendingElements.delete(dummy);\n          flow.freeScopedDummyLocal(name);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let pendingElements = this.pendingElements;\n        let temp = flow.addScopedDummyLocal(name, Type.auto, statement); // pending dummy\n        pendingElements.add(temp);\n        initExpr = this.compileExpression(initializerNode, Type.auto); // reports\n        pendingElements.delete(temp);\n        flow.freeScopedDummyLocal(name);\n\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp; // always use precomputed initExpr\n            let local: Local | null = null;\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>TypeRef.I32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>TypeRef.I64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>TypeRef.F32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>TypeRef.F64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n            }\n            if (local) {\n              // Add as a virtual local that doesn't actually exist in WebAssembly\n              let scopedLocals = flow.scopedLocals;\n              if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n              else if (scopedLocals.has(name)) {\n                let existing = assert(scopedLocals.get(name));\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  declaration.name.range,\n                  existing.declaration.name.range,\n                  name\n                );\n                return this.module.unreachable();\n              }\n              scopedLocals.set(name, local);\n              isStatic = true;\n            }\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.makeLocalAssignment(local, initExpr, type, false)\n          );\n        } else {\n          // no need to assign zero\n          if (local.type.isShortIntegerValue) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    this.currentType = Type.void;\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //                                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //                                │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr, false) // bool\n    );\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations. Note that\n      // this may be necessary multiple times where locals depend on each other.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, TypeRef.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.isIntegerValue &&\n      contextualType.isIntegerValue &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMPILED: {\n        let compiled = <CompiledExpression>expression;\n        expr = compiled.expr;\n        this.currentType = compiled.type;\n        break;\n      }\n      case NodeKind.CLASS: {\n        // TODO: compile as class expression\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Block-scoped class declarations or expressions\"\n        );\n        expr = this.module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, expression);\n        this.currentType = currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, expression);\n        this.currentType = currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Converts an expression's result from one type to another. */\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit. */\n    explicit: bool,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.isReference || toType.isReference) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.isNullableReference && !toType.isNullableReference) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(toType.isExternalReference || fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        if (toType.isExternalReference) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            reportNode.range,\n            \"ref.cast\"\n          );\n          this.currentType = toType;\n          return module.unreachable();\n        }\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n    assert(!fromType.isReference && !toType.isReference);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.isFloatValue) {\n\n      // float to float\n      if (toType.isFloatValue) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32ToF64, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64ToF32, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.isIntegerValue) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f32, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToI64 : UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToI32 : UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToU64 : UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToU32 : UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f64, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToI64 : UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToI32 : UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToU64 : UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToU32 : UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.isIntegerValue && toType.isFloatValue) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.isLongIntegerValue) {\n\n        // i64 to i32 or smaller\n        if (toType.isBooleanValue) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n        } else if (!toType.isLongIntegerValue) {\n          expr = module.unary(UnaryOp.WrapI64ToI32, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.isLongIntegerValue) {\n        expr = module.unary(\n          fromType.isSignedIntegerValue ? UnaryOp.ExtendI32ToI64 : UnaryOp.ExtendU32ToU64,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.isShortIntegerValue) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.isVaryingIntegerValue && !toType.isVaryingIntegerValue) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n  private i32PowInstance: Function | null = null;\n  private i64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EQUALS_EQUALS) { // can't overload '==='\n          let classReference = leftType.getClassOrWrapper(this.program);\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeEq(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS) { // can't overload '!=='\n          let classReference = leftType.getClass();\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeNe(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"+\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAdd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeSub(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"*\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeMul(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POW);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"**\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"**\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makePow(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"/\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeDiv(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.REM);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"%\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeRem(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShl(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShr(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShru(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAnd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeOr(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeXor(leftExpr, rightExpr, commonType);\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & Constraints.MUST_WRAP;\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          leftExpr = this.makeIsTrueish(leftExpr, leftType, left);\n\n          // shortcut if lhs is always false\n          let condKind = this.evaluateCondition(leftExpr);\n          if (condKind == ConditionKind.FALSE) {\n            expr = leftExpr;\n          } else {\n            rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n            rightType = this.currentType;\n            rightFlow.freeScopedLocals();\n            rightExpr = this.makeIsTrueish(rightExpr, rightType, right);\n\n            // simplify if lhs is always true\n            if (condKind == ConditionKind.TRUE) {\n              expr = rightExpr;\n            } else {\n              expr = module.if(leftExpr, rightExpr, module.i32(0));\n            }\n          }\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType, left),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr, leftType.isManaged), leftType, left),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toRef())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & Constraints.MUST_WRAP;\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          leftExpr = this.makeIsTrueish(leftExpr, leftType, left);\n\n          // shortcut if lhs is always true\n          let condKind = this.evaluateCondition(leftExpr);\n          if (condKind == ConditionKind.TRUE) {\n            expr = leftExpr;\n          } else {\n            rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n            rightType = this.currentType;\n            rightFlow.freeScopedLocals();\n            rightExpr = this.makeIsTrueish(rightExpr, rightType, right);\n\n            // simplify if lhs is always false\n            if (condKind == ConditionKind.FALSE) {\n              expr = rightExpr;\n            } else {\n              expr = module.if(leftExpr, module.i32(1), rightExpr);\n            }\n          }\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr, leftType.isManaged), leftType, left),\n              module.local_get(temp.index, leftType.toRef()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  makeLt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeLe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeI64\n            : BinaryOp.LeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeU64\n            : BinaryOp.LeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeI64\n            : BinaryOp.GeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeU64\n            : BinaryOp.GeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeEq(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.EqI64\n            : BinaryOp.EqI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AllTrueI8x16,\n          module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return module.ref_eq(leftExpr, rightExpr);\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeNe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AnyTrueV128,\n          module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return module.unary(UnaryOp.EqzI32,\n          module.ref_eq(leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAdd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AddI64\n            : BinaryOp.AddI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeSub(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeMul(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.MulI64\n            : BinaryOp.MulI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makePow(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    let module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: {\n        return module.select(\n          module.i32(1),\n          module.binary(BinaryOp.EqI32, rightExpr, module.i32(0)),\n          leftExpr,\n          TypeRef.I32\n        );\n      }\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let instance = this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        let expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n        if (type.size < 32) {\n          // TODO: this is necessary because i32PowInstance is generic, and deals with 32-bit integers,\n          // so its flow does not indicate whether returned SMIs are wrapped. worth to avoid?\n          expr = this.ensureSmallIntegerWrap(expr, type);\n        }\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let instance = this.i64PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow64);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow64\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let isWasm64 = this.options.isWasm64;\n        let instance = isWasm64 ? this.i64PowInstance : this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(isWasm64 ? CommonNames.ipow64 : CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, isWasm64 ? \"ipow64\" : \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          if (isWasm64) {\n            this.i64PowInstance = instance;\n          } else {\n            this.i32PowInstance = instance;\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      // Math.pow otherwise (result is f64)\n      case TypeKind.F64: {\n        let instance = this.f64PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeDiv(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivI64\n            : BinaryOp.DivI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivU64\n            : BinaryOp.DivU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeRem(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemI64\n            : BinaryOp.RemI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemU64\n            : BinaryOp.RemU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F64: {\n        let instance = this.f64ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShl(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the RHS, but only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr << (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShlI32,\n          leftExpr,\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShlI64\n            : BinaryOp.ShlI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits,\n    // and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        // leftExpr >> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrI32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrI64\n            : BinaryOp.ShrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShru(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAnd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AndI64\n            : BinaryOp.AndI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeOr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.OrI64\n            : BinaryOp.OrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeXor(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.XorI64\n            : BinaryOp.XorI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having local flags that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(\n    expression: Expression,\n    valueExpression: Expression,\n    contextualType: Type\n  ): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (this.pendingElements.has(target)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            target.internalName\n          );\n          return this.module.unreachable();\n        }\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, target.internalName\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        let isConstructor = flow.actualFunction.is(CommonFlags.CONSTRUCTOR);\n\n        // Cannot assign to readonly fields except in constructors if there's no initializer\n        if (fieldInstance.is(CommonFlags.READONLY)) {\n          if (!isConstructor || initializerNode !== null) {\n            this.error(\n              DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n              valueExpression.range, fieldInstance.internalName\n            );\n            return module.unreachable();\n          }\n        }\n\n        // Mark initialized fields in constructors\n        thisExpression = assert(thisExpression);\n        if (isConstructor && thisExpression.kind == NodeKind.THIS) {\n          flow.setThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED);\n        }\n\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            thisExpression,\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let returnTypeRef = returnType.toRef();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr, returnType.isManaged),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, returnTypeRef)\n            ], valueExpression)\n          ], returnTypeRef);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toRef());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let thisType = classInstance.type;\n        let thisExpr = this.compileExpression(\n          assert(thisExpression),\n          thisType,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        let elementType = this.currentType;\n        if (tee) {\n          let tempTarget = flow.getTempLocal(thisType);\n          let tempElement = flow.getTempLocal(elementType);\n          let returnType = getterInstance.signature.returnType;\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr, thisType.isManaged),\n              module.local_tee(tempElement.index, elementExpr, elementType.isManaged),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toRef()),\n              module.local_get(tempElement.index, tempElement.type.toRef())\n            ], valueExpression)\n          ], returnType.toRef());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.isNullableReference) {\n      if (!valueType.isNullableReference || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n    if (type.isShortIntegerValue) {\n      if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n    }\n    if (tee) { // local = value\n      this.currentType = type;\n      return module.local_tee(localIndex, valueExpr, type.isManaged);\n    } else { // void(local = value)\n      this.currentType = Type.void;\n      return module.local_set(localIndex, valueExpr, type.isManaged);\n    }\n  }\n\n  /** Makes an assignment to a global. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var typeRef = type.toRef();\n\n    valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n    if (tee) { // (global = value), global\n      this.currentType = type;\n      return module.block(null, [\n        module.global_set(global.internalName, valueExpr),\n        module.global_get(global.internalName, typeRef)\n      ], typeRef);\n    } else { // global = value\n      this.currentType = Type.void;\n      return module.global_set(global.internalName,\n        valueExpr\n      );\n    }\n  }\n\n  /** Makes an assignment to a field. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var fieldTypeRef = fieldType.toRef();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (tee) {\n      this.compileField(field);\n      let tempThis = flow.getTempLocal(thisType);\n      let expr = module.block(null, [\n        module.call(field.internalSetterName, [ module.local_tee(tempThis.index, thisExpr, thisType.isManaged), valueExpr ], TypeRef.None),\n        module.call(field.internalGetterName, [ module.local_get(tempThis.index, thisType.toRef()) ], fieldTypeRef)\n      ], fieldTypeRef);\n      flow.freeTempLocal(tempThis);\n      this.currentType = fieldType;\n      return expr;\n    } else {\n      this.compileFieldSetter(field);\n      let expr = module.call(field.internalSetterName, [ thisExpr, valueExpr ], TypeRef.None);\n      this.currentType = Type.void;\n      return expr;\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = classInstance.base;\n      if (!baseClassInstance) {\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.expression.range\n        );\n        return module.unreachable();\n      }\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let sizeTypeRef = this.options.sizeTypeRef;\n\n      let baseCtorInstance = this.ensureConstructor(baseClassInstance, expression);\n      this.checkFieldInitialization(baseClassInstance, expression);\n      let superCall = this.compileCallDirect(\n        baseCtorInstance,\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, sizeTypeRef)\n      );\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall, classInstance.type.isManaged);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var functionArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: first-class function (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            let inlinedValue = local.constantIntegerValue;\n            if (this.options.isWasm64) {\n              functionArg = module.i64(i64_low(inlinedValue), i64_high(inlinedValue));\n            } else {\n              assert(!i64_high(inlinedValue));\n              functionArg = module.i32(i64_low(inlinedValue));\n            }\n          } else {\n            functionArg = module.local_get(local.index, this.options.sizeTypeRef);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          functionArg = module.global_get(global.internalName, global.type.toRef());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          let usizeType = this.options.usizeType;\n          functionArg = module.load(usizeType.byteSize, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n            ),\n            usizeType.toRef(),\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = propertyInstance.getterInstance;\n        let type = assert(this.resolver.getTypeOfElement(target));\n\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        functionArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>target;\n        let typeArguments = classInstance.getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          signature = ftype.getSignature();\n          functionArg = this.compileExpression(expression.expression, ftype, Constraints.CONV_IMPLICIT);\n          break;\n        }\n        // fall-through\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      functionArg,\n      expression.args,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  /** Compiles the given arguments like a call expression according to the specified context. */\n  private compileCallExpressionLike(\n    /** Called expression. */\n    expression: Expression,\n    /** Call type arguments. */\n    typeArguments: TypeNode[] | null,\n    /** Call arguments. */\n    args: Expression[],\n    /** Diagnostic range. */\n    range: Range,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // Desugaring like this can happen many times. Let's cache the intermediate allocation.\n    var call = this._reusableCallExpression;\n    if (call) {\n      call.expression = expression;\n      call.typeArguments = typeArguments;\n      call.args = args;\n      call.range = range;\n    } else {\n      this._reusableCallExpression = call = Node.createCallExpression(expression, typeArguments, args, range);\n    }\n    return this.compileCallExpression(call, contextualType, constraints);\n  }\n  private _reusableCallExpression: CallExpression | null = null;\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        uniqueMap<string,Type>(this.currentFlow.contextualTypeArguments), // don't update\n        expression\n      );\n    }\n    var callee = expression.expression;\n    var ctx = new BuiltinContext(\n      this,\n      prototype,\n      typeArguments,\n      expression.args,\n      callee.kind == NodeKind.PROPERTYACCESS\n        ? (<PropertyAccessExpression>callee).expression\n        : null,\n      contextualType,\n      expression,\n      false\n    );\n    // global builtins\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    // class builtins\n    var parent = prototype.parent;\n    if (parent.kind == ElementKind.CLASS) {\n      let classPrototype = (<Class>parent).prototype;\n      if (classPrototype == this.program.functionPrototype) {\n        let methodName = prototype.name;\n        if (function_builtins.has(methodName)) {\n          let fn = assert(function_builtins.get(methodName));\n          return fn(ctx);\n        }\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range, \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // handle call on `this` in constructors\n    let actualFunction = this.currentFlow.actualFunction;\n    if (actualFunction.is(CommonFlags.CONSTRUCTOR) && reportNode.isAccessOnThis) {\n      let parent = actualFunction.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitialization(<Class>parent, reportNode);\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE) && (!instance.is(CommonFlags.VIRTUAL) || reportNode.isAccessOnSuper)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i], Constraints.CONV_IMPLICIT);\n        }\n        // make the inlined call\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      let paramType = parameterTypes[i];\n      let paramExpr = this.compileExpression(argumentExpressions[i], paramType, Constraints.CONV_IMPLICIT);\n      operands[index] = paramExpr;\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands, reportNode, (constraints & Constraints.WILL_DROP) != 0);\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr, paramType.isManaged)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg, thisType.isManaged)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    var isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n    if (isConstructor) flow.set(FlowFlags.CTORPARAM_CONTEXT);\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), initType);\n      body.push(\n        this.makeLocalAssignment(argumentLocal, initExpr, initType, false)\n      );\n    }\n    flow.unset(FlowFlags.CTORPARAM_CONTEXT);\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // If a constructor, perform field init checks on its flow directly\n    if (isConstructor) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitializationInFlow(<Class>parent, flow);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    this.currentType = returnType;\n    return module.block(flow.inlineReturnLabel, body, returnType.toRef());\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): string {\n    var name = BuiltinNames.argumentsLength;\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(name, TypeRef.I32, true, module.i32(0));\n    }\n    return name;\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n    var stmts = new Array<ExpressionRef>();\n\n    // forward `this` if applicable\n    var module = this.module;\n    var thisType = originalSignature.thisType;\n    if (thisType) {\n      forwardedOperands[0] = module.local_get(0, thisType.toRef());\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      let paramType = originalParameterTypes[i];\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, paramType.toRef());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    if (original.is(CommonFlags.CONSTRUCTOR)) flow.set(FlowFlags.CTORPARAM_CONTEXT);\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var argumentsLength = this.ensureArgumentsLength();\n    var table = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(argumentsLength, TypeRef.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(argumentsLength, TypeRef.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = this.compileExpression(\n          initializer,\n          type,\n          Constraints.CONV_IMPLICIT\n        );\n        initExpr = module.local_set(operandIndex, initExpr, type.isManaged);\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      table = module.block(names[i + 1], [\n        table,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toRef());\n    }\n    assert(operandIndex == maxOperands);\n\n    stmts.push(\n      table\n    );\n    stmts.push(\n      // assume this will always succeed (can just use name as the reportNode)\n      this.makeCallDirect(original, forwardedOperands, original.declaration.name)\n    );\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.paramRefs,\n      stub.signature.resultRefs,\n      typesToRefs(stub.additionalLocals),\n      module.flatten(stmts, returnType.toRef())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.paramRefs,\n      stub.signature.resultRefs,\n      null,\n      module.unreachable()\n    );\n    this.virtualStubs.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    assert(instance.parent.kind == ElementKind.CLASS || instance.parent.kind == ElementKind.INTERFACE);\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var sizeTypeRef = usizeType.toRef();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          sizeTypeRef == TypeRef.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, sizeTypeRef),\n          sizeTypeRef == TypeRef.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        TypeRef.I32\n      )\n    );\n    var overloadInstances = this.resolver.resolveOverloads(instance);\n    if (overloadInstances) {\n      for (let i = 0, k = overloadInstances.length; i < k; ++i) {\n        let overloadInstance = overloadInstances[i];\n        if (!overloadInstance.is(CommonFlags.COMPILED)) continue; // errored\n        let overloadType = overloadInstance.type;\n        let originalType = instance.type;\n        if (!overloadType.isAssignableTo(originalType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n          );\n          continue;\n        }\n        // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n        let overloadSignature = overloadInstance.signature;\n        let overloadParameterTypes = overloadSignature.parameterTypes;\n        let overloadNumParameters = overloadParameterTypes.length;\n        let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n        paramExprs[0] = module.local_get(0, sizeTypeRef); // this\n        for (let n = 1; n <= numParameters; ++n) {\n          paramExprs[n] = module.local_get(n, parameterTypes[n - 1].toRef());\n        }\n        let needsVarargsStub = false;\n        for (let n = numParameters; n < overloadNumParameters; ++n) {\n          // TODO: inline constant initializers and skip varargs stub\n          paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n], overloadInstance.declaration);\n          needsVarargsStub = true;\n        }\n        let calledName = needsVarargsStub\n          ? this.ensureVarargsStub(overloadInstance).internalName\n          : overloadInstance.internalName;\n        let returnTypeRef = overloadSignature.returnType.toRef();\n        let stmts = new Array<ExpressionRef>();\n        if (needsVarargsStub) {\n          // Safe to prepend since paramExprs are local.get's\n          stmts.push(module.global_set(this.ensureArgumentsLength(), module.i32(numParameters)));\n        }\n        if (returnType == Type.void) {\n          stmts.push(\n            module.call(calledName, paramExprs, returnTypeRef)\n          );\n          stmts.push(\n            module.return()\n          );\n        } else {\n          stmts.push(\n            module.return(\n              module.call(calledName, paramExprs, returnTypeRef)\n            )\n          );\n        }\n        let classInstance = assert(overloadInstance.getClassOrInterface());\n        builder.addCase(classInstance.id, stmts);\n        // Also alias each extendee inheriting this exact overload\n        let extendees = classInstance.getAllExtendees(instance.declaration.name.text); // without get:/set:\n        for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n          let extendee = _values[a];\n          builder.addCase(extendee.id, stmts);\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, sizeTypeRef); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toRef());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toRef());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.paramRefs,\n      stub.signature.resultRefs,\n      [ TypeRef.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toRef())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  /** Marks managed call operands for the shadow stack. */\n  private operandsTostack(signature: Signature, operands: ExpressionRef[]): void {\n    if (!this.options.stackSize) return;\n    var module = this.module;\n    var operandIndex = 0;\n    var thisType = signature.thisType;\n    if (thisType) {\n      if (thisType.isManaged) {\n        let operand = operands[0];\n        let precomp = module.runExpression(operand, ExpressionRunnerFlags.Default);\n        if (!isConstZero(precomp)) { // otherwise unnecessary\n          operands[operandIndex] = module.tostack(operand);\n        }\n      }\n      ++operandIndex;\n    }\n    var parameterIndex = 0;\n    var parameterTypes = signature.parameterTypes;\n    assert(parameterTypes.length >= operands.length - operandIndex);\n    while (operandIndex < operands.length) {\n      let paramType = parameterTypes[parameterIndex];\n      if (paramType.isManaged) {\n        let operand = operands[operandIndex];\n        let precomp = module.runExpression(operand, ExpressionRunnerFlags.Default);\n        if (!isConstZero(precomp)) { // otherwise unnecessary\n          operands[operandIndex] = module.tostack(operand);\n        }\n      }\n      ++operandIndex;\n      ++parameterIndex;\n    }\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toRef()),\n                      global.type, parameterTypes[i], false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i], instance.declaration));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant && !instance.is(CommonFlags.MODULE_IMPORT)) {\n        let original = instance;\n        instance = this.ensureVarargsStub(instance);\n        if (!this.compileFunction(instance)) return module.unreachable();\n        instance.flow.flags = original.flow.flags;\n        let returnTypeRef = returnType.toRef();\n        // We know the last operand is optional and omitted, so inject setting\n        // ~argumentsLength into that operand, which is always safe.\n        let lastOperand = operands[maxOperands - 1];\n        assert(!(getSideEffects(lastOperand, module.ref) & SideEffects.WritesGlobal));\n        let lastOperandType = parameterTypes[maxArguments - 1];\n        operands[maxOperands - 1] = module.block(null, [\n          module.global_set(this.ensureArgumentsLength(), module.i32(numArguments)),\n          lastOperand\n        ], lastOperandType.toRef());\n        this.operandsTostack(instance.signature, operands);\n        let expr = module.call(instance.internalName, operands, returnTypeRef);\n        if (returnType != Type.void && immediatelyDropped) {\n          expr = module.drop(expr);\n          this.currentType = Type.void;\n        } else {\n          this.currentType = returnType;\n        }\n        return expr;\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isAccessOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    if (operands) this.operandsTostack(instance.signature, operands);\n    var expr = module.call(instance.internalName, operands, returnType.toRef());\n    this.currentType = returnType;\n    return expr;\n  }\n\n  /** Compiles an indirect call to a first-class function. */\n  compileCallIndirect(\n    signature: Signature,\n    functionArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, functionArg, reportNode, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to a first-class function. */\n  makeCallIndirect(\n    signature: Signature,\n    functionArg: ExpressionRef,\n    reportNode: Node,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i], reportNode));\n      }\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    var argumentsLength = this.ensureArgumentsLength();\n    var sizeTypeRef = this.options.sizeTypeRef;\n    if (getSideEffects(functionArg, module.ref) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(functionArg));\n      functionArg = module.block(null, [\n        module.local_set(temp.index, functionArg, true), // Function\n        module.global_set(argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, sizeTypeRef)\n      ], sizeTypeRef);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      functionArg = module.block(null, [\n        module.global_set(argumentsLength, module.i32(numArguments)),\n        functionArg\n      ], sizeTypeRef);\n    }\n    if (operands) this.operandsTostack(signature, operands);\n    var expr = module.call_indirect(\n      module.load(4, false, functionArg, TypeRef.I32), // ._index\n      operands,\n      signature.paramRefs,\n      signature.resultRefs\n    );\n    this.currentType = returnType;\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toRef());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      let classReference = targetType.getClassOrWrapper(this.program);\n      if (classReference) {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (indexedGet) {\n          let thisType = assert(indexedGet.signature.thisType);\n          let thisArg = this.compileExpression(targetExpression, thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!isUnchecked && this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n              expression.range\n            );\n          }\n          return this.compileCallDirect(indexedGet, [\n            expression.elementExpression\n          ], expression, thisArg, constraints);\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var isNamed = declaration.name.text.length > 0;\n    var isSemanticallyAnonymous = !isNamed || contextualType != Type.void;\n    var prototype = new FunctionPrototype(\n      isSemanticallyAnonymous\n        ? (isNamed ? declaration.name.text + \"|\" : \"anonymous|\") + (actualFunction.nextAnonymousId++).toString()\n        : declaration.name.text,\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = uniqueMap(flow.contextualTypeArguments);\n    var module = this.module;\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    var contextualSignature = contextualType.signatureReference;\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      instance.flow.outer = flow;\n      let worked = this.compileFunction(instance);\n      this.currentType = contextualSignature.type;\n      if (!worked) return module.unreachable();\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      instance.flow.outer = flow;\n      let worked = this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n      if (!worked) return module.unreachable();\n    }\n\n    var offset = this.ensureRuntimeFunction(instance); // reports\n    var expr = this.options.isWasm64\n      ? module.i64(i64_low(offset), i64_high(offset))\n      : module.i32(i64_low(offset));\n\n    // add a constant local referring to the function if applicable\n    if (!isSemanticallyAnonymous) {\n      let fname = instance.name;\n      let existingLocal = flow.getScopedLocal(fname);\n      if (existingLocal) {\n        if (!existingLocal.declaration.range.source.isNative) {\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existingLocal.declaration.name.range,\n            fname\n          );\n        } else { // scoped locals are shared temps that don't track declarations\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, fname\n          );\n        }\n      } else {\n        let ftype = instance.type;\n        let local = flow.addScopedLocal(instance.name, ftype);\n        flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        expr = module.local_tee(local.index, expr, ftype.isManaged);\n      }\n    }\n\n    return expr;\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.isReference) {\n          let classReference = contextualType.getClass();\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.getSignature();\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          return this.makeZero(contextualType, expression);\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        let thisType = actualFunction.signature.thisType;\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n          this.currentType = this.options.usizeType;\n          return module.unreachable();\n        }\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (flow.is(FlowFlags.CTORPARAM_CONTEXT)) {\n            this.error(\n              DiagnosticCode._this_cannot_be_referenced_in_constructor_arguments,\n              expression.range\n            );\n          }\n          if (!(constraints & Constraints.IS_THIS)) {\n            let parent = actualFunction.parent;\n            assert(parent.kind == ElementKind.CLASS);\n            this.checkFieldInitialization(<Class>parent, expression);\n          }\n        }\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n        flow.set(FlowFlags.ACCESSES_THIS);\n        this.currentType = thisType;\n        return module.local_get(thisLocal.index, thisType.toRef());\n      }\n      case NodeKind.SUPER: {\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (flow.is(FlowFlags.CTORPARAM_CONTEXT)) {\n            this.error(\n              DiagnosticCode._super_cannot_be_referenced_in_constructor_arguments,\n              expression.range\n            );\n          } else if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.getClass());\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toRef());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toRef());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (this.pendingElements.has(local)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            local.internalName\n          );\n          this.currentType = localType;\n          return module.unreachable();\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.isNullableReference && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toRef());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toRef());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, TypeRef.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          uniqueMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.isExternalReference) {\n          this.currentType = Type.funcref;\n          return module.ref_func(functionInstance.internalName, TypeRef.Funcref); // TODO\n        }\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    this.error(\n      DiagnosticCode.Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      uniqueMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <value> - must be exact\n    if (expectedType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <value> instanceof <nonValue> - always false\n    if (actualType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var sizeTypeRef = actualType.toRef();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.isNullableReference && !expectedType.isNullableReference) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          sizeTypeRef == TypeRef.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType, expression.expression)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              sizeTypeRef == TypeRef.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr, actualType.isManaged),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, sizeTypeRef),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              sizeTypeRef == TypeRef.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr, actualType.isManaged),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, sizeTypeRef),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var sizeTypeRef = actualType.toRef();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.getClass();\n    if (classReference) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.isNullableReference) {\n          return module.binary(\n            sizeTypeRef == TypeRef.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType, expression.expression)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], TypeRef.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.TEMPLATE: {\n        assert(!implicitlyNegate);\n        return this.compileTemplateLiteral(<TemplateLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  private compileTemplateLiteral(\n    expression: TemplateLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var tag = expression.tag;\n    var parts = expression.parts;\n    var numParts = parts.length;\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    assert(numExpressions == numParts - 1);\n\n    var module = this.module;\n    var stringInstance = this.program.stringInstance;\n    var stringType = stringInstance.type;\n\n    if (tag === null) {\n      // Shortcut if just a (multi-line) string\n      if (numParts == 1) {\n        return this.ensureStaticString(parts[0]);\n      }\n\n      // Shortcut for `${expr}`, `<prefix>${expr}`, `${expr}<suffix>`\n      if (numParts == 2) {\n        let expression = expressions[0];\n        let lhsLen = parts[0].length;\n        let rhsLen = parts[1].length;\n        // Shortcut for `${expr}`  ->   expr.toString()\n        if (!lhsLen && !rhsLen) {\n          return this.makeToString(\n            this.compileExpression(expression, stringType),\n            this.currentType, expression\n          );\n        }\n        // Shortcuts for\n        // `<prefix>${expr}`  ->  \"<prefix>\" + expr.toString()\n        // `${expr}<suffix>`  ->  expr.toString() + \"<suffix>\"\n        let hasPrefix = lhsLen != 0;\n        // @ts-ignore: cast\n        if (hasPrefix ^ (rhsLen != 0)) {\n          let lhs: ExpressionRef;\n          let rhs: ExpressionRef;\n          let expr = this.makeToString(\n            this.compileExpression(expression, stringType),\n            this.currentType, expression\n          );\n          if (hasPrefix) {\n            lhs = this.ensureStaticString(parts[0]);\n            rhs = expr;\n          } else {\n            // suffix\n            lhs = expr;\n            rhs = this.ensureStaticString(parts[1]);\n          }\n          let concatMethod = assert(stringInstance.getMethod(\"concat\"));\n          return this.makeCallDirect(concatMethod, [ lhs, rhs ], expression);\n        }\n      }\n\n      // Shortcut for `${exprA}${exprB}`  ->  exprA.toString() + exprB.toString()\n      if (numParts == 3 && !parts[0].length && !parts[1].length && !parts[2].length) {\n        let exprA = expressions[0];\n        let exprB = expressions[1];\n\n        let lhs = this.makeToString(\n          this.compileExpression(exprA, stringType),\n          this.currentType, exprA\n        );\n        let rhs = this.makeToString(\n          this.compileExpression(exprB, stringType),\n          this.currentType, exprB\n        );\n        let concatMethod = assert(stringInstance.getMethod(\"concat\"));\n        return this.makeCallDirect(concatMethod, [ lhs, rhs ], expression);\n      }\n\n      // Compile to a `StaticArray<string>#join(\"\") in the general case\n      let length = numParts + numExpressions;\n      let values = new Array<usize>(length);\n      values[0] = this.ensureStaticString(parts[0]);\n      for (let i = 1; i < numParts; ++i) {\n        values[2 * i - 1] = module.usize(0);\n        values[2 * i] = this.ensureStaticString(parts[i]);\n      }\n      let arrayInstance = assert(this.resolver.resolveClass(this.program.staticArrayPrototype, [ stringType ]));\n      let segment = this.addStaticBuffer(stringType, values, arrayInstance.id);\n      let offset = i64_add(segment.offset, i64_new(this.program.totalOverhead));\n      let joinInstance = assert(arrayInstance.getMethod(\"join\"));\n      let indexedSetInstance = assert(arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true));\n      let stmts = new Array<ExpressionRef>(2 * numExpressions + 1);\n      // Use one local per toString'ed subexpression, since otherwise recursion on the same\n      // static array would overwrite already prepared parts. Avoids a temporary array.\n      let temps = new Array<Local>(numExpressions);\n      let flow = this.currentFlow;\n      for (let i = 0; i < numExpressions; ++i) {\n        let expression = expressions[i];\n        let temp = flow.getTempLocal(stringType);\n        temps[i] = temp;\n        stmts[i] = module.local_set(temp.index,\n          this.makeToString(\n            this.compileExpression(expression, stringType),\n            this.currentType, expression\n          ),\n          true\n        );\n      }\n      // Populate the static array with the toString'ed subexpressions and call .join(\"\")\n      for (let i = 0; i < numExpressions; ++i) {\n        stmts[numExpressions + i] = this.makeCallDirect(indexedSetInstance, [\n          module.usize(offset),\n          module.i32(2 * i + 1),\n          module.local_get(temps[i].index, stringType.toRef())\n        ], expression);\n        flow.freeTempLocal(temps[i]);\n      }\n      stmts[2 * numExpressions] = this.makeCallDirect(joinInstance, [\n        module.usize(offset),\n        this.ensureStaticString(\"\")\n      ], expression);\n      return module.flatten(stmts, stringType.toRef());\n    }\n\n    // Try to find out whether the template function takes a full-blown TemplateStringsArray or if\n    // it is sufficient to compile to a normal array. While technically incorrect, this allows us\n    // to avoid generating unnecessary static data that is not explicitly signaled to be used.\n    var tsaArrayInstance = this.program.templateStringsArrayInstance;\n    var arrayInstance = tsaArrayInstance;\n    var target = this.resolver.lookupExpression(tag, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n    if (target) {\n      switch (target.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instance = this.resolver.resolveFunction(\n            <FunctionPrototype>target,\n            null,\n            uniqueMap<string,Type>(),\n            ReportMode.SWALLOW\n          );\n          if (!instance) break;\n          target = instance;\n          // fall-through\n        }\n        case ElementKind.FUNCTION: {\n          let instance = <Function>target;\n          let parameterTypes = instance.signature.parameterTypes;\n          if (parameterTypes.length) {\n            let first = parameterTypes[0].getClass();\n            if (first !== null && !first.extends(tsaArrayInstance.prototype)) {\n              arrayInstance = assert(this.resolver.resolveClass(this.program.arrayPrototype, [ stringType ]));\n            }\n          }\n          break;\n        }\n      }\n    }\n\n    // Compile to a call to the tag function\n    var rawParts = expression.rawParts;\n    assert(rawParts.length == numParts);\n    var partExprs = new Array<ExpressionRef>(numParts);\n    for (let i = 0; i < numParts; ++i) {\n      partExprs[i] = this.ensureStaticString(parts[i]);\n    }\n    var arraySegment: MemorySegment;\n    if (arrayInstance == tsaArrayInstance) {\n      var rawExprs = new Array<ExpressionRef>(numParts);\n      for (let i = 0; i < numParts; ++i) {\n        rawExprs[i] = this.ensureStaticString(rawParts[i]);\n      }\n      arraySegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, partExprs),\n        arrayInstance\n      );\n      var rawHeaderSegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, rawExprs)\n      );\n      arrayInstance.writeField(\"raw\",\n        i64_add(rawHeaderSegment.offset, i64_new(this.program.totalOverhead)),\n        arraySegment.buffer\n      );\n    } else {\n      arraySegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, partExprs),\n        arrayInstance\n      );\n    }\n\n    // Desugar to compileCallExpression\n    var args = expressions.slice();\n    args.unshift(\n      Node.createCompiledExpression(\n        module.usize(i64_add(arraySegment.offset, i64_new(this.program.totalOverhead))),\n        arrayInstance.type,\n        this.program.nativeRange\n      )\n    );\n    // TODO: Requires ReadonlyArray to be safe\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      expression.range, \"Tagged template literals\"\n    );\n    return this.compileCallExpressionLike(tag, null, args, expression.range, stringType);\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    let contextualClass = contextualType.getClass();\n    if (contextualClass !== null && contextualClass.extends(program.staticArrayPrototype)) {\n      return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(<Expression>elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let totalOverhead = program.totalOverhead;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(totalOverhead));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(totalOverhead));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        return this.makeNewArray(arrayInstance, length, bufferAddress, expression);\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var indexedSet = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!indexedSet) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var arrayTypeRef = arrayType.toRef();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeNewArray(arrayInstance, length, i64_new(0), expression),\n        arrayType.isManaged\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, arrayTypeRef),\n          arrayTypeRef,\n          (<Field>dataStartMember).memoryOffset\n        ),\n        true // ArrayBuffer\n      )\n    );\n    for (let i = 0; i < length; ++i) {\n      // this[i] = value\n      stmts.push(\n        module.call(indexedSet.internalName, [\n          module.local_get(tempThis.index, arrayTypeRef),\n          module.i32(i),\n          values[i]\n        ], TypeRef.None)\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, arrayTypeRef)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    if (length) this.compileFunction(indexedSet);\n    this.currentType = arrayType;\n    return module.flatten(stmts, arrayTypeRef);\n  }\n\n  /** Makes a new array instance from a static buffer segment. */\n  private makeNewArray(\n    /** Concrete array class. */\n    arrayInstance: Class,\n    /** Length of the array. */\n    length: i32,\n    /** Source address to copy from. Array is zeroed if `0`. */\n    source: i64,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    assert(!arrayInstance.extends(program.staticArrayPrototype));\n    var elementType = arrayInstance.getArrayValueType(); // asserts\n\n    // __newArray(length, alignLog2, classId, staticBuffer)\n    var expr = this.makeCallDirect(program.newArrayInstance, [\n      module.i32(length),\n      program.options.isWasm64\n        ? module.i64(elementType.alignLog2)\n        : module.i32(elementType.alignLog2),\n      module.i32(arrayInstance.id),\n      program.options.isWasm64\n        ? module.i64(i64_low(source), i64_high(source))\n        : module.i32(i64_low(source))\n    ], reportNode);\n    this.currentType = arrayInstance.type;\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    var arrayInstance = assert(contextualType.getClass());\n    var arrayType = arrayInstance.type;\n    var typeArguments = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype));\n    var elementType = typeArguments[0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __newBuffer(bufferSize, id, buffer)\n        let expr = this.makeCallDirect(program.newBufferInstance, [\n          isWasm64\n            ? module.i64(bufferSize)\n            : module.i32(bufferSize),\n          module.i32(arrayInstance.id),\n          isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var indexedSet = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!indexedSet) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var arrayTypeRef = arrayType.toRef();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.newBufferInstance, [\n          isWasm64\n            ? module.i64(bufferSize)\n            : module.i32(bufferSize),\n          module.i32(arrayInstance.id)\n        ], expression),\n        arrayType.isManaged\n      )\n    );\n    for (let i = 0; i < length; ++i) {\n      // array[i] = value\n      stmts.push(\n        module.call(indexedSet.internalName, [\n          module.local_get(tempThis.index, arrayTypeRef),\n          module.i32(i),\n          values[i]\n        ], TypeRef.None)\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, arrayTypeRef)\n    );\n    flow.freeTempLocal(tempThis);\n    if (length) this.compileFunction(indexedSet);\n    this.currentType = arrayType;\n    return module.flatten(stmts, arrayTypeRef);\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.getClass();\n    if (!classReference) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(classType);\n    var classTypeRef = classType.toRef();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT);\n      exprs.push(\n        module.call(fieldInstance.internalSetterName, [\n          module.local_get(tempLocal.index, classTypeRef),\n          expr\n        ], TypeRef.None)\n      );\n      this.compileFieldSetter(fieldInstance);\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by generated ctor\n      }\n\n      if (fieldType.isReference) {\n        if (!fieldType.isNullableReference) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.call(fieldInstance.internalSetterName, [\n              module.local_get(tempLocal.index, classTypeRef),\n              this.makeZero(fieldType, expression)\n            ], TypeRef.None)\n          );\n          this.compileFieldSetter(fieldInstance);\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // generate the default constructor\n    var ctor = this.ensureConstructor(classReference, expression);\n    // note that this is not checking field initialization within the ctor, but\n    // instead checks conditions above with provided fields taken into account.\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(ctor, [], Constraints.NONE, expression),\n        classType.isManaged\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, classTypeRef)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, classTypeRef);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.prototype == classPrototype &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      // e.g. `arr: Array<T> = new Array()`\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        uniqueMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        uniqueMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var ctor = this.ensureConstructor(classInstance, expression);\n    if (!ctor.hasDecorator(DecoratorFlags.INLINE)) {\n      // Inlined ctors haven't been compiled yet and are checked upon inline\n      // compilation of their body instead.\n      this.checkFieldInitialization(classInstance, expression);\n    }\n    return this.compileInstantiate(ctor, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(\n    /** Class wanting a constructor. */\n    classInstance: Class,\n    /** Report node. */\n    reportNode: Node\n  ): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // shortcut if already compiled\n      if (instance.is(CommonFlags.COMPILED)) return instance;\n      // do not attempt to compile if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n    } else {\n      // clone base constructor if a derived class. note that we cannot just\n      // call the base ctor since the derived class may have additional fields.\n      let baseClass = classInstance.base;\n      let contextualTypeArguments = uniqueMap(classInstance.contextualTypeArguments);\n      if (baseClass) {\n        let baseCtor = this.ensureConstructor(baseClass, reportNode);\n        this.checkFieldInitialization(baseClass, reportNode);\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance,\n            // declaration is important, i.e. to access optional parameter initializers\n            (<FunctionDeclaration>baseCtor.declaration).clone()\n          ),\n          null,\n          baseCtor.signature,\n          contextualTypeArguments\n        );\n\n      // otherwise make a default constructor\n      } else {\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance, // bound\n            this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n              CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n            )\n          ),\n          null,\n          new Signature(this.program, null, classInstance.type, classInstance.type),\n          contextualTypeArguments\n        );\n      }\n\n      instance.set(CommonFlags.COMPILED);\n      instance.prototype.setResolvedInstance(\"\", instance);\n      if (classInstance.is(CommonFlags.MODULE_EXPORT)) {\n        instance.set(CommonFlags.MODULE_EXPORT);\n      }\n      classInstance.constructorInstance = instance;\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n\n      // generate body\n      let signature = instance.signature;\n      let module = this.module;\n      let sizeTypeRef = this.options.sizeTypeRef;\n      let stmts = new Array<ExpressionRef>();\n\n      // {\n      //   this = <COND_ALLOC>\n      //   IF_DERIVED: this = super(this, ...args)\n      //   this.a = X\n      //   this.b = Y\n      //   return this\n      // }\n      stmts.push(\n        this.makeConditionalAllocation(classInstance, 0)\n      );\n      if (baseClass) {\n        let parameterTypes = signature.parameterTypes;\n        let numParameters = parameterTypes.length;\n        let operands = new Array<ExpressionRef>(1 + numParameters);\n        operands[0] = module.local_get(0, sizeTypeRef);\n        for (let i = 1; i <= numParameters; ++i) {\n          operands[i] = module.local_get(i, parameterTypes[i - 1].toRef());\n        }\n        stmts.push(\n          module.local_set(0,\n            this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false),\n            baseClass.type.isManaged\n          )\n        );\n      }\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n      stmts.push(\n        module.local_get(0, sizeTypeRef)\n      );\n      flow.freeScopedLocals();\n      this.currentFlow = previousFlow;\n\n      // make the function\n      let locals = instance.localsByIndex;\n      let varTypes = new Array<TypeRef>(); // of temp. vars added while compiling initializers\n      let numOperands = 1 + signature.parameterTypes.length;\n      let numLocals = locals.length;\n      if (numLocals > numOperands) {\n        for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toRef());\n      }\n      let funcRef = module.addFunction(\n        instance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        varTypes,\n        module.flatten(stmts, sizeTypeRef)\n      );\n      instance.finalize(module, funcRef);\n    }\n\n    return instance;\n  }\n\n  /** Checks that all class fields have been initialized. */\n  checkFieldInitialization(classInstance: Class, relatedNode: Node | null = null): void {\n    if (classInstance.didCheckFieldInitialization) return;\n    classInstance.didCheckFieldInitialization = true;\n    var ctor = assert(classInstance.constructorInstance);\n    this.checkFieldInitializationInFlow(classInstance, ctor.flow, relatedNode);\n  }\n\n  /** Checks that all class fields have been initialized in the specified flow. */\n  checkFieldInitializationInFlow(classInstance: Class, flow: Flow, relatedNode: Node | null = null): void {\n    var members = classInstance.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let element = _values[i];\n        if (element.kind == ElementKind.FIELD && element.parent == classInstance) {\n          let field = <Field>element;\n          if (!field.initializerNode && !flow.isThisFieldFlag(field, FieldFlags.INITIALIZED)) {\n            if (!field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n              if (relatedNode) {\n                this.errorRelated(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  relatedNode.range,\n                  field.internalName\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  field.internalName\n                );\n              }\n            }\n          } else if (field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n            if (field.type.isReference) {\n              this.warning( // involves a runtime check\n                DiagnosticCode.Property_0_is_always_assigned_before_being_used,\n                field.identifierNode.range,\n                field.internalName\n              );\n            } else {\n              this.pedantic( // is a nop anyway\n                DiagnosticCode.Unnecessary_definite_assignment,\n                field.identifierNode.range\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  compileInstantiate(\n    /** Constructor to call. */\n    ctorInstance: Function,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(ctorInstance.is(CommonFlags.CONSTRUCTOR));\n    var parent = ctorInstance.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    var classInstance = <Class>parent;\n    if (classInstance.type.isUnmanaged || ctorInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect(\n      ctorInstance,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType, reportNode),\n      constraints\n    );\n    if (getExpressionType(expr) != TypeRef.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toRef());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, TypeRef.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let thisType = this.currentType;\n        if (\n          flow.actualFunction.is(CommonFlags.CONSTRUCTOR) &&\n          thisExpression.kind == NodeKind.THIS &&\n          !flow.isThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED) &&\n          !fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED)\n        ) {\n          this.errorRelated(\n            DiagnosticCode.Property_0_is_used_before_being_assigned,\n            expression.range,\n            fieldInstance.identifierNode.range,\n            fieldInstance.internalName\n          );\n        }\n        if (thisType.isNullableReference) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        let ret = module.load(\n          fieldType.byteSize,\n          fieldType.isSignedIntegerValue,\n          thisExpr,\n          fieldType.toRef(),\n          fieldInstance.memoryOffset\n        );\n        if (fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED) && fieldType.isReference && !fieldType.isNullableReference) {\n          ret = this.makeRuntimeNonNullCheck(ret, fieldType, expression);\n        }\n        return ret;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = propertyInstance.getterInstance;\n        if (!getterInstance) return module.unreachable(); // failed earlier\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n        if (!functionInstance) return module.unreachable();\n        if (!this.compileFunction(functionInstance)) return module.unreachable();\n        this.currentType = functionInstance.type;\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    this.error(\n      DiagnosticCode.Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType,\n      expression.condition\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType);\n    var ifThenType = this.currentType;\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType);\n    var ifElseType = this.currentType;\n\n    if (ctxType == Type.void) { // values, including type mismatch, are irrelevant\n      if (ifThenType != Type.void) {\n        ifThenExpr = module.drop(ifThenExpr);\n        ifThenType = Type.void;\n      }\n      if (ifElseType != Type.void) {\n        ifElseExpr = module.drop(ifElseExpr);\n        ifElseType = Type.void;\n      }\n      this.currentType = Type.void;\n    } else {\n      let commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n      if (!commonType) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          ifElse.range, ifElseType.toString(), ifThenType.toString()\n        );\n        this.currentType = ctxType;\n        return module.unreachable();\n      }\n      ifThenExpr = this.convertExpression(ifThenExpr, ifThenType, commonType, false, ifThen);\n      ifThenType = commonType;\n      ifElseExpr = this.convertExpression(ifElseExpr, ifElseType, commonType, false, ifElse);\n      ifElseType = commonType;\n      this.currentType = commonType;\n    }\n\n    ifThenFlow.freeScopedLocals();\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    return module.if(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue,\n        this.currentType.isManaged\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (isInstance) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var typeRef = tempLocal.type.toRef();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, typeRef)\n    ], typeRef); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PLUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MINUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType, expression.operand),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          // fall back to compare by value\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType, expression.operand));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.isFloatValue\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        expr = this.convertExpression(expr, this.currentType, this.currentType.intType, false, expression.operand);\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      case Token.DOT_DOT_DOT: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range, \"Spread operator\"\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, operand);\n            if (type.isReference) {\n              let signatureReference = type.getSignature();\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.getClass();\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"externref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isNumericValue) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.sizeTypeRef)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.Extend8I32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.Extend16I32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.GC, reportNode);\n      }\n    }\n    let classReference = type.getClass();\n    if (classReference) {\n      do {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    } else {\n      let signatureReference = type.getSignature();\n      if (signatureReference) {\n        let thisType = signatureReference.thisType;\n        if (thisType) {\n          if (!this.checkTypeSupported(thisType, reportNode)) {\n            return false;\n          }\n        }\n        let parameterTypes = signatureReference.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n          if (!this.checkTypeSupported(parameterTypes[i], reportNode)) {\n            return false;\n          }\n        }\n        let returnType = signatureReference.returnType;\n        if (!this.checkTypeSupported(returnType, reportNode)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    var parameterNodes = reportNode.parameters;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      let parameterReportNode: Node;\n      if (parameterNodes.length > i) parameterReportNode = parameterNodes[i];\n      else parameterReportNode = reportNode;\n      if (!this.checkTypeSupported(parameterTypes[i], parameterReportNode)) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    let type = getExpressionType(expr);\n    if (type == TypeRef.Unreachable)\n      return ConditionKind.UNKNOWN;\n\n    assert(type == TypeRef.I32);\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF: return module.ref_null(type.toRef());\n      case TypeKind.I31REF: return module.i31_new(module.i32(0));\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n      case TypeKind.I31REF: return module.i31_new(module.i32(1));\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u32>(x) & 0x7FFFFFFF) - 1 <= 0x7F800000 - 1\n        //\n        // and finally:\n        // (reinterpret<u32>(x) << 1) - (1 << 1) <= ((0x7F800000 - 1) << 1)\n        return module.binary(BinaryOp.LeU32,\n          module.binary(BinaryOp.SubI32,\n            module.binary(BinaryOp.ShlI32,\n              module.unary(UnaryOp.ReinterpretF32ToI32, expr),\n              module.i32(1)\n            ),\n            module.i32(2) // 1 << 1\n          ),\n          module.i32(0xFEFFFFFE) // (0x7F800000 - 1) << 1\n        );\n      }\n      case TypeKind.F64: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF) - 1 <= 0x7FF0000000000000 - 1\n        //\n        // and finally:\n        // (reinterpret<u64>(x) << 1) - (1 << 1) <= ((0x7FF0000000000000 - 1) << 1)\n        return module.binary(BinaryOp.LeU64,\n          module.binary(BinaryOp.SubI64,\n            module.binary(BinaryOp.ShlI64,\n              module.unary(UnaryOp.ReinterpretF64ToI64, expr),\n              module.i64(1)\n            ),\n            module.i64(2) // 1 << 1\n          ),\n          module.i64(0xFFFFFFFE, 0xFFDFFFFF) // (0x7FF0000000000000 - 1) << 1\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: {\n        // Needs to be true (i.e. not zero) when the ref is _not_ null,\n        // which means `ref.is_null` returns false (i.e. zero).\n        return module.unary(UnaryOp.EqzI32, module.ref_is(RefIsOp.RefIsNull, expr));\n\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes a string conversion of the given expression. */\n  makeToString(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var stringType = this.program.stringInstance.type;\n    if (type == stringType) {\n      return expr;\n    }\n    var classType = type.getClassOrWrapper(this.program);\n    if (classType) {\n      let toStringInstance = classType.getMethod(\"toString\");\n      if (toStringInstance) {\n        let toStringSignature = toStringInstance.signature;\n        if (!this.checkCallSignature( // reports\n          toStringSignature,\n          0,\n          true,\n          reportNode\n        )) {\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        if (!type.isStrictlyAssignableTo(assert(toStringSignature.thisType))) {\n          this.errorRelated(\n            DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n            reportNode.range, toStringInstance.identifierAndSignatureRange\n          );\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        let toStringReturnType = toStringSignature.returnType;\n        if (!toStringReturnType.isStrictlyAssignableTo(stringType)) {\n          this.errorRelated(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            reportNode.range, toStringInstance.identifierAndSignatureRange, toStringReturnType.toString(), stringType.toString()\n          );\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        return this.makeCallDirect(toStringInstance, [ expr ], reportNode);\n      }\n    }\n    this.error(\n      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n      reportNode.range, type.toString(), stringType.toString()\n    );\n    this.currentType = stringType;\n    return this.module.unreachable();\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    if (classInstance.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let allocInstance = program.allocInstance;\n      this.compileFunction(allocInstance);\n      return module.call(allocInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset)\n      ], options.sizeTypeRef);\n    } else {\n      let newInstance = program.newInstance;\n      this.compileFunction(newInstance);\n      return module.call(newInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset),\n        module.i32(classInstance.id)\n      ], options.sizeTypeRef);\n    }\n  }\n\n  /** Makes a conditional allocation where `this` might not have been initialized yet. */\n  makeConditionalAllocation(\n    classInstance: Class,\n    thisIndex: i32\n  ): ExpressionRef {\n    var module = this.module;\n    var classType = classInstance.type;\n    var classTypeRef = classType.toRef();\n    assert(classTypeRef == this.options.sizeTypeRef);\n    return module.if(\n      module.unary(classTypeRef == TypeRef.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n        module.local_get(thisIndex, classTypeRef)\n      ),\n      module.local_set(thisIndex,\n        this.makeAllocation(classInstance),\n        classInstance.type.isManaged\n      )\n    );\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline ? flow.lookupLocal(CommonNames.this_)!.index : 0;\n    var sizeTypeRef = this.options.sizeTypeRef;\n    var nonParameterFields: Field[] | null = null;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldPrototype = field.prototype;\n      let parameterIndex = fieldPrototype.parameterIndex;\n\n      // Defer non-parameter fields until parameter fields are initialized\n      if (parameterIndex < 0) {\n        if (!nonParameterFields) nonParameterFields = new Array();\n        nonParameterFields.push(field);\n        continue;\n      }\n\n      // Initialize constructor parameter field\n      let fieldType = field.type;\n      let fieldTypeRef = fieldType.toRef();\n      assert(!fieldPrototype.initializerNode);\n      this.compileFieldSetter(field);\n      stmts.push(\n        module.call(field.internalSetterName, [\n          module.local_get(thisLocalIndex, sizeTypeRef),\n          module.local_get(\n            isInline\n              ? flow.lookupLocal(field.name)!.index\n              : 1 + parameterIndex, // `this` is local 0\n            fieldTypeRef\n          )\n        ], TypeRef.None)\n      );\n    }\n\n    // Initialize deferred non-parameter fields\n    if (nonParameterFields) {\n      for (let i = 0, k = nonParameterFields.length; i < k; ++i) {\n        let field = unchecked(nonParameterFields[i]);\n        let fieldType = field.type;\n        let fieldPrototype = field.prototype;\n        let initializerNode = fieldPrototype.initializerNode;\n        assert(fieldPrototype.parameterIndex < 0);\n        this.compileFieldSetter(field);\n        stmts.push(\n          module.call(field.internalSetterName, [\n            module.local_get(thisLocalIndex, sizeTypeRef),\n            initializerNode // use initializer if present, otherwise initialize with zero\n              ? this.compileExpression(initializerNode, fieldType, Constraints.CONV_IMPLICIT)\n              : this.makeZero(fieldType, fieldPrototype.declaration)\n          ], TypeRef.None)\n        );\n      }\n    }\n\n    this.currentType = Type.void;\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return this.module.unreachable();\n\n    var stringInstance = program.stringInstance;\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT);\n    } else {\n      messageArg = this.makeZero(stringInstance.type, codeLocation);\n    }\n\n    return this.makeStaticAbort(messageArg, codeLocation);\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeStaticAbort(\n    /** Message argument of type string. May be zero. */\n    messageExpr: ExpressionRef,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var filenameExpr = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageExpr,\n          filenameExpr,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        TypeRef.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr, type.isManaged),\n      module.local_get(temp.index, type.toRef()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected null\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = type.nonNullableType;\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.isReference && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    if (!toType.isNullableReference || flow.isNonnull(expr, type)) {\n      // Simplify if the value cannot be `null`. If toType is non-nullable, a\n      // null-check would have been emitted separately so is not necessary here.\n      expr = module.if(\n        module.call(instanceofInstance.internalName, [\n          module.local_tee(temp.index, expr, type.isManaged),\n          module.i32(toType.classReference!.id)\n        ], TypeRef.I32),\n        module.local_get(temp.index, type.toRef()),\n        this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n      );\n    } else {\n      expr = module.if(\n        module.local_tee(temp.index, expr, type.isManaged),\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(temp.index, type.toRef()),\n            module.i32(toType.classReference!.id)\n          ], TypeRef.I32),\n          module.local_get(temp.index, type.toRef()),\n          this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n        ),\n        module.usize(0)\n      );\n    }\n    flow.freeTempLocal(temp);\n    this.currentType = toType;\n    return expr;\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n} from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(element.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) {\n      sb.push(\"export function \");\n    } else {\n      if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n      if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n      if (element.is(CommonFlags.GET)) sb.push(\"get \");\n      else if (element.is(CommonFlags.SET)) sb.push(\"set \");\n    }\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      sb.push(element.getParameterName(i));\n      if (i >= requiredParameters) sb.push(\"?\");\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    if (!isInterface) {\n      indent(sb, this.indentLevel);\n      sb.push(\"static wrap(ptr: usize): \");\n      sb.push(name);\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"valueOf(): usize;\\n\");\n    }\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      case TypeKind.EQREF: return \"eqref\";\n      case TypeKind.I31REF: return \"i31ref\";\n      case TypeKind.DATAREF: return \"dataref\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var options = this.program.options;\n    sb.push(\"type i8 = number;\\n\");\n    sb.push(\"type i16 = number;\\n\");\n    sb.push(\"type i32 = number;\\n\");\n    sb.push(\"type i64 = bigint;\\n\");\n    if (options.isWasm64) {\n      sb.push(\"type isize = bigint;\\n\");\n    } else {\n      sb.push(\"type isize = number;\\n\");\n    }\n    sb.push(\"type u8 = number;\\n\");\n    sb.push(\"type u16 = number;\\n\");\n    sb.push(\"type u32 = number;\\n\");\n    sb.push(\"type u64 = bigint;\\n\");\n    if (options.isWasm64) {\n      sb.push(\"type usize = bigint;\\n\");\n    } else {\n      sb.push(\"type usize = number;\\n\");\n    }\n    sb.push(\"type f32 = number;\\n\");\n    sb.push(\"type f64 = number;\\n\");\n    sb.push(\"type bool = boolean | number;\\n\");\n    this.walk();\n    if (options.exportMemory) {\n      sb.push(\"export const memory: WebAssembly.Memory;\\n\");\n    }\n    if (options.exportTable) {\n      sb.push(\"export const table: WebAssembly.Table;\\n\");\n    }\n    if (options.explicitStart) {\n      sb.push(\"export function _start(): void;\\n\");\n    }\n    if (options.exportRuntime) {\n      sb.push(\"export function __new(size: usize, id: u32): usize;\\n\");\n      sb.push(\"export function __pin(ptr: usize): usize;\\n\");\n      sb.push(\"export function __unpin(ptr: usize): void;\\n\");\n      sb.push(\"export function __collect(): void;\\n\");\n      sb.push(\"export const __rtti_base: usize;\\n\");\n    }\n    sb.push(\"export const __setArgumentsLength: ((n: i32) => void) | undefined;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Property_0_is_always_assigned_before_being_used = 233,\n  Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime = 234,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unnecessary_definite_assignment = 906,\n  Exported_generic_function_or_class_has_no_concrete_instances = 907,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal = 1351,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _this_cannot_be_referenced_in_constructor_arguments = 2333,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  _super_cannot_be_referenced_in_constructor_arguments = 2336,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  Variable_0_used_before_its_declaration = 2448,\n  Cannot_redeclare_block_scoped_variable_0 = 2451,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned = 2564,\n  Property_0_is_used_before_being_assigned = 2565,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 233: return \"Property '{0}' is always assigned before being used.\";\n    case 234: return \"Expression refers to a static element that does not compile to a value at runtime.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 906: return \"Unnecessary definite assignment.\";\n    case 907: return \"Exported generic function or class has no concrete instances.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 1351: return \"An identifier or keyword cannot immediately follow a numeric literal.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2333: return \"'this' cannot be referenced in constructor arguments.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2336: return \"'super' cannot be referenced in constructor arguments.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2448: return \"Variable '{0}' used before its declaration.\";\n    case 2451: return \"Cannot redeclare block-scoped variable '{0}'\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2564: return \"Property '{0}' has no initializer and is not assigned in the constructor before 'this' is used or returned.\";\n    case 2565: return \"Property '{0}' is used before being assigned.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak,\n  COLOR_CYAN,\n  COLOR_YELLOW,\n  COLOR_RED,\n  COLOR_MAGENTA,\n  COLOR_RESET,\n  isColorsEnabled,\n  setColorsEnabled\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_CYAN;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n  var wasColorsEnabled = setColorsEnabled(useColors);\n\n  // general information\n  var sb: string[] = [];\n  if (isColorsEnabled()) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (isColorsEnabled()) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  setColorsEnabled(wasColorsEnabled);\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nfunction formatDiagnosticContext(range: Range): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (isColorsEnabled()) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (isColorsEnabled()) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  TemplateLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.TEMPLATE: {\n        this.visitTemplateLiteralExpression(<TemplateLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string): void {\n    var sb = this.sb;\n    sb.push(\"\\\"\");\n    this.visitRawString(str, CharCode.DOUBLEQUOTE);\n    sb.push(\"\\\"\");\n  }\n\n  private visitRawString(str: string, quote: CharCode): void {\n    var sb = this.sb;\n    var off = 0;\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (quote == CharCode.DOUBLEQUOTE) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (quote == CharCode.SINGLEQUOTE) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKTICK: {\n          if (quote == CharCode.BACKTICK) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\`\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitTemplateLiteralExpression(node: TemplateLiteralExpression): void {\n    var sb = this.sb;\n    var tag = node.tag;\n    var parts = node.parts;\n    var expressions = node.expressions;\n    if (tag) this.visitNode(tag);\n    sb.push(\"`\");\n    this.visitRawString(parts[0], CharCode.BACKTICK);\n    assert(parts.length == expressions.length + 1);\n    for (let i = 0, k = expressions.length; i < k; ++i) {\n      sb.push(\"${\");\n      this.visitNode(expressions[i]);\n      sb.push(\"}\");\n      this.visitRawString(parts[i + 1], CharCode.BACKTICK);\n    }\n    sb.push(\"`\");\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature !== null || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members == null) {\n      sb.push(\"export *\");\n    } else if (members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL && !initializer) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Field,\n  Class,\n  TypedElement\n} from \"./program\";\n\nimport {\n  TypeRef,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChildAt,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  uniqueMap\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n  /** This is a flow compiling a constructor parameter. */\n  CTORPARAM_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  NONE = 0,\n  INITIALIZED = 1 << 0\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    if (parentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    if (inlineFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Outer flow. Only relevant for first-class functions. */\n  outer: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Field flags on `this`. Constructors only. */\n  thisFieldFlags: Map<Field,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    branch.outer = this.outer;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    if (this.actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let thisFieldFlags = assert(this.thisFieldFlags);\n      branch.thisFieldFlags = uniqueMap<Field,FieldFlags>(thisFieldFlags);\n    } else {\n      assert(!this.thisFieldFlags);\n    }\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toRef()) {\n      case <u32>TypeRef.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>TypeRef.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>TypeRef.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>TypeRef.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>TypeRef.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>TypeRef.Funcref: { temps = parentFunction.tempFuncrefs; break; }\n      case <u32>TypeRef.Externref: { temps = parentFunction.tempExternrefs; break; }\n      case <u32>TypeRef.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case <u32>TypeRef.Eqref: { temps = parentFunction.tempEqrefs; break; }\n      case <u32>TypeRef.I31ref: { temps = parentFunction.tempI31refs; break; }\n      case <u32>TypeRef.Dataref: { temps = parentFunction.tempDatarefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    local.resetTemporaryName();\n    switch (<u32>local.type.toRef()) {\n      case <u32>TypeRef.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Funcref: {\n        let tempFuncrefs = parentFunction.tempFuncrefs;\n        if (tempFuncrefs) temps = tempFuncrefs;\n        else parentFunction.tempFuncrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Externref: {\n        let tempExternrefs = parentFunction.tempExternrefs;\n        if (tempExternrefs) temps = tempExternrefs;\n        else parentFunction.tempExternrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Eqref: {\n        let tempEqrefs = parentFunction.tempEqrefs;\n        if (tempEqrefs) temps = tempEqrefs;\n        else parentFunction.tempEqrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.I31ref: {\n        let tempI31refs = parentFunction.tempI31refs;\n        if (tempI31refs) temps = tempI31refs;\n        else parentFunction.tempI31refs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Dataref: {\n        let tempDatarefs = parentFunction.tempDatarefs;\n        if (tempDatarefs) temps = tempDatarefs;\n        else parentFunction.tempDatarefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    scopedLocal.setTemporaryName(name);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped dummy local of the specified name. */\n  addScopedDummyLocal(name: string, type: Type, declarationNode: Node): Local {\n    var scopedDummy = new Local(name, -1, type, this.parentFunction);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else if (scopedLocals.has(name)) {\n      this.parentFunction.program.error(\n        DiagnosticCode.Cannot_redeclare_block_scoped_variable_0,\n        declarationNode.range, name\n      );\n    }\n    scopedDummy.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedDummy);\n    return scopedDummy;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) {\n      this.scopedLocals = scopedLocals = new Map();\n    } else if (scopedLocals.has(name)) {\n      let existingLocal = assert(scopedLocals.get(name));\n      if (reportNode) {\n        if (!existingLocal.declaration.range.source.isNative) {\n          this.parentFunction.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range,\n            existingLocal.declaration.name.range,\n            name\n          );\n        } else {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range, name\n          );\n        }\n      }\n      return existingLocal;\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees a single scoped local by its name. */\n  freeScopedDummyLocal(name: string): void {\n    var scopedLocals = assert(this.scopedLocals);\n    assert(scopedLocals.has(name));\n    let local = assert(scopedLocals.get(name));\n    assert(local.index == -1);\n    scopedLocals.delete(name);\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Initializes `this` field flags. */\n  initThisFieldFlags(): void {\n    var actualFunction = this.actualFunction;\n    assert(actualFunction.is(CommonFlags.CONSTRUCTOR));\n    var actualParent = actualFunction.parent;\n    assert(actualParent.kind == ElementKind.CLASS);\n    var actualClass = <Class>actualParent;\n    this.thisFieldFlags = new Map();\n    var members = actualClass.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = _values[i];\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          if (\n            // guaranteed by super\n            field.parent != actualClass ||\n            // has field initializer\n            field.initializerNode !== null ||\n            // is initialized as a ctor parameter\n            field.prototype.parameterIndex != -1 ||\n            // is safe to initialize with zero\n            field.type.isAny(TypeFlags.VALUE | TypeFlags.NULLABLE)\n          ) {\n            this.setThisFieldFlag(field, FieldFlags.INITIALIZED);\n          }\n        }\n      }\n    }\n  }\n\n  /** Tests if the specified `this` field has the specified flag or flags. */\n  isThisFieldFlag(field: Field, flag: FieldFlags): bool {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags != null && fieldFlags.has(field)) {\n      return (changetype<FieldFlags>(fieldFlags.get(field)) & flag) == flag;\n    }\n    return false;\n  }\n\n  /** Sets the specified flag or flags on the given `this` field. */\n  setThisFieldFlag(field: Field, flag: FieldFlags): void {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      assert(this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n      if (fieldFlags.has(field)) {\n        let flags = changetype<FieldFlags>(fieldFlags.get(field));\n        fieldFlags.set(field, flags | flag);\n      } else {\n        fieldFlags.set(field, flag);\n      }\n    } else {\n      assert(!this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n    }\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n    this.thisFieldFlags = other.thisFieldFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & (FlowFlags.UNCHECKED_CONTEXT | FlowFlags.CTORPARAM_CONTEXT));\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      thisLocalFlags[i] = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n    }\n\n    // field flags do not matter here since there's only INITIALIZED, which can\n    // only be set if it has been observed prior to entering the branch.\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & (FlowFlags.UNCHECKED_CONTEXT | FlowFlags.CTORPARAM_CONTEXT));\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        thisLocalFlags[i] = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n      }\n    }\n\n    // field flags (currently only INITIALIZED, so can simplify)\n    var leftFieldFlags = left.thisFieldFlags;\n    if (leftFieldFlags) {\n      let newFieldFlags = new Map<Field,FieldFlags>();\n      let rightFieldFlags = assert(right.thisFieldFlags);\n      for (let _keys = Map_keys(leftFieldFlags), i = 0, k = _keys.length; i < k; ++i) {\n        let key = _keys[i];\n        let leftFlags = changetype<FieldFlags>(leftFieldFlags.get(key));\n        if (\n          (leftFlags & FieldFlags.INITIALIZED) != 0 && rightFieldFlags.has(key) && \n          (changetype<FieldFlags>(rightFieldFlags.get(key)) & FieldFlags.INITIALIZED)\n        ) {\n          newFieldFlags.set(key, FieldFlags.INITIALIZED);\n        }\n      }\n      this.thisFieldFlags = newFieldFlags;\n    } else {\n      assert(!right.thisFieldFlags);\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.isShortIntegerValue) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.isNullableReference) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.isNullableReference) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == TypeRef.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == TypeRef.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == TypeRef.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == TypeRef.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.isShortIntegerValue) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL || global.kind == ElementKind.ENUMVALUE);\n        return canConversionOverflow((<TypedElement>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.isSignedIntegerValue\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n\n          // sign extensions overflow if result can have high garbage bits in the target type\n          case UnaryOp.Extend8I32: return type.size < (type.isUnsignedIntegerValue ? 32 : 8);\n          case UnaryOp.Extend8I64: return type.size < (type.isUnsignedIntegerValue ? 64 : 8);\n          case UnaryOp.Extend16I32: return type.size < (type.isUnsignedIntegerValue ? 32 : 16);\n          case UnaryOp.Extend16I64: return type.size < (type.isUnsignedIntegerValue ? 64 : 16);\n          case UnaryOp.Extend32I64: return type.size < (type.isUnsignedIntegerValue ? 64 : 32);\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>TypeRef.I32: { value = getConstValueI32(expr); break; }\n          case <u32>TypeRef.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>TypeRef.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>TypeRef.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChildAt(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return toType.isShortIntegerValue && (\n    !fromType.isIntegerValue ||                                    // i.e. float to small int\n    fromType.size > toType.size ||                                 // larger int to small int\n    fromType.isSignedIntegerValue != toType.isSignedIntegerValue   // signedness mismatch\n  );\n}\n\nexport { findUsedLocals } from \"./passes/findusedlocals\";\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sets the `exportRuntime` option. */\nexport function setExportRuntime(options: Options, exportRuntime: bool): void {\n  options.exportRuntime = exportRuntime;\n}\n\n/** Default stack size. */\nexport const DEFAULT_STACK_SIZE = 16384;\n\n/** Sets the `stackSize` option. */\nexport function setStackSize(options: Options, stackSize: i32): void {\n  options.stackSize = stackSize;\n}\n\n/** Sets the bundle semantic version. */\nexport function setBundleVersion(\n  options: Options,\n  bundleMajorVersion: i32,\n  bundleMinorVersion: i32,\n  bundlePatchVersion: i32,\n): void {\n  options.bundleMajorVersion = bundleMajorVersion;\n  options.bundleMinorVersion = bundleMinorVersion;\n  options.bundlePatchVersion = bundlePatchVersion;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n/** Garbage collection. */\nexport const FEATURE_GC = Feature.GC;\n/** Memory64. */\nexport const FEATURE_MEMORY64 = Feature.MEMORY64;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file, or `null` to indicate not found. */\n  text: string | null,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { BuiltinNames } from \"./builtins\";\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\n/** A Binaryen-compatible index. */\nexport type Index = binaryen.Index;\n/** Reference to a Binaryen-compatible string. */\nexport type StringRef = binaryen.StringRef;\n/** Reference to a Binaryen module. */\nexport type ModuleRef = binaryen.ModuleRef;\n/** Reference to a Binaryen function. */\nexport type FunctionRef = binaryen.FunctionRef;\n/** Reference to a Binaryen expression. */\nexport type ExpressionRef = binaryen.ExpressionRef;\n/** Reference to a Binaryen global. */\nexport type GlobalRef = binaryen.GlobalRef;\n/** Reference to a Binaryen tag. */\nexport type TagRef = binaryen.TagRef;\n/** Reference to a Binaryen import. */\nexport type ImportRef = binaryen.ImportRef;\n/** Reference to a Binaryen export. */\nexport type ExportRef = binaryen.ExportRef;\n/** Reference to a Binaryen relooper. */\nexport type RelooperRef = binaryen.RelooperRef;\n/** Reference to a Binaryen relooper block. */\nexport type RelooperBlockRef = binaryen.RelooperBlockRef;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\n/** Reference to a Binaryen type. */\nexport type TypeRef = binaryen.TypeRef;\nexport namespace TypeRef {\n  export const None: TypeRef = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: TypeRef = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: TypeRef = 2 /* _BinaryenTypeInt32 */;\n  export const I64: TypeRef = 3 /* _BinaryenTypeInt64 */;\n  export const F32: TypeRef = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: TypeRef = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: TypeRef = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: TypeRef = 7 /* _BinaryenTypeFuncref */;\n  export const Externref: TypeRef = 8 /* _BinaryenTypeExternref */;\n  export const Anyref: TypeRef = 9 /* _BinaryenTypeAnyref */;\n  export const Eqref: TypeRef = 10 /* _BinaryenTypeEqref */;\n  export const I31ref: TypeRef = 11 /* _BinaryenTypeI31ref */;\n  export const Dataref: TypeRef = 12 /* _BinaryenTypeDataref */;\n  export const Auto: TypeRef = -1 /* _BinaryenTypeAuto */;\n}\n\n/** Binaryen feature constants. */\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  TruncSat = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  GC = 1024 /* _BinaryenFeatureGC */,\n  Memory64 = 2048 /* _BinaryenFeatureMemory64 */,\n  TypedFunctionReferences = 4096 /* _BinaryenFeatureTypedFunctionReferences */,\n  All = 16383 /* _BinaryenFeatureAll */\n}\n\n/** Binaryen expression id constants. */\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  MemorySize = 20 /* _BinaryenMemorySizeId */,\n  MemoryGrow = 21 /* _BinaryenMemoryGrowId */,\n  Nop = 22 /* _BinaryenNopId */,\n  Unreachable = 23 /* _BinaryenUnreachableId */,\n  AtomicRMW = 24 /* _BinaryenAtomicRMWId */,\n  AtomicCmpxchg = 25 /* _BinaryenAtomicCmpxchgId */,\n  AtomicWait = 26 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 27 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 28 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 29 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 30 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 31 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 32 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 33 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 34 /* _BinaryenSIMDLoadId */,\n  SIMDLoadStoreLane = 35 /* _BinaryenSIMDLoadStoreLaneId */,\n  MemoryInit = 36 /* _BinaryenMemoryInitId */,\n  DataDrop = 37 /* _BinaryenDataDropId */,\n  MemoryCopy = 38 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 39 /* _BinaryenMemoryFillId */,\n  Pop = 40 /* _BinaryenPopId */,\n  RefNull = 41 /* _BinaryenRefNullId */,\n  RefIs = 42 /* _BinaryenRefIsId */,\n  RefFunc = 43 /* _BinaryenRefFuncId */,\n  RefEq = 44 /* _BinaryenRefEqId */,\n  Try = 45 /* _BinaryenTryId */,\n  Throw = 46 /* _BinaryenThrowId */,\n  Rethrow = 47 /* _BinaryenRethrowId */,\n  TupleMake = 48 /* _BinaryenTupleMakeId */,\n  TupleExtract = 49 /* _BinaryenTupleExtractId */,\n  I31New = 50 /* _BinaryenI31NewId */,\n  I31Get = 51 /* _BinaryenI31GetId */,\n  CallRef = 52 /* _BinaryenCallRefId */,\n  RefTest = 53 /* _BinaryenRefTestId */,\n  RefCast = 54 /* _BinaryenRefCastId */,\n  BrOn = 55 /* _BinaryenBrOnId */,\n  RttCanon = 56 /* _BinaryenRttCanonId */,\n  RttSub = 57 /* _BinaryenRttSubId */,\n  StructNew = 58 /* _BinaryenStructNewId */,\n  StructGet = 59 /* _BinaryenStructGetId */,\n  StructSet = 60 /* _BinaryenStructSetId */,\n  ArrayNew = 61 /* _BinaryenArrayNewId */,\n  ArrayGet = 62 /* _BinaryenArrayGetId */,\n  ArraySet = 63 /* _BinaryenArraySetId */,\n  ArrayLen = 64 /* _BinaryenArrayLenId */,\n  ArrayCopy = 65 /* _BinaryenArrayCopyId */,\n  RefAs = 66 /* _BinaryenRefAsId */\n}\n\n/** Binaryen external kind constants. */\nexport enum ExternalKind {\n  Function = 0 /* _BinaryenExternalFunction */,\n  Table = 1 /* _BinaryenExternalTable */,\n  Memory = 2 /* _BinaryenExternalMemory */,\n  Global = 3 /* _BinaryenExternalGlobal */,\n  Tag = 4 /* _BinaryenExternalTag */\n}\n\n/** Binaryen unary operation constants. */\nexport enum UnaryOp {\n  /** i32.clz */\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  /** i64.clz */\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  /** i32.ctz */\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  /** i64.ctz */\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  /** i32.popcnt */\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  /** i64.popcnt */\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  /** f32.neg */\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  /** f64.neg */\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  /** f32.abs */\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  /** f64.abs */\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  /** f32.ceil */\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  /** f64.ceil */\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  /** f32.floor */\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  /** f64.floor */\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  /** f32.trunc */\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  /** f64.trunc */\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  /** f32.nearest */\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  /** f64.nearest */\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  /** f32.sqrt */\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  /** f64.sqrt */\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  /** i32.eqz */\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  /** i64.eqz */\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  /** i64.extend_i32_s */\n  ExtendI32ToI64 = 22 /* _BinaryenExtendSInt32 */,\n  /** i64.extend_i32_u */\n  ExtendU32ToU64 = 23 /* _BinaryenExtendUInt32 */,\n  /** i32.wrap_i64 */\n  WrapI64ToI32 = 24 /* _BinaryenWrapInt64 */,\n  /** i32.trunc_f32_s */\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  /** i64.trunc_f32_s */\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  /** i32.trunc_f32_u */\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  /** i64.trunc_f32_u */\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  /** i32.trunc_f64_s */\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  /** i64.trunc_f64_s */\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  /** i32.trunc_f64_u */\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  /** i64.trunc_f64_u */\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  /** i32.reinterpret_f32 */\n  ReinterpretF32ToI32 = 33 /* _BinaryenReinterpretFloat32 */,\n  /** i64.reinterpret_f64 */\n  ReinterpretF64ToI64 = 34 /* _BinaryenReinterpretFloat64 */,\n  /** f32.convert_i32_s */\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  /** f64.convert_i32_s */\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  /** f32.convert_i32_u */\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  /** f64.convert_i32_u */\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  /** f32.convert_i64_s */\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  /** f64.convert_i64_s */\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  /** f32.convert_i64_u */\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  /** f64.convert_i64_u */\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  /** f64.promote.f32 */\n  PromoteF32ToF64 = 43 /* _BinaryenPromoteFloat32 */,\n  /** f32.demote_f64 */\n  DemoteF64ToF32 = 44 /* _BinaryenDemoteFloat64 */,\n  /** f32.reinterpret_i32 */\n  ReinterpretI32ToF32 = 45 /* _BinaryenReinterpretInt32 */,\n  /** f64.reinterpret_i64 */\n  ReinterpretI64ToF64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n\n  /** i32.extend8_s */\n  Extend8I32 = 47 /* _BinaryenExtendS8Int32 */,\n  /** i32.extend16_s */\n  Extend16I32 = 48 /* _BinaryenExtendS16Int32 */,\n  /** i64.extend8_s */\n  Extend8I64 = 49 /* _BinaryenExtendS8Int64 */,\n  /** i64.extend16_s */\n  Extend16I64 = 50 /* _BinaryenExtendS16Int64 */,\n  /** i64.extend32_s (i64 in, i64 out) */\n  Extend32I64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n\n  /** i32.trunc_sat_f32_s */\n  TruncSatF32ToI32 = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  /** i32.trunc_sat_f32_u */\n  TruncSatF32ToU32 = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  /** i32.trunc_sat_f64_s */\n  TruncSatF64ToI32 = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  /** i32.trunc_sat_f64_u */\n  TruncSatF64ToU32 = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  /** i64.trunc_sat_f32_s */\n  TruncSatF32ToI64 = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  /** i64.trunc_sat_f32_u */\n  TruncSatF32ToU64 = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  /** i64.trunc_sat_f64_s */\n  TruncSatF64ToI64 = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  /** i64.trunc_sat_f64_u */\n  TruncSatF64ToU64 = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n\n  /** i8x16.splat */\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  /** i16x8.splat */\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  /** i32x4.splat */\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  /** i64x2.splat */\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  /** f32x4.splat */\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  /** f64x2.splat */\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  /** v128.not */\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  /** v128.any_true */\n  AnyTrueV128 = 67 /* _BinaryenAnyTrueVec128 */,\n  /** i8x16.abs */\n  AbsI8x16 = 68 /* _BinaryenAbsVecI8x16 */,\n  /** i8x16.neg */\n  NegI8x16 = 69 /* _BinaryenNegVecI8x16 */,\n  /** i8x16.all_true */\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  /** i8x16.bitmask */\n  BitmaskI8x16 = 71 /* _BinaryenBitmaskVecI8x16 */,\n  /** i8x16.popcnt */\n  PopcntI8x16 = 72 /* _BinaryenPopcntVecI8x16 */,\n  /** i16x8.abs */\n  AbsI16x8 = 73 /* _BinaryenAbsVecI16x8 */,\n  /** i16x8.neg */\n  NegI16x8 = 74 /* _BinaryenNegVecI16x8 */,\n  /** i16x8.all_true */\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  /** i16x8.bitmask */\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  /** i32x4.abs */\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  /** i32x4.neg */\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  /** i32x4.all_true */\n  AllTrueI32x4 = 79 /* _BinaryenAllTrueVecI32x4 */,\n  /** i32x4.bitmask */\n  BitmaskI32x4 = 80 /* _BinaryenBitmaskVecI32x4 */,\n  /** i64x2.abs */\n  AbsI64x2 = 81 /* _BinaryenAbsVecI64x2 */,\n  /** i64x2.neg */\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  /** i64x2.all_true */\n  AllTrueI64x2 = 83 /* _BinaryenAllTrueVecI64x2 */,\n  /** i64x2.bitmask */\n  BitmaskI64x2 = 84 /* _BinaryenBitmaskVecI64x2 */,\n  /** f32x4.abs */\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  /** f32x4.neg */\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  /** f32x4.sqrt */\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  /** f32x4.ceil */\n  CeilF32x4 = 88 /* _BinaryenCeilVecF32x4 */,\n  /** f32x4.floor */\n  FloorF32x4 = 89 /* _BinaryenFloorVecF32x4 */,\n  /** f32x4.trunc */\n  TruncF32x4 = 90 /* BinaryenTruncVecF32x4 */,\n  /** f32x4.nearest */\n  NearestF32x4 = 91 /* BinaryenNearestVecF32x4 */,\n  /** f64x2.abs */\n  AbsF64x2 = 92 /* _BinaryenAbsVecF64x2 */,\n  /** f64x2.neg */\n  NegF64x2 = 93 /* _BinaryenNegVecF64x2 */,\n  /** f64x2.sqrt */\n  SqrtF64x2 = 94 /* _BinaryenSqrtVecF64x2 */,\n  /** f64x2.ceil */\n  CeilF64x2 = 95 /* _BinaryenCeilVecF64x2 */,\n  /** f64x2.floor */\n  FloorF64x2 = 96 /* _BinaryenFloorVecF64x2 */,\n  /** f64x2.trunc */\n  TruncF64x2 = 97 /* _BinaryenTruncVecF64x2 */,\n  /** f64x2.nearest */\n  NearestF64x2 = 98 /* _BinaryenNearestVecF64x2 */,\n  /** i16x8.extadd_pairwise_i8x16_s */\n  ExtaddPairwiseI8x16ToI16x8 = 99 /* _BinaryenExtAddPairwiseSVecI8x16ToI16x8 */,\n  /** i16x8.extadd_pairwise.i8x16_u */\n  ExtaddPairwiseU8x16ToU16x8 = 100 /* _BinaryenExtAddPairwiseUVecI8x16ToI16x8 */,\n  /** i32x4.extadd_pairwise.i16x8_s */\n  ExtaddPairwiseI16x8ToI32x4 = 101 /* _BinaryenExtAddPairwiseSVecI16x8ToI32x4 */,\n  /** i32x4.extadd_pairwise.i64x8_u */\n  ExtaddPairwiseU16x8ToU32x4 = 102 /* _BinaryenExtAddPairwiseUVecI16x8ToI32x4 */,\n  /** i32x4.trunc_sat_f32x4_s */\n  TruncSatF32x4ToI32x4 = 103 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  /** i32x4.trunc_sat_f32x4_u */\n  TruncSatF32x4ToU32x4 = 104 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  /** f32x4.convert_i32x4_s */\n  ConvertI32x4ToF32x4 = 105 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  /** f32x4.convert_i32x4_u */\n  ConvertU32x4ToF32x4 = 106 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  /** i16x8.extend_low_i8x16_s */\n  ExtendLowI8x16ToI16x8 = 107 /* _BinaryenExtendLowSVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_high_i8x16_s */\n  ExtendHighI8x16ToI16x8 = 108 /* _BinaryenExtendHighSVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_low_i8x16_u */\n  ExtendLowU8x16ToU16x8 = 109 /* _BinaryenExtendLowUVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_high_i8x16_u */\n  ExtendHighU8x16ToU16x8 = 110 /* _BinaryenExtendHighUVecI8x16ToVecI16x8 */,\n  /** i32x4.extend_low_i16x8_s */\n  ExtendLowI16x8ToI32x4 = 111 /* _BinaryenExtendLowSVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_high_i16x8_s */\n  ExtendHighI16x8ToI32x4 = 112 /* _BinaryenExtendHighSVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_low_i16x8_u */\n  ExtendLowU16x8ToU32x4 = 113 /* _BinaryenExtendLowUVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_high_i16x8_u */\n  ExtendHighU16x8ToU32x4 = 114 /* _BinaryenExtendHighUVecI16x8ToVecI32x4 */,\n  /** i64x2.extend_low_i32x4_s */\n  ExtendLowI32x4ToI64x2 = 115 /* _BinaryenExtendLowSVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_high_i32x4_s */\n  ExtendHighI32x4ToI64x2 = 116 /* _BinaryenExtendHighSVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_low_i32x4_u */\n  ExtendLowU32x4ToU64x2 = 117 /* _BinaryenExtendLowUVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_high_i32x4_u */\n  ExtendHighU32x4ToU64x2 = 118 /* _BinaryenExtendHighUVecI32x4ToVecI64x2 */,\n  /** f32x4.convert_i32x4_s */\n  ConvertLowI32x4ToF64x2 = 119 /* _BinaryenConvertLowSVecI32x4ToVecF64x2 */,\n  /** f32x4.convert_i32x4_u */\n  ConvertLowU32x4ToF64x2 = 120 /* _BinaryenConvertLowUVecI32x4ToVecF64x2 */,\n  /** i32x4.trunc_sat_f64x2_s_zero */\n  TruncSatF64x2ToI32x4Zero = 121 /* _BinaryenTruncSatZeroSVecF64x2ToVecI32x4 */,\n  /** i32x4.trunc_sat_f64x2_u_zero */\n  TruncSatF64x2ToU32x4Zero = 122 /* _BinaryenTruncSatZeroUVecF64x2ToVecI32x4 */,\n  /** f32x4.demote_f64x2_zero */\n  DemoteZeroF64x2ToF32x4 = 123 /* _BinaryenDemoteZeroVecF64x2ToVecF32x4 */,\n  /** f64x2.promote_low_f32x4 */\n  PromoteLowF32x4ToF64x2 = 124 /* _BinaryenPromoteLowVecF32x4ToVecF64x2 */,\n\n  _last = PromoteLowF32x4ToF64x2,\n\n  // Target dependent\n\n  /** i32.clz or i64.clz, depending on target word size */\n  ClzSize,\n  /** i32.ctz or i64.ctz, depending on target word size */\n  CtzSize,\n  /** i32.popcnt or i64.popcnt, depending on target word size */\n  PopcntSize,\n  /** i32.eqz or i64.eqz, depending on target word size */\n  EqzSize\n}\n\n/** Binaryen binary operation constants. */\nexport enum BinaryOp {\n  /** i32.add */\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  /** i32.sub */\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  /** i32.mul */\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  /** i32.div_s */\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  /** i32.div_u */\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  /** i32.rem_s */\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  /** i32.rem_u */\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  /** i32.and */\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  /** i32.or */\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  /** i32.xor */\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  /** i32.shl */\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  /** i32.shr_s */\n  ShrI32 = 11 /* _BinaryenShrSInt32 */,\n  /** i32.shr_u */\n  ShrU32 = 12 /* _BinaryenShrUInt32 */,\n  /** i32.rotl */\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  /** i32.rotr */\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  /** i32.eq */\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  /** i32.ne */\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  /** i32.lt_s */\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  /** i32.lt_u */\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  /** i32.le_s */\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  /** i32.le_u */\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  /** i32.gt_s */\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  /** i32.gt_u */\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  /** i32.ge_s */\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  /** i32.ge_u */\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  /** i64.add */\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  /** i64.sub */\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  /** i64.mul */\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  /** i64.div_s */\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  /** i64.div_u */\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  /** i64.rem_s */\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  /** i64.rem_u */\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  /** i64.and */\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  /** i64.or */\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  /** i64.xor */\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  /** i64.shl */\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  /** i64.shr_s */\n  ShrI64 = 36 /* _BinaryenShrSInt64 */,\n  /** i64.shr_u */\n  ShrU64 = 37 /* _BinaryenShrUInt64 */,\n  /** i64.rotl */\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  /** i64.rotr */\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  /** i64.eq */\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  /** i64.ne */\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  /** i64.lt_s */\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  /** i64.lt_u */\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  /** i64.le_s */\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  /** i64.le_u */\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  /** i64.gt_s */\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  /** i64.gt_u */\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  /** i64.ge_s */\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  /** i64.ge_u */\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  /** f32.add */\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  /** f32.sub */\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  /** f32.mul */\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  /** f32.div */\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  /** f32.copysign */\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  /** f32.min */\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  /** f32.max */\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  /** f32.eq */\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  /** f32.ne */\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  /** f32.lt */\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  /** f32.le */\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  /** f32.gt */\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  /** f32.ge */\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  /** f64.add */\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  /** f64.sub */\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  /** f64.mul */\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  /** f64.div */\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  /** f64.copysign */\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  /** f64.min */\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  /** f64.max */\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  /** f64.eq */\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  /** f64.ne */\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  /** f64.lt */\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  /** f64.le */\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  /** f64.gt */\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  /** f64.ge */\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n\n  /** i8x16.eq */\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  /** i8x16.he */\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  /** i8x16.lt_s */\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  /** i8x16.lt_u */\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  /** i8x16.gt_s */\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  /** i8x16.gt_u */\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  /** i8x16.le_s */\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  /** i8x16.le_u */\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  /** i8x16.ge_s */\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  /** i8x16.ge_u */\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  /** i16x8.eq */\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  /** i16x8.ne */\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  /** i16x8.lt_s */\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  /** i16x8.lt_u */\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  /** i16x8.gt_s */\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  /** i16x8.gt_u */\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  /** i16x8.le_s */\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  /** i16x8.le_u */\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  /** i16x8.ge_s */\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  /** i16x8.ge_u */\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  /** i32x4.eq */\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  /** i32x4.ne */\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  /** i32x4.lt_s */\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  /** i32x4.lt_u */\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  /** i32x4.gt_s */\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  /** i32x4.gt_u */\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  /** i32x4.le_s */\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  /** i32x4.le_u */\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  /** i32x4.ge_s */\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  /** i32x4.ge_u */\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  /** i64x2.eq */\n  EqI64x2 = 106 /* _BinaryenEqVecI64x2 */,\n  /** i64x2.ne */\n  NeI64x2 = 107 /* _BinaryenNeVecI64x2 */,\n  /** i64x2.lt_s */\n  LtI64x2 = 108 /* _BinaryenLtSVecI64x2 */,\n  /** i64x2.gt_s */\n  GtI64x2 = 109 /* _BinaryenGtSVecI64x2 */,\n  /** i64x2.le_s */\n  LeI64x2 = 110 /* _BinaryenLeSVecI64x2 */,\n  /** i64x2.ge_s */\n  GeI64x2 = 111 /* _BinaryenGeSVecI64x2 */,\n  /** f32x4.eq */\n  EqF32x4 = 112 /* _BinaryenEqVecF32x4 */,\n  /** f32x4.ne */\n  NeF32x4 = 113 /* _BinaryenNeVecF32x4 */,\n  /** f32x4.lt */\n  LtF32x4 = 114 /* _BinaryenLtVecF32x4 */,\n  /** f32x4.gt */\n  GtF32x4 = 115 /* _BinaryenGtVecF32x4 */,\n  /** f32x4.le */\n  LeF32x4 = 116 /* _BinaryenLeVecF32x4 */,\n  /** f32x4.ge */\n  GeF32x4 = 117 /* _BinaryenGeVecF32x4 */,\n  /** f64x2.eq */\n  EqF64x2 = 118 /* _BinaryenEqVecF64x2 */,\n  /** f64x2.ne */\n  NeF64x2 = 119 /* _BinaryenNeVecF64x2 */,\n  /** f64x2.lt */\n  LtF64x2 = 120 /* _BinaryenLtVecF64x2 */,\n  /** f64x2.gt */\n  GtF64x2 = 121 /* _BinaryenGtVecF64x2 */,\n  /** f64x2.le */\n  LeF64x2 = 122 /* _BinaryenLeVecF64x2 */,\n  /** f64x2.ge */\n  GeF64x2 = 123 /* _BinaryenGeVecF64x2 */,\n  /** v128.and */\n  AndV128 = 124 /* _BinaryenAndVec128 */,\n  /** v128.or */\n  OrV128 = 125 /* _BinaryenOrVec128 */,\n  /** v128.xor */\n  XorV128 = 126 /* _BinaryenXorVec128 */,\n  /** v128.andnot */\n  AndnotV128 = 127 /* _BinaryenAndNotVec128 */,\n  /** i8x16.add */\n  AddI8x16 = 128 /* _BinaryenAddVecI8x16 */,\n  /** i8x16.add_sat_s */\n  AddSatI8x16 = 129 /* _BinaryenAddSatSVecI8x16 */,\n  /** i8x16.add_sat_u */\n  AddSatU8x16 = 130 /* _BinaryenAddSatUVecI8x16 */,\n  /** i8x16.sub */\n  SubI8x16 = 131 /* _BinaryenSubVecI8x16 */,\n  /** i8x16.sub_sat_s */\n  SubSatI8x16 = 132 /* _BinaryenSubSatSVecI8x16 */,\n  /** i8x16.sub_sat_u */\n  SubSatU8x16 = 133 /* _BinaryenSubSatUVecI8x16 */,\n  /** i8x16.min_s */\n  MinI8x16 = 134 /* _BinaryenMinSVecI8x16 */,\n  /** i8x16.min_u */\n  MinU8x16 = 135 /* _BinaryenMinUVecI8x16 */,\n  /** i8x16.max_s */\n  MaxI8x16 = 136 /* _BinaryenMaxSVecI8x16 */,\n  /** i8x16.max_u */\n  MaxU8x16 = 137 /* _BinaryenMaxUVecI8x16 */,\n  /** i8x16.avgr_u */\n  AvgrU8x16 = 138 /* _BinaryenAvgrUVecI8x16 */,\n  /** i16x8.add */\n  AddI16x8 = 139 /* _BinaryenAddVecI16x8 */,\n  /** i16x8.add_sat_s */\n  AddSatI16x8 = 140 /* _BinaryenAddSatSVecI16x8 */,\n  /** i16x8.add_sat_u */\n  AddSatU16x8 = 141 /* _BinaryenAddSatUVecI16x8 */,\n  /** i16x8.sub */\n  SubI16x8 = 142 /* _BinaryenSubVecI16x8 */,\n  /** i16x8.sub_sat_s */\n  SubSatI16x8 = 143 /* _BinaryenSubSatSVecI16x8 */,\n  /** i16x8.sub_sat_u */\n  SubSatU16x8 = 144 /* _BinaryenSubSatUVecI16x8 */,\n  /** i16x8.mul */\n  MulI16x8 = 145 /* _BinaryenMulVecI16x8 */,\n  /** i16x8.min_s */\n  MinI16x8 = 146 /* _BinaryenMinSVecI16x8 */,\n  /** i16x8.min_u */\n  MinU16x8 = 147 /* _BinaryenMinUVecI16x8 */,\n  /** i16x8.max_s */\n  MaxI16x8 = 148 /* _BinaryenMaxSVecI16x8 */,\n  /** i16x8.max_u */\n  MaxU16x8 = 149 /* _BinaryenMaxUVecI16x8 */,\n  /** i16x8.avgr_u */\n  AvgrU16x8 = 150 /* _BinaryenAvgrUVecI16x8 */,\n  /** i16x8.q15mulr_sat_s */\n  Q15mulrSatI16x8 = 151 /* _BinaryenQ15MulrSatSVecI16x8 */,\n  /** i16x8.extmul_low_i8x16_s */\n  ExtmulLowI16x8 = 152 /* _BinaryenExtMulLowSVecI16x8 */,\n  /** i16x8.extmul_high_i8x16_s */\n  ExtmulHighI16x8 = 153 /* _BinaryenExtMulHighSVecI16x8 */,\n  /** i16x8.extmul_low_i8x16_u */\n  ExtmulLowU16x8 = 154 /* _BinaryenExtMulLowUVecI16x8 */,\n  /** i16x8.extmul_high_i8x16_u */\n  ExtmulHighU16x8 = 155 /* _BinaryenExtMulHighUVecI16x8 */,\n  /** i32x4.add */\n  AddI32x4 = 156 /* _BinaryenAddVecI32x4 */,\n  /** i32x4.sub */\n  SubI32x4 = 157 /* _BinaryenSubVecI32x4 */,\n  /** i32x4.mul */\n  MulI32x4 = 158 /* _BinaryenMulVecI32x4 */,\n  /** i32x4.min_s */\n  MinI32x4 = 159 /* _BinaryenMinSVecI32x4 */,\n  /** i32x4.min_u */\n  MinU32x4 = 160 /* _BinaryenMinUVecI32x4 */,\n  /** i32x4.max_s */\n  MaxI32x4 = 161 /* _BinaryenMaxSVecI32x4 */,\n  /** i32x4.max_u */\n  MaxU32x4 = 162 /* _BinaryenMaxUVecI32x4 */,\n  /** i32x4.dot_i16x8_s */\n  DotI16x8 = 163 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  /** i32x4.extmul_low_i16x8_s */\n  ExtmulLowI32x4 = 164 /* _BinaryenExtMulLowSVecI32x4 */,\n  /** i32x4.extmul_high_i16x8_s */\n  ExtmulHighI32x4 = 165 /* _BinaryenExtMulHighSVecI32x4 */,\n  /** i32x4.extmul_low_i16x8_u */\n  ExtmulLowU32x4 = 166 /* _BinaryenExtMulLowUVecI32x4 */,\n  /** i32x4.extmul_high_i16x8_u */\n  ExtmulHighU32x4 = 167 /* _BinaryenExtMulHighUVecI32x4 */,\n  /** i64x2.add */\n  AddI64x2 = 168 /* _BinaryenAddVecI64x2 */,\n  /** i64x2.sub */\n  SubI64x2 = 169 /* _BinaryenSubVecI64x2 */,\n  /** i64x2.mul */\n  MulI64x2 = 170 /* _BinaryenMulVecI64x2 */,\n  /** i64x2.extmul_low_i32x4_s */\n  ExtmulLowI64x2 = 171 /* _BinaryenExtMulLowSVecI64x2 */,\n  /** i64x2.extmul_high_i32x4_s */\n  ExtmulHighI64x2 = 172 /* _BinaryenExtMulHighSVecI64x2 */,\n  /** i64x2.extmul_low_i32x4_u */\n  ExtmulLowU64x2 = 173 /* _BinaryenExtMulLowUVecI64x2 */,\n  /** i64x2.extmul_high_i32x4_u */\n  ExtmulHighU64x2 = 174 /* _BinaryenExtMulHighUVecI64x2 */,\n  /** f32x4.add */\n  AddF32x4 = 175 /* _BinaryenAddVecF32x4 */,\n  /** f32x4.sub */\n  SubF32x4 = 176 /* _BinaryenSubVecF32x4 */,\n  /** f32x4.mul */\n  MulF32x4 = 177 /* _BinaryenMulVecF32x4 */,\n  /** f32x4.div */\n  DivF32x4 = 178 /* _BinaryenDivVecF32x4 */,\n  /** f32x4.min */\n  MinF32x4 = 179 /* _BinaryenMinVecF32x4 */,\n  /** f32x4.max */\n  MaxF32x4 = 180 /* _BinaryenMaxVecF32x4 */,\n  /** f32x4.pmin */\n  PminF32x4 = 181 /* _BinaryenPMinVecF32x4 */,\n  /** f32x4.pmax */\n  PmaxF32x4 = 182 /* _BinaryenPMaxVecF32x4 */,\n  /** f64x2.add */\n  AddF64x2 = 183 /* _BinaryenAddVecF64x2 */,\n  /** f64x2.sub */\n  SubF64x2 = 184 /* _BinaryenSubVecF64x2 */,\n  /** f64x2.mul */\n  MulF64x2 = 185 /* _BinaryenMulVecF64x2 */,\n  /** f64x2.div */\n  DivF64x2 = 186 /* _BinaryenDivVecF64x2 */,\n  /** f64x2.min */\n  MinF64x2 = 187 /* _BinaryenMinVecF64x2 */,\n  /** f64x2.max */\n  MaxF64x2 = 188 /* _BinaryenMaxVecF64x2 */,\n  /** f64x2.pmin */\n  PminF64x2 = 189 /* _BinaryenPMinVecF64x2 */,\n  /** f64x2.pmax */\n  PmaxF64x2 = 190 /* _BinaryenPMaxVecF64x2 */,\n  /** i8x16.narrow_i16x8_s */\n  NarrowI16x8ToI8x16 = 191 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  /** i8x16.narrow_i16x8_u */\n  NarrowU16x8ToU8x16 = 192 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  /** i16x8.narrow_i32x4_s */\n  NarrowI32x4ToI16x8 = 193 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  /** i16x8.narrow_i32x4_u */\n  NarrowU32x4ToU16x8 = 194 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  /** i8x16.swizzle */\n  SwizzleI8x16 = 195 /* _BinaryenSwizzleVec8x16 */,\n\n  _last = SwizzleI8x16,\n\n  // Target dependent\n\n  /** i32.add or i64.add, depending on target word size */\n  AddSize,\n  /** i32.sub or i64.sub, depending on target word size */\n  SubSize,\n  /** i32.mul or i64.mul, depending on target word size */\n  MulSize,\n  /** i32.div_s or i64.div_s, depending on target word size */\n  DivISize,\n  /** i32.div_u or i64.div_u, depending on target word size */\n  DivUSize,\n  /** i32.rem_s or i64.rem_s, depending on target word size */\n  RemISize,\n  /** i32.rem_u or i64.rem_u, depending on target word size */\n  RemUSize,\n  /** i32.and or i64.and, depending on target word size */\n  AndSize,\n  /** i32.or or i64.or, depending on target word size */\n  OrSize,\n  /** i32.xor or i64.xor, depending on target word size */\n  XorSize,\n  /** i32.shl or i64.shl, depending on target word size */\n  ShlSize,\n  /** i32.shr_s or i64.shr_s, depending on target word size */\n  ShrISize,\n  /** i32.shr_u or i64.shr_u, depending on target word size */\n  ShrUSize,\n  /** i32.rotl or i64.rotl, depending on target word size */\n  RotlSize,\n  /** i32.rotr or i64.rotr, depending on target word size */\n  RotrSize,\n  /** i32.eq or i64.eq, depending on target word size */\n  EqSize,\n  /** i32.ne or i64.ne, depending on target word size */\n  NeSize,\n  /** i32.lt_s or i64.lt_s, depending on target word size */\n  LtISize,\n  /** i32.lt_u or i64.lt_u, depending on target word size */\n  LtUSize,\n  /** i32.le_s or i64.le_s, depending on target word size */\n  LeISize,\n  /** i32.le_u or i64.le_u, depending on target word size */\n  LeUSize,\n  /** i32.gt_s or i64.gt_s, depending on target word size */\n  GtISize,\n  /** i32.gt_u or i64.gt_u, depending on target word size */\n  GtUSize,\n  /** i32.ge_s or i64.ge_s, depending on target word size */\n  GeISize,\n  /** i32.ge_u or i64.ge_u, depending on target word size */\n  GeUSize\n}\n\n/** Binaryen atomic read-modify-write operation constants. */\nexport enum AtomicRMWOp {\n  /** i32.atomic.rmw.add, i32.atomic.rmw8.add_u, i32.atomic.rmw16.add_u, i64.atomic.rmw.add, i64.atomic.rmw8.add_u, i64.atomic.rmw16.add_u, i64.atomic.rmw32.add_u */\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  /** i32.atomic.rmw.sub, i32.atomic.rmw8.sub_u, i32.atomic.rmw16.sub_u, i64.atomic.rmw.sub, i64.atomic.rmw8.sub_u, i64.atomic.rmw16.sub_u, i64.atomic.rmw32.sub_u */\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  /** i32.atomic.rmw.and, i32.atomic.rmw8.and_u, i32.atomic.rmw16.and_u, i64.atomic.rmw.and, i64.atomic.rmw8.and_u, i64.atomic.rmw16.and_u, i64.atomic.rmw32.and_u */\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  /** i32.atomic.rmw.or, i32.atomic.rmw8.or_u, i32.atomic.rmw16.or_u, i64.atomic.rmw.or, i64.atomic.rmw8.or_u, i64.atomic.rmw16.or_u, i64.atomic.rmw32.or_u */\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  /** i32.atomic.rmw.xor, i32.atomic.rmw8.xor_u, i32.atomic.rmw16.xor_u, i64.atomic.rmw.xor, i64.atomic.rmw8.xor_u, i64.atomic.rmw16.xor_u, i64.atomic.rmw32.xor_u */\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  /** i32.atomic.rmw.xchg, i32.atomic.rmw8.xchg_u, i32.atomic.rmw16.xchg_u, i64.atomic.rmw.xchg, i64.atomic.rmw8.xchg_u, i64.atomic.rmw16.xchg_u, i64.atomic.rmw32.xchg_u */\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\n/** Binaryen SIMD extract operation constants. */\nexport enum SIMDExtractOp {\n  /** i8x16.extract_lane_s */\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  /** i8x16.extract_lane_u */\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  /** i16x8.extract_lane_s */\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  /** i16x8.extract_lane_u */\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  /** i32x4.extract_lane_s */\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  /** i32x4.extract_lane_u */\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  /** i64x2.extract_lane_s */\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  /** i64x2.extract_lane_u */\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\n/** Binaryen SIMD replace operation constants. */\nexport enum SIMDReplaceOp {\n  /** i8x16.replace_lane */\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  /** i16x8.replace_lane */\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  /** i32x4.replace_lane */\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  /** i64x2.replace_lane */\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  /** f32x4.replace_lane */\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  /** f64x2.replace_lane */\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\n/** Binaryen SIMD shift operation constants. */\nexport enum SIMDShiftOp {\n  /** i8x16.shl */\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  /** i8x16.shr_s */\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  /** i8x16.shr_u */\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  /** i16x8.shl */\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  /** i16x8.shr_s */\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  /** i16x8.shr_u */\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  /** i16x8.shl */\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  /** i32x4.shr_s */\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  /** i32x4.shr_u */\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  /** i64x2.shl */\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  /** i64x2.shr_u */\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  /** i64x2.shr_u */\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\n/** Binaryen SIMD load operation constants. */\nexport enum SIMDLoadOp {\n  /** v128.load8_splat */\n  Load8Splat = 0 /* _BinaryenLoad8SplatVec128 */,\n  /** v128.load16_splat */\n  Load16Splat = 1 /* _BinaryenLoad16SplatVec128 */,\n  /** v128.load32_splat */\n  Load32Splat = 2 /* _BinaryenLoad32SplatVec128 */,\n  /** v128.load64_splat */\n  Load64Splat = 3 /* _BinaryenLoad64SplatVec128 */,\n  /** v128.load8x8_s */\n  Load8x8S = 4 /* _BinaryenLoad8x8SVec128 */,\n  /** v128.load8x8_u */\n  Load8x8U = 5 /* _BinaryenLoad8x8UVec128 */,\n  /** v128.load16x4_s */\n  Load16x4S = 6 /* _BinaryenLoad16x4SVec128 */,\n  /** v128.load16x4_u */\n  Load16x4U = 7 /* _BinaryenLoad16x4UVec128 */,\n  /** v128.load32x2_s */\n  Load32x2S = 8 /* _BinaryenLoad32x2SVec128 */,\n  /** v128.load32x2_u */\n  Load32x2U = 9 /* _BinaryenLoad32x2UVec128 */,\n  /** v128.load32_zero */\n  Load32Zero = 10 /* _BinaryenLoad32ZeroVec128 */,\n  /** v128.load64_zero */\n  Load64Zero = 11 /* _BinaryenLoad64ZeroVec128 */,\n}\n\n/** Binaryen SIMD load/store lane operation constants. */\nexport enum SIMDLoadStoreLaneOp {\n  /** v128.load8_lane */\n  Load8Lane = 0 /* _BinaryenLoad8LaneVec128 */,\n  /** v128.load16_lane */\n  Load16Lane = 1 /* _BinaryenLoad16LaneVec128 */,\n  /** v128.load32_lane */\n  Load32Lane = 2 /* _BinaryenLoad32LaneVec128 */,\n  /** v128.load64_lane */\n  Load64Lane = 3 /* _BinaryenLoad64LaneVec128 */,\n  /** v128.store8_lane */\n  Store8Lane = 4 /* _BinaryenStore8LaneVec128 */,\n  /** v128.store16_lane */\n  Store16Lane = 5 /* _BinaryenStore16LaneVec128 */,\n  /** v128.store32_lane */\n  Store32Lane = 6 /* _BinaryenStore32LaneVec128 */,\n  /** v128.store64_lane */\n  Store64Lane = 7 /* _BinaryenStore64LaneVec128 */,\n}\n\n/** Binaryen SIMD ternary operation constants. */\nexport enum SIMDTernaryOp {\n  /** v128.bitselect */\n  Bitselect = 0 /* _BinaryenBitselectVec128 */\n}\n\n/** Binaryen RefIs operation constants. */\nexport enum RefIsOp {\n  /** ref.is_null */\n  RefIsNull = 0 /* _BinaryenRefIsNull */,\n  /** ref.is_func */\n  RefIsFunc = 1 /* _BinaryenRefIsFunc */,\n  /** ref.is_data */\n  RefIsData = 2 /* _BinaryenRefIsData */,\n  /** ref.is_i31 */\n  RefIsI31 = 3 /* _BinaryenRefIsI31 */\n}\n\n/** Binaryen RefAs operation constants. */\nexport enum RefAsOp {\n  /** ref.as_non_null */\n  RefAsNonNull = 0 /* _BinaryenRefAsNonNull */,\n  /** ref.as_func */\n  RefAsFunc = 1 /* _BinaryenRefAsFunc */,\n  /** ref.as_data */\n  RefAsData = 2 /* _BinaryenRefAsData */,\n  /** ref.as_i31 */\n  RefAsI31 = 3 /* _BinaryenRefAsI31 */\n}\n\n/** Binaryen BrOn operation constants. */\nexport enum BrOnOp {\n  /** br_on_null */\n  BrOnNull = 0 /* TODO_BinaryenBrOnNull */,\n  /** br_on_cast */\n  BrOnCast = 1 /* TODO_BinaryenBrOnCast */,\n  /** br_on_func */\n  BrOnFunc = 2 /* TODO_BinaryenBrOnFunc */,\n  /** br_on_data */\n  BrOnData = 3 /* TODO_BinaryenBrOnData */,\n  /** br_on_i31 */\n  BrOnI31 = 4 /* TODO_BinaryenBrOnI31 */\n}\n\n/** Binaryen expression runner flags. */\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef,\n    /** Whether a shadow stack is used. */\n    public useShadowStack: bool,\n    /** Architecture-dependent size type. */\n    public sizeType: TypeRef\n  ) {\n    assert(sizeType == TypeRef.I32 || sizeType == TypeRef.I64);\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(useShadowStack: bool, sizeType: TypeRef): Module {\n    return new Module(binaryen._BinaryenModuleCreate(), useShadowStack, sizeType);\n  }\n\n  static createFrom(buffer: Uint8Array, useShadowStack: bool, sizeType: TypeRef): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length), useShadowStack, sizeType);\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  // isize<T>(value: T): ExpressionRef {\n  //   if (i64_is(value)) {\n  //     if (this.sizeType == TypeRef.I64) {\n  //       return this.i64(i64_low(value), i64_high(value));\n  //     }\n  //     assert(i64_is_i32(value));\n  //     return this.i32(i64_low(value));\n  //   }\n  //   return this.sizeType == TypeRef.I64\n  //     ? this.i64(i32(value), i32(value) < 0 ? -1 : 0)\n  //     : this.i32(i32(value));\n  // }\n\n  usize<T>(value: T): ExpressionRef {\n    if (i64_is(value)) {\n      if (this.sizeType == TypeRef.I64) {\n        return this.i64(i64_low(value), i64_high(value));\n      }\n      assert(i64_is_u32(value));\n      return this.i32(i64_low(value));\n    }\n    return this.sizeType == TypeRef.I64\n      ? this.i64(i32(value))\n      : this.i32(i32(value));\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) {\n      binaryen.__i32_store8(out + i, bytes[i]);\n    }\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(type: TypeRef): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref, type);\n  }\n\n  ref_eq(left: ExpressionRef, right: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenRefEq(this.ref, left, right);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    value: ExpressionRef\n  ): ExpressionRef {\n    if (op > UnaryOp._last) {\n      let isWam64 = this.sizeType == TypeRef.I64;\n      switch (op) {\n        case UnaryOp.ClzSize: return this.unary(isWam64 ? UnaryOp.ClzI64 : UnaryOp.ClzI32, value);\n        case UnaryOp.CtzSize: return this.unary(isWam64 ? UnaryOp.CtzI64 : UnaryOp.CtzI32, value);\n        case UnaryOp.PopcntSize: return this.unary(isWam64 ? UnaryOp.PopcntI64 : UnaryOp.PopcntI32, value);\n        case UnaryOp.EqzSize: return this.unary(isWam64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, value);\n      }\n      assert(false);\n    }\n    return binaryen._BinaryenUnary(this.ref, op, value);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    if (op > BinaryOp._last) {\n      let isWasm64 = this.sizeType == TypeRef.I64;\n      switch (op) {\n        case BinaryOp.AddSize: return this.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32, left, right);\n        case BinaryOp.SubSize: return this.binary(isWasm64 ? BinaryOp.SubI64 : BinaryOp.SubI32, left, right);\n        case BinaryOp.MulSize: return this.binary(isWasm64 ? BinaryOp.MulI64 : BinaryOp.MulI32, left, right);\n        case BinaryOp.DivISize: return this.binary(isWasm64 ? BinaryOp.DivI64 : BinaryOp.DivI32, left, right);\n        case BinaryOp.DivUSize: return this.binary(isWasm64 ? BinaryOp.DivU64 : BinaryOp.DivU32, left, right);\n        case BinaryOp.RemISize: return this.binary(isWasm64 ? BinaryOp.RemI64 : BinaryOp.RemI32, left, right);\n        case BinaryOp.RemUSize: return this.binary(isWasm64 ? BinaryOp.RemU64 : BinaryOp.RemU32, left, right);\n        case BinaryOp.AndSize: return this.binary(isWasm64 ? BinaryOp.AndI64 : BinaryOp.AndI32, left, right);\n        case BinaryOp.OrSize: return this.binary(isWasm64 ? BinaryOp.OrI64 : BinaryOp.OrI32, left, right);\n        case BinaryOp.XorSize: return this.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32, left, right);\n        case BinaryOp.ShlSize: return this.binary(isWasm64 ? BinaryOp.ShlI64 : BinaryOp.ShlI32, left, right);\n        case BinaryOp.ShrISize: return this.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32, left, right);\n        case BinaryOp.ShrUSize: return this.binary(isWasm64 ? BinaryOp.ShrU64 : BinaryOp.ShrU32, left, right);\n        case BinaryOp.RotlSize: return this.binary(isWasm64 ? BinaryOp.RotlI64 : BinaryOp.RotlI32, left, right);\n        case BinaryOp.RotrSize: return this.binary(isWasm64 ? BinaryOp.RotrI64 : BinaryOp.RotrI32, left, right);\n        case BinaryOp.EqSize: return this.binary(isWasm64 ? BinaryOp.EqI64 : BinaryOp.EqI32, left, right);\n        case BinaryOp.NeSize: return this.binary(isWasm64 ? BinaryOp.NeI64 : BinaryOp.NeI32, left, right);\n        case BinaryOp.LtISize: return this.binary(isWasm64 ? BinaryOp.LtI64 : BinaryOp.LtI32, left, right);\n        case BinaryOp.LtUSize: return this.binary(isWasm64 ? BinaryOp.LtU64 : BinaryOp.LtU32, left, right);\n        case BinaryOp.LeISize: return this.binary(isWasm64 ? BinaryOp.LeI64 : BinaryOp.LeI32, left, right);\n        case BinaryOp.LeUSize: return this.binary(isWasm64 ? BinaryOp.LeU64 : BinaryOp.LeU32, left, right);\n        case BinaryOp.GtISize: return this.binary(isWasm64 ? BinaryOp.GtI64 : BinaryOp.GtI32, left, right);\n        case BinaryOp.GtUSize: return this.binary(isWasm64 ? BinaryOp.GtU64 : BinaryOp.GtU32, left, right);\n        case BinaryOp.GeISize: return this.binary(isWasm64 ? BinaryOp.GeI64 : BinaryOp.GeI32, left, right);\n        case BinaryOp.GeUSize: return this.binary(isWasm64 ? BinaryOp.GeU64 : BinaryOp.GeU32, left, right);\n      }\n      assert(false);\n    }\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  memory_size(): ExpressionRef {\n    return binaryen._BinaryenMemorySize(this.ref);\n  }\n\n  memory_grow(delta: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenMemoryGrow(this.ref, delta);\n  }\n\n  local_get(\n    index: i32,\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  tostack(value: ExpressionRef): ExpressionRef {\n    if (this.useShadowStack) {\n      let type = binaryen._BinaryenExpressionGetType(value);\n      assert(type == TypeRef.I32 || type == TypeRef.Unreachable);\n      return this.call(BuiltinNames.tostack, [ value ], type);\n    }\n    return value;\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    isManaged: bool,\n    type: TypeRef = TypeRef.Auto,\n  ): ExpressionRef {\n    if (type == TypeRef.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    if (isManaged && this.useShadowStack) {\n      value = this.tostack(value);\n    }\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: TypeRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef,\n    isManaged: bool\n  ): ExpressionRef {\n    if (isManaged && this.useShadowStack) {\n      value = this.tostack(value);\n    }\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: TypeRef = TypeRef.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: TypeRef = TypeRef.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == TypeRef.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition, this.ref) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<StringRef>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: TypeRef,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        )\n      : binaryen._BinaryenCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: TypeRef\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: TypeRef,\n    results: TypeRef,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(\"0\"); // TODO: multiple tables\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(\n          this.ref, cStr, index, cArr, operands ? operands.length : 0, params, results\n        )\n      : binaryen._BinaryenCallIndirect(\n          this.ref, cStr, index, cArr, operands ? operands.length : 0, params, results\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    tableName: string,\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: TypeRef,\n    results: TypeRef\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  // try(\n  //   body: ExpressionRef,\n  //   catchTags: string[],\n  //   catchBodies: ExpressionRef[]\n  // ): ExpressionRef {\n  //   var numCatchTags = catchTags.length;\n  //   var strs = new Array<TagRef>(numCatchTags);\n  //   for (let i = 0; i < numCatchTags; ++i) {\n  //     strs[i] = this.allocStringCached(catchTags[i]);\n  //   }\n  //   var cArr1 = allocPtrArray(strs);\n  //   var cArr2 = allocPtrArray(catchBodies);\n  //   var ret = binaryen._BinaryenTry(this.ref, body, cArr1, numCatchTags, cArr2, catchBodies.length);\n  //   binaryen._free(cArr2);\n  //   binaryen._free(cArr1);\n  //   return ret;\n  // }\n\n  throw(\n    tagName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(tagName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    target: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    return binaryen._BinaryenRethrow(this.ref, cStr);\n  }\n\n  // multi value (pseudo instructions)\n\n  pop(\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  simd_loadstorelane(\n    op: SIMDLoadStoreLaneOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32,\n    index: u8,\n    vec: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoadStoreLane(this.ref, op, offset, align, index, ptr, vec);\n  }\n\n  // reference types / gc\n\n  ref_is(\n    op: RefIsOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIs(this.ref, op, expr);\n  }\n\n  ref_as(\n    op: RefAsOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefAs(this.ref, op, expr);\n  }\n\n  ref_func(\n    name: string,\n    type: TypeRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr, type);\n  }\n\n  i31_new(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenI31New(this.ref, value);\n  }\n\n  i31_get(\n    expr: ExpressionRef,\n    signed: bool\n  ): ExpressionRef {\n    return binaryen._BinaryenI31Get(this.ref, expr, signed);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: TypeRef,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // tags\n\n  addTag(\n    name: string,\n    params: TypeRef,\n    results: TypeRef\n  ): TagRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddTag(this.ref, cStr, params, results);\n  }\n\n  getTag(\n    name: string\n  ): TagRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetTag(this.ref, cStr);\n  }\n\n  removeTag(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveTag(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: TypeRef,\n    results: TypeRef,\n    varTypes: TypeRef[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(\n      this.ref,\n      cStr,\n      params,\n      results,\n      cArr,\n      varTypes ? varTypes.length : 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  hasFunction(name: string): bool {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr) != 0;\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(\n    result: TypeRef,\n    paramTypes: TypeRef[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addTagExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTagExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  hasExport(externalName: string): bool {\n    var cStr = this.allocStringCached(externalName);\n    return binaryen._BinaryenGetExport(this.ref, cStr) != 0;\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: TypeRef,\n    results: TypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: TypeRef,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addTagImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: TypeRef,\n    results: TypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTagImport(\n      this.ref, cStr1, cStr2, cStr3, params, results\n    );\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let segment = segments[i];\n      let buffer = segment.buffer;\n      let offset = segment.offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(\n      this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared\n    );\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) {\n      binaryen._free(segs[i]);\n    }\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  addFunctionTable(\n    name: string,\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var cStr = this.allocStringCached(name);\n    var numNames = funcs.length;\n    var names = new Array<StringRef>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    var tableRef = binaryen._BinaryenGetTable(this.ref, cStr);\n    if (!tableRef) {\n      tableRef = binaryen._BinaryenAddTable(this.ref, cStr, initial, maximum, TypeRef.Funcref);\n    } else {\n      binaryen._BinaryenTableSetInitial(tableRef, initial);\n      binaryen._BinaryenTableSetMax(tableRef, maximum);\n    }\n    binaryen._BinaryenAddActiveElementSegment(this.ref, cStr, cStr, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  /* setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<CString>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(\n      this.ref, initial, maximum, cArr, numNames, offset\n    );\n    binaryen._free(cArr);\n  } */\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getZeroFilledMemory(): bool {\n    return binaryen._BinaryenGetZeroFilledMemory();\n  }\n\n  setZeroFilledMemory(on: bool): void {\n    binaryen._BinaryenSetZeroFilledMemory(on);\n  }\n\n  getFastMath(): bool {\n    return binaryen._BinaryenGetFastMath();\n  }\n\n  setFastMath(on: bool): void {\n    binaryen._BinaryenSetFastMath(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  getAllowInliningFunctionsWithLoops(): bool {\n    return binaryen._BinaryenGetAllowInliningFunctionsWithLoops();\n  }\n\n  setAllowInliningFunctionsWithLoops(enabled: bool): void {\n    binaryen._BinaryenSetAllowInliningFunctionsWithLoops(enabled);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<StringRef>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames - 1; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(\n    optimizeLevel: i32,\n    shrinkLevel: i32,\n    debugInfo: bool = false,\n    zeroFilledMemory: bool = false\n  ): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    this.setOptimizeLevel(optimizeLevel);\n    this.setShrinkLevel(shrinkLevel);\n    this.setDebugInfo(debugInfo);\n    this.setZeroFilledMemory(zeroFilledMemory);\n    this.setFastMath(true);\n    this.clearPassArguments();\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel == 0) {\n      this.setAlwaysInlineMaxSize(12);\n      this.setFlexibleInlineMaxSize(70);\n      this.setOneCallerInlineMaxSize(200);\n      this.setAllowInliningFunctionsWithLoops(optimizeLevel >= 3);\n    } else {\n      this.setAlwaysInlineMaxSize(\n        optimizeLevel <= 1 || shrinkLevel >= 2\n          ? 2\n          : 6\n      );\n      this.setFlexibleInlineMaxSize(65);\n      this.setOneCallerInlineMaxSize(80);\n      this.setAllowInliningFunctionsWithLoops(false);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n      if (optimizeLevel >= 2) {\n        passes.push(\"once-reduction\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n        passes.push(\"ssa-nomerge\");\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"local-cse\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"precompute-propagate\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"simplify-locals-nostructure\");\n        passes.push(\"flatten\");\n        passes.push(\"vacuum\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"licm\");\n        passes.push(\"merge-locals\");\n        passes.push(\"reorder-locals\");\n        passes.push(\"dae-optimizing\");\n        passes.push(\"code-folding\");\n      }\n      passes.push(\"optimize-instructions\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"dce\");\n      }\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"inlining\");\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"simplify-locals-notee-nostructure\");\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"local-cse\");\n      }\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"vacuum\");\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (this.getLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      if (optimizeLevel > 1 && (this.getFeatures() & FeatureFlags.GC) != 0) {\n        passes.push(\"heap2local\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"precompute-propagate\");\n\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n          passes.push(\"local-cse\");\n\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"inlining\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"coalesce-locals\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return binary;\n  }\n\n  toText(watFormat: bool = true): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStringsToPointers: Map<string,usize> = new Map();\n  private cachedPointersToStrings: Map<usize,string | null> = new Map();\n\n  allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cached = this.cachedStringsToPointers;\n    if (cached.has(str)) return changetype<usize>(cached.get(str));\n    var ptr = allocString(str);\n    cached.set(str, ptr);\n    return ptr;\n  }\n\n  readStringCached(ptr: usize): string | null {\n    // Binaryen internalizes names, so using this method where it's safe can\n    // avoid quite a bit of unnecessary garbage.\n    if (ptr == 0) return null;\n    var cached = this.cachedPointersToStrings;\n    if (cached.has(ptr)) return changetype<string>(this.cachedPointersToStrings.get(ptr));\n    var str = readString(ptr);\n    cached.set(ptr, str);\n    return str;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStringsToPointers), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStringsToPointers.clear();\n    this.cachedPointersToStrings.clear();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>TypeRef.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>TypeRef.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>TypeRef.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>TypeRef.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>TypeRef.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an externref as it is opaque\n          case <u32>TypeRef.Externref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(\n          this.ref, globalName, binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenUnary(\n          this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1\n        );\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenBinary(\n          this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2\n        );\n      }\n    }\n    return 0;\n  }\n\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(\n    expr: ExpressionRef,\n    flags: ExpressionRunnerFlags,\n    maxDepth: i32 = 50,\n    maxLoopIterations: i32 = 1\n  ): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: TypeRef[] | null): TypeRef {\n  if (!types) return TypeRef.None;\n  switch (types.length) {\n    case 0: return TypeRef.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: TypeRef): TypeRef[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<TypeRef>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): TypeRef {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function isConstZero(expr: ExpressionRef): bool {\n  if (getExpressionId(expr) != ExpressionId.Const) return false;\n  var type = getExpressionType(expr);\n  if (type == TypeRef.I32) return getConstValueI32(expr) == 0;\n  if (type == TypeRef.I64) return getConstValueI64Low(expr) == 0 && getConstValueI64High(expr) == 0;\n  if (type == TypeRef.F32) return getConstValueF32(expr) == 0;\n  if (type == TypeRef.F64) return getConstValueF64(expr) == 0;\n  return false;\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChildAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChildAt(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperandAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperandAt(expr, index);\n}\n\nexport function getMemoryGrowDelta(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenMemoryGrowGetDelta(expr);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): TypeRef {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): TypeRef {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): TypeRef[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<TypeRef>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): TypeRef {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// tags\n\nexport function getTagName(tag: TagRef): string | null {\n  return readString(binaryen._BinaryenTagGetName(tag));\n}\n\nexport function getTagParams(tag: TagRef): TypeRef {\n  return binaryen._BinaryenTagGetParams(tag);\n}\n\nexport function getTagResults(tag: TagRef): TypeRef {\n  return binaryen._BinaryenTagGetResults(tag);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition, false); // u32\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, TypeRef.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  DanglingPop = 2048 /* _BinaryenSideEffectDanglingPop */,\n  TrapsNeverHappen = 4096 /* _BinaryenSideEffectTrapsNeverHappen */,\n  Any = 8191 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, module: ModuleRef): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, module);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, module: ModuleRef): bool {\n  return getSideEffects(expr, module) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var len = u8s.length;\n  var ptr = binaryen._malloc(len);\n  for (let i = 0; i < len; ++i) {\n    binaryen.__i32_store8(ptr + i, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var len = i32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var len = u32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nexport function allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var len = ptrs.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0, k = len; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      len += 1;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else {\n      len += 4;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1) >>> 0;\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      assert(u < 0x200000, \"Invalid Unicode code point during allocString\");\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, len: i32): Uint8Array {\n  var ret = new Uint8Array(len);\n  for (let i = 0; i < len; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        assert(false, \"Invalid UTF8 sequence during readString\");\n      }\n    }\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >>> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != TypeRef.Unreachable) {\n    return false;\n  }\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: {\n      return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    }\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return (\n          numChildren > 0 &&\n          needsExplicitUnreachable(binaryen._BinaryenBlockGetChildAt(expr, numChildren - 1))\n        );\n      }\n    }\n  }\n  return true;\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  CharCode,\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Represents a dependee. */\nclass Dependee {\n  constructor(\n    public source: Source,\n    public reportNode: Node\n  ) {}\n}\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Map of dependees being depended upon by a source, by path. */\n  dependees: Map<string, Dependee> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text: string | null,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // check if this is an error\n    if (text === null) {\n      let dependees = this.dependees;\n      let dependee: Dependee | null = null;\n      if (dependees.has(internalPath)) dependee = assert(dependees.get(internalPath));\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        dependee\n          ? dependee.reportNode.range\n          : null,\n        path\n      );\n      return;\n    }\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) {\n        statements.push(statement);\n      } else {\n        this.skipStatement(tn);\n      }\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart = 0;\n    var exportEnd = 0;\n    var defaultStart = 0;\n    var defaultEnd = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart = 0;\n    var declareEnd = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the path of the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var dependees = this.dependees;\n    if (dependees.has(dependent)) {\n      let dependee = assert(dependees.get(dependent));\n      return dependee.source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'null'\n    } else if (token == Token.NULL) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... | null\n    while (tn.skip(Token.BAR)) {\n      if (tn.skip(Token.NULL)) {\n        type.isNullable = true;\n      } else {\n        let notNullStart = tn.pos;\n        let notNull = this.parseType(tn, false, true);\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            notNull ? notNull.range : tn.range(notNullStart), \"null\"\n          );\n        }\n        return null;\n      }\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn, false);\n            if (!type) return null;\n            if (type.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                type.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>type;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n\n    if (!parameters) parameters = [];\n\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITELY_ASSIGNED;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if (initializer !== null && (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>type;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>type;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, this.parseParametersThis, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    explicitThis: NamedTypeNode | null,\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      explicitThis,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let type = this.parseType(tn);\n      if (!type) return null;\n      if (type.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          type.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>type;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface && decorators !== null) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart = 0;\n    var readonlyEnd = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart = 0;\n    var getEnd = 0;\n    var isSetter = false;\n    var setStart = 0;\n    var setEnd = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var isGetterOrSetter = isGetter || isSetter;\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!isGetterOrSetter && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetterOrSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, isSetter || name.kind == NodeKind.CONSTRUCTOR);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!isInterface && !(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT))) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetterOrSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITELY_ASSIGNED;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if (\n        (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0 &&\n        (isInterface || initializer !== null || (flags & CommonFlags.STATIC) != 0)\n      ) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      if (path !== null) {\n        let internalPath = assert(ret.internalPath);\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(currentSource, path));\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, new Dependee(currentSource, path));\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN) ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            null,\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = Node.createOmittedExpression(tn.range(tn.pos));\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.skip(Token.TEMPLATELITERAL)) {\n          return this.parseTemplateLiteral(tn, identifier);\n        }\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            null,\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.TEMPLATELITERAL: {\n        return this.parseTemplateLiteral(tn);\n      }\n      case Token.INTEGERLITERAL: {\n        let value = tn.readInteger();\n        tn.checkForIdentifierStartAfterNumericLiteral();\n        return Node.createIntegerLiteralExpression(value, tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        let value = tn.readFloat();\n        tn.checkForIdentifierStartAfterNumericLiteral();\n        return Node.createFloatLiteralExpression(value, tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          if (tn.skip(Token.TEMPLATELITERAL)) {\n            expr = this.parseTemplateLiteral(tn, expr);\n            if (!expr) return null;\n          } else {\n            expr = this.maybeParseCallExpression(tn, expr, true);\n          }\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private parseTemplateLiteral(tn: Tokenizer, tag: Expression | null = null): Expression | null {\n    // at '`': ... '`'\n    var startPos = tag ? tag.range.start : tn.tokenPos;\n    var parts = new Array<string>();\n    var rawParts = new Array<string>();\n    var exprs = new Array<Expression>();\n    parts.push(tn.readString(0, tag != null));\n    rawParts.push(tn.source.text.substring(tn.readStringStart, tn.readStringEnd));\n    while (tn.readingTemplateString) {\n      let expr = this.parseExpression(tn);\n      if (!expr) return null;\n      exprs.push(expr);\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"}\"\n        );\n        return null;\n      }\n      parts.push(tn.readString(CharCode.BACKTICK, tag != null));\n      rawParts.push(tn.source.text.substring(tn.readStringStart, tn.readStringEnd));\n    }\n    return Node.createTemplateLiteralExpression(tag, parts, rawParts, exprs, tn.range(startPos, tn.pos));\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN) ||\n      potentiallyGeneric &&\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL:\n        case Token.TEMPLATELITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n    tn.readingTemplateString = false;\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL:{\n          tn.readString();\n          break;\n        }\n        case Token.TEMPLATELITERAL: {\n          tn.readString();\n          while(tn.readingTemplateString){\n            this.skipBlock(tn);\n            tn.readString(CharCode.BACKTICK);\n          }\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Utility to find all locals used in an expression.\n * @license Apache-2.0\n */\n\nimport {\n  Visitor\n} from \"./pass\";\n\nimport {\n  ExpressionRef\n} from \"../module\";\n\nimport {\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalSetGetIndex\n} from \"../glue/binaryen\";\n\nclass FindUsedLocalsVisitor extends Visitor {\n  used: Set<i32>;\n\n  constructor(used: Set<i32> = new Set()) {\n    super();\n    this.used = used;\n  }\n  \n  /** @override */\n  visitLocalGet(localGet: ExpressionRef): void {\n    this.used.add(<i32>_BinaryenLocalGetGetIndex(localGet));\n  }\n\n  /** @override */\n  visitLocalSet(localSet: ExpressionRef): void {\n    this.used.add(<i32>_BinaryenLocalSetGetIndex(localSet));\n  }\n}\n\nvar singleton: FindUsedLocalsVisitor | null = null;\n\n/** Finds the indexes of all locals used in the specified expression. */\nexport function findUsedLocals(\n  expr: ExpressionRef,\n  used: Set<i32> = new Set()\n): Set<i32> {\n  var visitor = singleton;\n  if (!visitor) singleton = visitor = new FindUsedLocalsVisitor(used);\n  else visitor.used = used;\n  visitor.visit(expr);\n  return used;\n}\n","/**\n * @fileoverview Infrastructure for custom Binaryen passes.\n * @license Apache-2.0\n */\n\nimport {\n  Module,\n  ExpressionId,\n  ExpressionRef,\n  FunctionRef,\n  GlobalRef,\n  Index,\n  StringRef\n} from \"../module\";\n\nimport {\n  _BinaryenExpressionGetId,\n  _BinaryenBlockGetNumChildren,\n  _BinaryenBlockGetChildAt,\n  _BinaryenIfGetCondition,\n  _BinaryenIfGetIfTrue,\n  _BinaryenIfGetIfFalse,\n  _BinaryenLoopGetBody,\n  _BinaryenBreakGetCondition,\n  _BinaryenBreakGetValue,\n  _BinaryenGetNumFunctions,\n  _BinaryenGetFunctionByIndex,\n  _BinaryenGetNumGlobals,\n  _BinaryenGetGlobalByIndex,\n  _BinaryenFunctionGetBody,\n  _BinaryenSwitchGetCondition,\n  _BinaryenSwitchGetValue,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenLocalSetGetValue,\n  _BinaryenGlobalSetGetValue,\n  _BinaryenGlobalGetInitExpr,\n  _BinaryenLoadGetPtr,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreGetValue,\n  _BinaryenUnaryGetValue,\n  _BinaryenBinaryGetLeft,\n  _BinaryenBinaryGetRight,\n  _BinaryenSelectGetIfTrue,\n  _BinaryenSelectGetIfFalse,\n  _BinaryenSelectGetCondition,\n  _BinaryenDropGetValue,\n  _BinaryenBlockSetChildAt,\n  _BinaryenCallIndirectGetTarget,\n  _BinaryenReturnGetValue,\n  _BinaryenMemoryGrowGetDelta,\n  _BinaryenAtomicRMWGetPtr,\n  _BinaryenAtomicRMWGetValue,\n  _BinaryenAtomicCmpxchgGetPtr,\n  _BinaryenAtomicCmpxchgGetExpected,\n  _BinaryenAtomicCmpxchgGetReplacement,\n  _BinaryenAtomicWaitGetPtr,\n  _BinaryenAtomicWaitGetExpected,\n  _BinaryenAtomicWaitGetTimeout,\n  _BinaryenAtomicNotifyGetPtr,\n  _BinaryenSIMDExtractGetVec,\n  _BinaryenSIMDReplaceGetVec,\n  _BinaryenSIMDReplaceGetValue,\n  _BinaryenSIMDShuffleGetLeft,\n  _BinaryenSIMDShuffleGetRight,\n  _BinaryenSIMDTernaryGetA,\n  _BinaryenSIMDTernaryGetB,\n  _BinaryenSIMDTernaryGetC,\n  _BinaryenSIMDShiftGetVec,\n  _BinaryenSIMDShiftGetShift,\n  _BinaryenSIMDLoadGetPtr,\n  _BinaryenMemoryInitGetDest,\n  _BinaryenMemoryInitGetOffset,\n  _BinaryenMemoryInitGetSize,\n  _BinaryenMemoryCopyGetDest,\n  _BinaryenMemoryCopyGetSource,\n  _BinaryenMemoryCopyGetSize,\n  _BinaryenMemoryFillGetDest,\n  _BinaryenMemoryFillGetValue,\n  _BinaryenMemoryFillGetSize,\n  _BinaryenRefIsGetValue,\n  _BinaryenTryGetBody,\n  _BinaryenTryGetNumCatchBodies,\n  _BinaryenTryGetCatchBodyAt,\n  _BinaryenThrowGetNumOperands,\n  _BinaryenThrowGetOperandAt,\n  _BinaryenTupleMakeGetOperandAt,\n  _BinaryenTupleMakeGetNumOperands,\n  _BinaryenIfSetCondition,\n  _BinaryenIfSetIfTrue,\n  _BinaryenIfSetIfFalse,\n  _BinaryenLoopSetBody,\n  _BinaryenBreakSetCondition,\n  _BinaryenBreakSetValue,\n  _BinaryenSwitchSetCondition,\n  _BinaryenSwitchSetValue,\n  _BinaryenCallSetOperandAt,\n  _BinaryenCallIndirectSetTarget,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenLocalSetSetValue,\n  _BinaryenGlobalSetSetValue,\n  _BinaryenLoadSetPtr,\n  _BinaryenStoreSetPtr,\n  _BinaryenStoreSetValue,\n  _BinaryenUnarySetValue,\n  _BinaryenExpressionFinalize,\n  _BinaryenBinarySetLeft,\n  _BinaryenBinarySetRight,\n  _BinaryenSelectSetIfTrue,\n  _BinaryenSelectSetIfFalse,\n  _BinaryenSelectSetCondition,\n  _BinaryenDropSetValue,\n  _BinaryenReturnSetValue,\n  _BinaryenMemoryGrowSetDelta,\n  _BinaryenAtomicRMWSetPtr,\n  _BinaryenAtomicRMWSetValue,\n  _BinaryenAtomicCmpxchgSetPtr,\n  _BinaryenAtomicCmpxchgSetExpected,\n  _BinaryenAtomicCmpxchgSetReplacement,\n  _BinaryenAtomicWaitSetPtr,\n  _BinaryenAtomicWaitSetExpected,\n  _BinaryenAtomicWaitSetTimeout,\n  _BinaryenAtomicNotifySetPtr,\n  _BinaryenSIMDExtractSetVec,\n  _BinaryenSIMDReplaceSetVec,\n  _BinaryenSIMDReplaceSetValue,\n  _BinaryenSIMDShuffleSetLeft,\n  _BinaryenSIMDShuffleSetRight,\n  _BinaryenSIMDTernarySetA,\n  _BinaryenSIMDTernarySetB,\n  _BinaryenSIMDTernarySetC,\n  _BinaryenSIMDShiftSetVec,\n  _BinaryenSIMDShiftSetShift,\n  _BinaryenSIMDLoadSetPtr,\n  _BinaryenSIMDLoadStoreLaneGetPtr,\n  _BinaryenSIMDLoadStoreLaneGetVec,\n  _BinaryenSIMDLoadStoreLaneSetPtr,\n  _BinaryenSIMDLoadStoreLaneSetVec,\n  _BinaryenMemoryInitSetDest,\n  _BinaryenMemoryInitSetOffset,\n  _BinaryenMemoryInitSetSize,\n  _BinaryenMemoryCopySetDest,\n  _BinaryenMemoryCopySetSource,\n  _BinaryenMemoryCopySetSize,\n  _BinaryenMemoryFillSetDest,\n  _BinaryenMemoryFillSetValue,\n  _BinaryenMemoryFillSetSize,\n  _BinaryenRefIsSetValue,\n  _BinaryenTrySetBody,\n  _BinaryenTrySetCatchBodyAt,\n  _BinaryenThrowSetOperandAt,\n  _BinaryenTupleMakeSetOperandAt,\n  _BinaryenBlockGetName,\n  _BinaryenLoopGetName,\n  _BinaryenBreakGetName,\n  _BinaryenSwitchGetDefaultName,\n  _BinaryenSwitchGetNumNames,\n  _BinaryenSwitchGetNameAt,\n  _BinaryenCallGetTarget,\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenGlobalGetGetName,\n  _BinaryenGlobalSetGetName,\n  _BinaryenAtomicNotifyGetNotifyCount,\n  _BinaryenAtomicNotifySetNotifyCount,\n  _BinaryenRefFuncGetFunc,\n  _BinaryenThrowGetTag,\n  _BinaryenTupleExtractGetTuple,\n  _BinaryenTupleExtractSetTuple,\n  _BinaryenRefEqGetLeft,\n  _BinaryenRefEqGetRight,\n  _BinaryenRefEqSetLeft,\n  _BinaryenRefEqSetRight,\n  _BinaryenFunctionSetBody,\n  _BinaryenI31NewGetValue,\n  _BinaryenI31GetGetI31,\n  _BinaryenI31NewSetValue,\n  _BinaryenI31GetSetI31\n} from \"../glue/binaryen\";\n\n/** Base class of custom Binaryen visitors. */\nexport abstract class Visitor {\n  /** Expression stack. */\n  private stack: ExpressionRef[] = new Array<ExpressionRef>();\n\n  /** Gets the current expression being walked. */\n  get currentExpression(): ExpressionRef {\n    var currentExpression = this._currentExpression;\n    if (!currentExpression) throw new Error(\"not walking expressions\");\n    return currentExpression;\n  }\n  _currentExpression: ExpressionRef = 0;\n\n  /** Gets the parent expression of the current expression being walked. Returns zero if already the top-most expression. */\n  get parentExpressionOrNull(): ExpressionRef {\n    var stack = this.stack;\n    var length = stack.length;\n    return length ? stack[length - 1] : 0;\n  }\n\n  // Expressions\n\n  visitBlock(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitIf(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLoop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBreak(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSwitch(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallPre(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCall(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallIndirectPre(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallIndirect(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLocalGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLocalSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitGlobalGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitGlobalSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLoad(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStore(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitConst(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitUnary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBinary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSelect(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitDrop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitReturn(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemorySize(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryGrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitNop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitUnreachable(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicRMW(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicCmpxchg(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicWait(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicNotify(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicFence(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDExtract(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDReplace(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDShuffle(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDTernary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDShift(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDLoad(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDLoadStoreLane(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryInit(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitDataDrop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryCopy(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryFill(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitPop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefNull(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefIs(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefFunc(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefEq(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTry(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitThrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRethrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTupleMake(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTupleExtract(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitI31New(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitI31Get(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallRef(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefTest(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefCast(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBrOn(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRttCanon(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRttSub(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructNew(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayNew(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArraySet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayLen(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefAs(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  // Immediates\n\n  visitName(name: StringRef): void {\n    // unimp\n  }\n\n  visitLabel(name: StringRef): void {\n    // unimp\n  }\n\n  visitIndex(index: Index): void {\n    // unimp\n  }\n\n  visitTag(name: StringRef): void {\n    // unimp\n  }\n\n  // Delegate\n\n  /** Visits any expression, delegating to the respective visitor methods. */\n  visit(expr: ExpressionRef): void {\n    let previousExpression = this._currentExpression;\n    this._currentExpression = assert(expr);\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Block: {\n        this.stack.push(expr);\n        let name = _BinaryenBlockGetName(expr);\n        if (name) this.visitLabel(name);\n        for (let i: Index = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n          this.visit(_BinaryenBlockGetChildAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitBlock(expr);\n        break;\n      }\n      case ExpressionId.If: {\n        this.stack.push(expr);\n        this.visit(_BinaryenIfGetCondition(expr));\n        this.visit(_BinaryenIfGetIfTrue(expr));\n        let ifFalse = _BinaryenIfGetIfFalse(expr);\n        if (ifFalse) this.visit(ifFalse);\n        assert(this.stack.pop() == expr);\n        this.visitIf(expr);\n        break;\n      }\n      case ExpressionId.Loop: {\n        this.stack.push(expr);\n        let name = _BinaryenLoopGetName(expr);\n        if (name) this.visitLabel(name);\n        this.visit(_BinaryenLoopGetBody(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLoop(expr);\n        break;\n      }\n      case ExpressionId.Break: {\n        this.stack.push(expr);\n        this.visitLabel(_BinaryenBreakGetName(expr));\n        let condition = _BinaryenBreakGetCondition(expr);\n        if (condition) this.visit(condition);\n        let value = _BinaryenBreakGetValue(expr);\n        if (value) this.visit(value);\n        assert(this.stack.pop() == expr);\n        this.visitBreak(expr);\n        break;\n      }\n      case ExpressionId.Switch: {\n        this.stack.push(expr);\n        let defaultName = _BinaryenSwitchGetDefaultName(expr);\n        if (defaultName) this.visitLabel(defaultName);\n        let numNames = _BinaryenSwitchGetNumNames(expr);\n        for (let i: Index = 0; i < numNames; ++i) {\n          this.visitLabel(_BinaryenSwitchGetNameAt(expr, i));\n        }\n        this.visit(_BinaryenSwitchGetCondition(expr));\n        let value = _BinaryenSwitchGetValue(expr);\n        if (value) this.visit(value);\n        assert(this.stack.pop() == expr);\n        this.visitSwitch(expr);\n        break;\n      }\n      case ExpressionId.Call: {\n        this.visitCallPre(expr);\n        this.stack.push(expr);\n        this.visitName(_BinaryenCallGetTarget(expr));\n        let numOperands = _BinaryenCallGetNumOperands(expr);\n        for (let i: Index = 0; i < numOperands; ++i) {\n          this.visit(_BinaryenCallGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitCall(expr);\n        break;\n      }\n      case ExpressionId.CallIndirect: {\n        this.visitCallIndirectPre(expr);\n        this.stack.push(expr);\n        this.visit(_BinaryenCallIndirectGetTarget(expr));\n        for (let i: Index = 0, k = _BinaryenCallIndirectGetNumOperands(expr); i < k; ++i) {\n          this.visit(_BinaryenCallIndirectGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitCallIndirect(expr);\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        this.stack.push(expr);\n        this.visitIndex(_BinaryenLocalGetGetIndex(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLocalGet(expr);\n        break;\n      }\n      case ExpressionId.LocalSet: {\n        this.stack.push(expr);\n        this.visitIndex(_BinaryenLocalSetGetIndex(expr));\n        this.visit(_BinaryenLocalSetGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLocalSet(expr);\n        break;\n      }\n      case ExpressionId.GlobalGet: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenGlobalGetGetName(expr));\n        assert(this.stack.pop() == expr);\n        this.visitGlobalGet(expr);\n        break;\n      }\n      case ExpressionId.GlobalSet: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenGlobalSetGetName(expr));\n        this.visit(_BinaryenGlobalSetGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitGlobalSet(expr);\n        break;\n      }\n      case ExpressionId.Load: {\n        this.stack.push(expr);\n        this.visit(_BinaryenLoadGetPtr(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLoad(expr);\n        break;\n      }\n      case ExpressionId.Store: {\n        this.stack.push(expr);\n        this.visit(_BinaryenStoreGetPtr(expr));\n        this.visit(_BinaryenStoreGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitStore(expr);\n        break;\n      }\n      case ExpressionId.Const: {\n        this.visitConst(expr);\n        break;\n      }\n      case ExpressionId.Unary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenUnaryGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitUnary(expr);\n        break;\n      }\n      case ExpressionId.Binary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenBinaryGetLeft(expr));\n        this.visit(_BinaryenBinaryGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitBinary(expr);\n        break;\n      }\n      case ExpressionId.Select: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSelectGetIfTrue(expr));\n        this.visit(_BinaryenSelectGetIfFalse(expr));\n        this.visit(_BinaryenSelectGetCondition(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSelect(expr);\n        break;\n      }\n      case ExpressionId.Drop: {\n        this.stack.push(expr);\n        this.visit(_BinaryenDropGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitDrop(expr);\n        break;\n      }\n      case ExpressionId.Return: {\n        let value = _BinaryenReturnGetValue(expr);\n        if (value) {\n          this.stack.push(expr);\n          this.visit(value);\n          assert(this.stack.pop() == expr);\n        }\n        this.visitReturn(expr);\n        break;\n      }\n      case ExpressionId.MemorySize: {\n        this.visitMemorySize(expr);\n        break;\n      }\n      case ExpressionId.MemoryGrow: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryGrowGetDelta(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryGrow(expr);\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.visitNop(expr);\n        break;\n      }\n      case ExpressionId.Unreachable: {\n        this.visitUnreachable(expr);\n        break;\n      }\n      case ExpressionId.AtomicRMW: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicRMWGetPtr(expr));\n        this.visit(_BinaryenAtomicRMWGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicRMW(expr);\n        break;\n      }\n      case ExpressionId.AtomicCmpxchg: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicCmpxchgGetPtr(expr));\n        this.visit(_BinaryenAtomicCmpxchgGetExpected(expr));\n        this.visit(_BinaryenAtomicCmpxchgGetReplacement(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicCmpxchg(expr);\n        break;\n      }\n      case ExpressionId.AtomicWait: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicWaitGetPtr(expr));\n        this.visit(_BinaryenAtomicWaitGetExpected(expr));\n        this.visit(_BinaryenAtomicWaitGetTimeout(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicWait(expr);\n        break;\n      }\n      case ExpressionId.AtomicNotify: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicNotifyGetPtr(expr));\n        this.visit(_BinaryenAtomicNotifyGetNotifyCount(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicNotify(expr);\n        break;\n      }\n      case ExpressionId.AtomicFence: {\n        this.visitAtomicFence(expr);\n        break;\n      }\n      case ExpressionId.SIMDExtract: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDExtractGetVec(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDExtract(expr);\n        break;\n      }\n      case ExpressionId.SIMDReplace: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDReplaceGetVec(expr));\n        this.visit(_BinaryenSIMDReplaceGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDReplace(expr);\n        break;\n      }\n      case ExpressionId.SIMDShuffle: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDShuffleGetLeft(expr));\n        this.visit(_BinaryenSIMDShuffleGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDShuffle(expr);\n        break;\n      }\n      case ExpressionId.SIMDTernary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDTernaryGetA(expr));\n        this.visit(_BinaryenSIMDTernaryGetB(expr));\n        this.visit(_BinaryenSIMDTernaryGetC(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDTernary(expr);\n        break;\n      }\n      case ExpressionId.SIMDShift: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDShiftGetVec(expr));\n        this.visit(_BinaryenSIMDShiftGetShift(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDShift(expr);\n        break;\n      }\n      case ExpressionId.SIMDLoad: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDLoadGetPtr(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDLoad(expr);\n        break;\n      }\n      case ExpressionId.SIMDLoadStoreLane: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDLoadStoreLaneGetPtr(expr));\n        this.visit(_BinaryenSIMDLoadStoreLaneGetVec(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDLoadStoreLane(expr);\n        break;\n      }\n      case ExpressionId.MemoryInit: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryInitGetDest(expr));\n        this.visit(_BinaryenMemoryInitGetOffset(expr));\n        this.visit(_BinaryenMemoryInitGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryInit(expr);\n        break;\n      }\n      case ExpressionId.DataDrop: {\n        this.visitDataDrop(expr);\n        break;\n      }\n      case ExpressionId.MemoryCopy: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryCopyGetDest(expr));\n        this.visit(_BinaryenMemoryCopyGetSource(expr));\n        this.visit(_BinaryenMemoryCopyGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryCopy(expr);\n        break;\n      }\n      case ExpressionId.MemoryFill: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryFillGetDest(expr));\n        this.visit(_BinaryenMemoryFillGetValue(expr));\n        this.visit(_BinaryenMemoryFillGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryFill(expr);\n        break;\n      }\n      case ExpressionId.Pop: {\n        this.visitPop(expr);\n        break;\n      }\n      case ExpressionId.RefNull: {\n        this.visitRefNull(expr);\n        break;\n      }\n      case ExpressionId.RefIs: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefIsGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefIs(expr);\n        break;\n      }\n      case ExpressionId.RefFunc: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenRefFuncGetFunc(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefFunc(expr);\n        break;\n      }\n      case ExpressionId.RefEq: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefEqGetLeft(expr));\n        this.visit(_BinaryenRefEqGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefEq(expr);\n        break;\n      }\n      case ExpressionId.Try: {\n        this.stack.push(expr);\n        this.visit(_BinaryenTryGetBody(expr));\n        let numCatchBodies = _BinaryenTryGetNumCatchBodies(expr);\n        for (let i: Index = 0; i < numCatchBodies; ++i) {\n          this.visit(_BinaryenTryGetCatchBodyAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitTry(expr);\n        break;\n      }\n      case ExpressionId.Throw: {\n        this.stack.push(expr);\n        this.visitTag(_BinaryenThrowGetTag(expr));\n        let numOperands = _BinaryenThrowGetNumOperands(expr);\n        for (let i: Index = 0; i < numOperands; ++i) {\n          this.visit(_BinaryenThrowGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitThrow(expr);\n        break;\n      }\n      case ExpressionId.Rethrow: {\n        this.visitRethrow(expr);\n        break;\n      }\n      case ExpressionId.TupleMake: {\n        let numOperands = _BinaryenTupleMakeGetNumOperands(expr);\n        if (numOperands) {\n          this.stack.push(expr);\n          for (let i: Index = 0; i < numOperands; ++i) {\n            this.visit(_BinaryenTupleMakeGetOperandAt(expr, i));\n          }\n          assert(this.stack.pop() == expr);\n        }\n        this.visitTupleMake(expr);\n        break;\n      }\n      case ExpressionId.TupleExtract: {\n        this.stack.push(expr);\n        this.visit(_BinaryenTupleExtractGetTuple(expr));\n        assert(this.stack.pop() == expr);\n        this.visitTupleExtract(expr);\n        break;\n      }\n      case ExpressionId.I31New: {\n        this.stack.push(expr);\n        this.visit(_BinaryenI31NewGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitI31New(expr);\n        break;\n      }\n      case ExpressionId.I31Get: {\n        this.stack.push(expr);\n        this.visit(_BinaryenI31GetGetI31(expr));\n        assert(this.stack.pop() == expr);\n        this.visitI31Get(expr);\n        break;\n      }\n      case ExpressionId.CallRef: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitCallRef(expr);\n        break;\n      }\n      case ExpressionId.RefTest: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefTest(expr);\n        break;\n      }\n      case ExpressionId.RefCast: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefCast(expr);\n        break;\n      }\n      case ExpressionId.BrOn: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitBrOn(expr);\n        break;\n      }\n      case ExpressionId.RttCanon: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRttCanon(expr);\n        break;\n      }\n      case ExpressionId.RttSub: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRttSub(expr);\n        break;\n      }\n      case ExpressionId.StructNew: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructNew(expr);\n        break;\n      }\n      case ExpressionId.StructGet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructGet(expr);\n        break;\n      }\n      case ExpressionId.StructSet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructSet(expr);\n        break;\n      }\n      case ExpressionId.ArrayNew: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayNew(expr);\n        break;\n      }\n      case ExpressionId.ArrayGet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayGet(expr);\n        break;\n      }\n      case ExpressionId.ArraySet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArraySet(expr);\n        break;\n      }\n      case ExpressionId.ArrayLen: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayLen(expr);\n        break;\n      }\n      case ExpressionId.RefAs: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefAs(expr);\n        break;\n      }\n      default: throw new Error(\"unexpected expression kind\");\n    }\n    this._currentExpression = previousExpression;\n  }\n}\n\n/** Base class of custom Binaryen passes. */\nexport abstract class Pass extends Visitor {\n\n  /** Gets the current function being walked. */\n  get currentFunction(): FunctionRef {\n    var currentFunction = this._currentFunction;\n    if (!currentFunction) throw new Error(\"not walking a function\");\n    return currentFunction;\n  }\n  private _currentFunction: FunctionRef = 0;\n\n  /** Gets the current global being walked. */\n  get currentGlobal(): GlobalRef {\n    var currentGlobal = this._currentGlobal;\n    if (!currentGlobal) throw new Error(\"not walking a global\");\n    return currentGlobal;\n  }\n  private _currentGlobal: GlobalRef = 0;\n\n  /** Constructs a new Binaryen pass. */\n  constructor(readonly module: Module) {\n    super();\n  }\n\n  // Walking\n\n  /** Walks the entire module. */\n  walkModule(): void {\n    this.walkFunctions();\n    this.walkGlobals();\n  }\n\n  /** Walks all functions. */\n  walkFunctions(): void {\n    var moduleRef = this.module.ref;\n    for (let i: Index = 0, k = _BinaryenGetNumFunctions(moduleRef); i < k; ++i) {\n      this.walkFunction(_BinaryenGetFunctionByIndex(moduleRef, i));\n    }\n  }\n\n  /** Walks a specific function. */\n  walkFunction(func: FunctionRef): void {\n    var body = _BinaryenFunctionGetBody(func);\n    if (body) {\n      this._currentFunction = func;\n      this.visit(body);\n      this._currentFunction = 0;\n    }\n  }\n\n  /** Walks all global variables. */\n  walkGlobals(): void {\n    var moduleRef = this.module.ref;\n    for (let i: Index = 0, k = _BinaryenGetNumGlobals(moduleRef); i < k; ++i) {\n      this.walkGlobal(_BinaryenGetGlobalByIndex(moduleRef, i));\n    }\n  }\n\n  /** Walks a specific global variable. */\n  walkGlobal(global: GlobalRef): void {\n    this._currentGlobal = global;\n    var init = _BinaryenGlobalGetInitExpr(global);\n    if (init) this.visit(init);\n    this._currentGlobal = 0;\n  }\n\n  // Utility\n\n  /** Replaces the current expression with the specified replacement. */\n  replaceCurrent(replacement: ExpressionRef): void {\n    var search = this.currentExpression;\n    var func = this.currentFunction;\n    var body = _BinaryenFunctionGetBody(func);\n    if (body == search) {\n      _BinaryenFunctionSetBody(func, replacement);\n    } else {\n      var parent = assert(this.parentExpressionOrNull);\n      var replaced = replaceChild(parent, search, replacement);\n      if (!replaced) throw Error(\"failed to replace expression\");\n      _BinaryenExpressionFinalize(parent);\n    }\n  }\n}\n\n/** Replaces an expression within a parent expression. Returns the replaced expression on success, otherwise `0`. */\nexport function replaceChild(\n  /** Parent expression containing `search`. */\n  parent: ExpressionRef,\n  /** Expression to replace. */\n  search: ExpressionRef,\n  /** Expression to replace `search` with. */\n  replacement: ExpressionRef\n): ExpressionRef {\n  switch (_BinaryenExpressionGetId(parent)) {\n    case ExpressionId.Block: {\n      let numChildren = _BinaryenBlockGetNumChildren(parent);\n      for (let i: Index = 0; i < numChildren; ++i) {\n        let child = _BinaryenBlockGetChildAt(parent, i);\n        if (child == search) {\n          _BinaryenBlockSetChildAt(parent, i, replacement);\n          return child;\n        }\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      let condition = _BinaryenIfGetCondition(parent);\n      if (condition == search) {\n        _BinaryenIfSetCondition(parent, replacement);\n        return condition;\n      }\n      let ifTrue = _BinaryenIfGetIfTrue(parent);\n      if (ifTrue == search) {\n        _BinaryenIfSetIfTrue(parent, replacement);\n        return ifTrue;\n      }\n      let ifFalse = _BinaryenIfGetIfFalse(parent);\n      if (ifFalse == search) {\n        _BinaryenIfSetIfFalse(parent, replacement);\n        return ifFalse;\n      }\n      break;\n    }\n    case ExpressionId.Loop: {\n      let body = _BinaryenLoopGetBody(parent);\n      if (body == search) {\n        _BinaryenLoopSetBody(parent, replacement);\n        return body;\n      }\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(parent);\n      if (condition == search) {\n        _BinaryenBreakSetCondition(parent, replacement);\n        return condition;\n      }\n      let value = _BinaryenBreakGetValue(parent);\n      if (value == search) {\n        _BinaryenBreakSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Switch: {\n      let condition = _BinaryenSwitchGetCondition(parent);\n      if (condition == search) {\n        _BinaryenSwitchSetCondition(parent, replacement);\n        return condition;\n      }\n      let value = _BinaryenSwitchGetValue(parent);\n      if (value == search) {\n        _BinaryenSwitchSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Call: {\n      let numOperands = _BinaryenCallGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenCallGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenCallSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      let target = _BinaryenCallIndirectGetTarget(parent);\n      if (target == search) {\n        _BinaryenCallIndirectSetTarget(parent, replacement);\n        return target;\n      }\n      let numOperands = _BinaryenCallIndirectGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenCallIndirectGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenCallIndirectSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      let value = _BinaryenLocalSetGetValue(parent);\n      if (value == search) {\n        _BinaryenLocalSetSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      let value = _BinaryenGlobalSetGetValue(parent);\n      if (value == search) {\n        _BinaryenGlobalSetSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Load: {\n      let ptr = _BinaryenLoadGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenLoadSetPtr(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.Store: {\n      let ptr = _BinaryenStoreGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenStoreSetPtr(parent, replacement);\n        return ptr;\n      }\n      let value = _BinaryenStoreGetValue(parent);\n      if (value == search) {\n        _BinaryenStoreSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      let value = _BinaryenUnaryGetValue(parent);\n      if (value == search) {\n        _BinaryenUnarySetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Binary: {\n      let left = _BinaryenBinaryGetLeft(parent);\n      if (left == search) {\n        _BinaryenBinarySetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenBinaryGetRight(parent);\n      if (right == search) {\n        _BinaryenBinarySetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.Select: {\n      let ifTrue = _BinaryenSelectGetIfTrue(parent);\n      if (ifTrue == search) {\n        _BinaryenSelectSetIfTrue(parent, replacement);\n        return ifTrue;\n      }\n      let ifFalse = _BinaryenSelectGetIfFalse(parent);\n      if (ifFalse == search) {\n        _BinaryenSelectSetIfFalse(parent, replacement);\n        return ifFalse;\n      }\n      let condition = _BinaryenSelectGetCondition(parent);\n      if (condition == search) {\n        _BinaryenSelectSetCondition(parent, replacement);\n        return condition;\n      }\n      break;\n    }\n    case ExpressionId.Drop: {\n      let value = _BinaryenDropGetValue(parent);\n      if (value == search) {\n        _BinaryenDropSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Return: {\n      let value = _BinaryenReturnGetValue(parent);\n      if (value == search) {\n        _BinaryenReturnSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.MemorySize: {\n      break;\n    }\n    case ExpressionId.MemoryGrow: {\n      let delta = _BinaryenMemoryGrowGetDelta(parent);\n      if (delta == search) {\n        _BinaryenMemoryGrowSetDelta(parent, replacement);\n        return delta;\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      let ptr = _BinaryenAtomicRMWGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicRMWSetPtr(parent, replacement);\n        return ptr;\n      }\n      let value = _BinaryenAtomicRMWGetValue(parent);\n      if (value == search) {\n        _BinaryenAtomicRMWSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      let ptr = _BinaryenAtomicCmpxchgGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicCmpxchgSetPtr(parent, replacement);\n        return ptr;\n      }\n      let expected = _BinaryenAtomicCmpxchgGetExpected(parent);\n      if (expected == search) {\n        _BinaryenAtomicCmpxchgSetExpected(parent, replacement);\n        return expected;\n      }\n      let repl = _BinaryenAtomicCmpxchgGetReplacement(parent);\n      if (repl == search) {\n        _BinaryenAtomicCmpxchgSetReplacement(parent, replacement);\n        return repl;\n      }\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      let ptr = _BinaryenAtomicWaitGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicWaitSetPtr(parent, replacement);\n        return ptr;\n      }\n      let expected = _BinaryenAtomicWaitGetExpected(parent);\n      if (expected == search) {\n        _BinaryenAtomicWaitSetExpected(parent, replacement);\n        return expected;\n      }\n      let timeout = _BinaryenAtomicWaitGetTimeout(parent);\n      if (timeout == search) {\n        _BinaryenAtomicWaitSetTimeout(parent, replacement);\n        return timeout;\n      }\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      let ptr = _BinaryenAtomicNotifyGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicNotifySetPtr(parent, replacement);\n        return ptr;\n      }\n      let notifyCount = _BinaryenAtomicNotifyGetNotifyCount(parent);\n      if (notifyCount == search) {\n        _BinaryenAtomicNotifySetNotifyCount(parent, replacement);\n        return notifyCount;\n      }\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      let vec = _BinaryenSIMDExtractGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDExtractSetVec(parent, replacement);\n        return vec;\n      }\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      let vec = _BinaryenSIMDReplaceGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDReplaceSetVec(parent, replacement);\n        return vec;\n      }\n      let value = _BinaryenSIMDReplaceGetValue(parent);\n      if (value == search) {\n        _BinaryenSIMDReplaceSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      let left = _BinaryenSIMDShuffleGetLeft(parent);\n      if (left == search) {\n        _BinaryenSIMDShuffleSetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenSIMDShuffleGetRight(parent);\n      if (right == search) {\n        _BinaryenSIMDShuffleSetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      let a = _BinaryenSIMDTernaryGetA(parent);\n      if (a == search) {\n        _BinaryenSIMDTernarySetA(parent, replacement);\n        return a;\n      }\n      let b = _BinaryenSIMDTernaryGetB(parent);\n      if (b == search) {\n        _BinaryenSIMDTernarySetB(parent, replacement);\n        return b;\n      }\n      let c = _BinaryenSIMDTernaryGetC(parent);\n      if (c == search) {\n        _BinaryenSIMDTernarySetC(parent, replacement);\n        return c;\n      }\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      let vec = _BinaryenSIMDShiftGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDShiftSetVec(parent, replacement);\n        return vec;\n      }\n      let shift = _BinaryenSIMDShiftGetShift(parent);\n      if (shift == search) {\n        _BinaryenSIMDShiftSetShift(parent, replacement);\n        return shift;\n      }\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      let ptr = _BinaryenSIMDLoadGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenSIMDLoadSetPtr(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.SIMDLoadStoreLane: {\n      let ptr = _BinaryenSIMDLoadStoreLaneGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenSIMDLoadStoreLaneSetPtr(parent, replacement);\n        return ptr;\n      }\n      let vec = _BinaryenSIMDLoadStoreLaneGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDLoadStoreLaneSetVec(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      let dest = _BinaryenMemoryInitGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryInitSetDest(parent, replacement);\n        return dest;\n      }\n      let offset = _BinaryenMemoryInitGetOffset(parent);\n      if (offset == search) {\n        _BinaryenMemoryInitSetOffset(parent, replacement);\n        return offset;\n      }\n      let size = _BinaryenMemoryInitGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryInitSetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      let dest = _BinaryenMemoryCopyGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryCopySetDest(parent, replacement);\n        return dest;\n      }\n      let source = _BinaryenMemoryCopyGetSource(parent);\n      if (source == search) {\n        _BinaryenMemoryCopySetSource(parent, replacement);\n        return source;\n      }\n      let size = _BinaryenMemoryCopyGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryCopySetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      let dest = _BinaryenMemoryFillGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryFillSetDest(parent, replacement);\n        return dest;\n      }\n      let value = _BinaryenMemoryFillGetValue(parent);\n      if (value == search) {\n        _BinaryenMemoryFillSetValue(parent, replacement);\n        return value;\n      }\n      let size = _BinaryenMemoryFillGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryFillSetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIs: {\n      let value = _BinaryenRefIsGetValue(parent);\n      if (value == search) {\n        _BinaryenRefIsSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.RefEq: {\n      let left = _BinaryenRefEqGetLeft(parent);\n      if (left == search) {\n        _BinaryenRefEqSetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenRefEqGetRight(parent);\n      if (right == search) {\n        _BinaryenRefEqSetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.Try: {\n      let body = _BinaryenTryGetBody(parent);\n      if (body == search) {\n        _BinaryenTrySetBody(parent, replacement);\n        return body;\n      }\n      let numCatchBodies = _BinaryenTryGetNumCatchBodies(parent);\n      for (let i: Index = 0; i < numCatchBodies; ++i) {\n        let catchBody = _BinaryenTryGetCatchBodyAt(parent, i);\n        if (catchBody == search) {\n          _BinaryenTrySetCatchBodyAt(parent, i, replacement);\n          return catchBody;\n        }\n      }\n      break;\n    }\n    case ExpressionId.Throw: {\n      let numOperands = _BinaryenThrowGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenThrowGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenThrowSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      let numOperands = _BinaryenTupleMakeGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenTupleMakeGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenTupleMakeSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      let tuple = _BinaryenTupleExtractGetTuple(parent);\n      if (tuple == search) {\n        _BinaryenTupleExtractSetTuple(parent, replacement);\n        return tuple;\n      }\n      break;\n    }\n    case ExpressionId.I31New: {\n      let value = _BinaryenI31NewGetValue(parent);\n      if (value == search) {\n        _BinaryenI31NewSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.I31Get: {\n      let i31Expr = _BinaryenI31GetGetI31(parent);\n      if (i31Expr == search) {\n        _BinaryenI31GetSetI31(parent, replacement);\n        return i31Expr;\n      }\n      break;\n    }\n    case ExpressionId.CallRef: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefTest: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefCast: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.BrOn: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RttCanon: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RttSub: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructNew: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructGet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructSet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayNew: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayGet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArraySet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayLen: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefAs: {\n      assert(false); // TODO\n      break;\n    }\n    default: throw new Error(\"unexpected expression id\");\n  }\n  return 0;\n}\n","/**\n * @fileoverview A lightweight store instrumentation pass.\n * \n * Can be used to find rogue stores to protected memory addresses like object\n * headers or similar, without going overboard with instrumentation. Also\n * passes a flag whether a store originates within the runtime or other code.\n * \n * @license Apache-2.0\n */\n\nimport {\n  Pass\n} from \"./pass\";\n\nimport {\n  Compiler\n} from \"../compiler\";\n\nimport {\n  createType,\n  ExpressionRef,\n  TypeRef\n} from \"../module\";\n\nimport {\n  _BinaryenFunctionGetName,\n  _BinaryenStoreGetBytes,\n  _BinaryenStoreGetOffset,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreSetPtr\n} from \"../glue/binaryen\";\n\n/** Instruments stores to also call an import. */\nexport class RtraceMemory extends Pass {\n  /** Whether we've seen any stores. */\n  seenStores: bool = false;\n  /** Target pointer type. */\n  ptrType: TypeRef;\n\n  constructor(compiler: Compiler) {\n    super(compiler.module);\n    this.ptrType = compiler.options.sizeTypeRef;\n  }\n\n  checkRT(): bool {\n    var functionName = this.module.readStringCached(_BinaryenFunctionGetName(this.currentFunction))!;\n    return functionName.startsWith(\"~lib/rt/\");\n  }\n\n  /** @override */\n  visitStore(store: ExpressionRef): void {\n    var module = this.module;\n    var ptr = _BinaryenStoreGetPtr(store);\n    var offset = _BinaryenStoreGetOffset(store);\n    var bytes = _BinaryenStoreGetBytes(store);\n    // onstore(ptr: usize, offset: i32, bytes: i32, isRT: bool) -> ptr\n    _BinaryenStoreSetPtr(store,\n      module.call(\"~onstore\", [\n        ptr,\n        module.i32(offset),\n        module.i32(bytes),\n        module.i32(i32(this.checkRT()))\n      ], this.ptrType)\n    );\n    this.seenStores = true;\n  }\n\n  // TODO: MemoryFill, Atomics\n\n  /** @override */\n  walkModule(): void {\n    super.walkModule();\n    if (this.seenStores) {\n      this.module.addFunctionImport(\"~onstore\", \"rtrace\", \"onstore\",\n        createType([ this.ptrType, TypeRef.I32, TypeRef.I32, TypeRef.I32 ]),\n        this.ptrType\n      );\n    }\n  }\n}\n","/**\n * @fileoverview Shadow stack instrumentation for a precise GC.\n * \n * Instruments function arguments and local assignments marked with a 'tostack'\n * call to also do stores to a shadow stack of managed values only.\n * \n * Consider a simple call to a function looking like the following, taking\n * managed arguments, plus assigning managed values to locals:\n * \n *   function foo(a: Obj, b: Obj): Obj {\n *     var c = __tostack(a) // slot 2\n *     __collect()\n *     return b\n *   }\n *   \n *   foo(__tostack(a), __tostack(b)) // slot 0, 1\n * \n * At the call to `__collect()` the 32-bit stack frame of the function is:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed argument 'a'\n *      4   | Second managed argument 'b'\n *   -------|----------------------------\n *      8   | First managed local 'c'\n * \n * We are splitting the frame in two halves as annotated since both halves are\n * only known separately for indirect calls, with the first half becoming an\n * extension of the calling function's stack frame by means of treating the\n * arguments as if these were locals beyond the caller's `numLocals`. Function\n * arguments stay a bit longer on the stack than usually, but we also don't have\n * to modify the stack pointer pre-call at all this way. The caller's amended\n * stack frame when assuming one managed local may look like this:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local '?'\n *      4   | Extended with first managed argument 'a'\n *      8   | Extended with second managed argument 'b'\n * \n * with the callee's stack frame becoming just:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local 'c'\n * \n * Instrumentation added below looks about like the following, with the stack\n * growing downwards and 't' and 'r' being new temporary locals:\n * \n *   // callee frameSize = 1 * sizeof<usize>()\n *   function foo(a: usize, b: usize): usize {\n *     memory.fill(__stack_pointer -= frameSize, 0, frameSize)\n *     store<usize>(__stack_pointer, c = a, 0 * sizeof<usize>())\n *     __collect()\n *     var r = b\n *     __stack_pointer += frameSize\n *     return r\n *   }\n * \n *   // caller frameSize = (numLocalSlots + 2 [by extension]) * sizeof<usize>()\n *   (\n *     r = foo(\n *       ( t = a,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 0) * sizeof<usize>()),\n *         t ),\n *       ( t = b,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 1) * sizeof<usize>()),\n *         t )\n *     ),\n *     r\n *   )\n * \n * Also note that we have to `memory.fill` the second half because the first\n * assignment to a local may happen at a later point within the function. The\n * invariant we need to maintain for a precise GC is that it only sees zeroes\n * or valid pointers, but never an invalid pointer left on the stack earlier.\n * Since most frames are small, we unroll a sequence of `store`s up to a frame\n * size of 16 bytes, and `memory.fill`, if available, beyond.\n * \n * @license Apache-2.0\n */\n\nimport {\n  Pass\n} from \"./pass\";\n\nimport {\n  _BinaryenAddFunction,\n  _BinaryenAddFunctionExport,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallGetTarget,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenCallSetOperandAt,\n  _BinaryenExportGetKind,\n  _BinaryenExportGetName,\n  _BinaryenExportGetValue,\n  _BinaryenExpressionGetId,\n  _BinaryenExpressionGetType,\n  _BinaryenFunctionGetBody,\n  _BinaryenFunctionGetName,\n  _BinaryenFunctionGetNumLocals,\n  _BinaryenFunctionGetNumVars,\n  _BinaryenFunctionGetParams,\n  _BinaryenFunctionGetResults,\n  _BinaryenFunctionGetVar,\n  _BinaryenFunctionSetBody,\n  _BinaryenGetExport,\n  _BinaryenGetFunction,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenLocalSetGetValue,\n  _BinaryenLocalSetIsTee,\n  _BinaryenLocalSetSetValue,\n  _BinaryenRemoveExport,\n  _BinaryenRemoveFunction,\n  _BinaryenReturnGetValue,\n  _BinaryenReturnSetValue,\n  _free\n} from \"../glue/binaryen\";\n\nimport {\n  ExpressionId,\n  ExpressionRef,\n  FunctionRef,\n  Index,\n  BinaryOp,\n  TypeRef,\n  allocPtrArray,\n  Module,\n  ExternalKind,\n  ExportRef,\n  expandType,\n  isConstZero\n} from \"../module\";\n\nimport {\n  Compiler,\n  Options\n} from \"../compiler\";\n\nimport {\n  Feature\n} from \"../common\";\n\nimport {\n  BuiltinNames\n} from \"../builtins\";\n\ntype LocalIndex = Index;\ntype SlotIndex = Index;\ntype SlotMap = Map<LocalIndex,SlotIndex>;\ntype TempMap = Map<TypeRef,LocalIndex>;\n\n/** Attempts to match the `__tostack(value)` pattern. Returns `value` if a match, otherwise `0`.  */\nfunction matchPattern(module: Module, expr: ExpressionRef): ExpressionRef {\n  if (_BinaryenExpressionGetId(expr) == ExpressionId.Call && module.readStringCached(_BinaryenCallGetTarget(expr)) == BuiltinNames.tostack) {\n    assert(_BinaryenCallGetNumOperands(expr) == 1);\n    return _BinaryenCallGetOperandAt(expr, 0);\n  }\n  return 0;\n}\n\n/** Tests whether a `value` matched by `matchTostack` needs a slot. */\nfunction needsSlot(module: Module, value: ExpressionRef): bool {\n  switch (_BinaryenExpressionGetId(value)) {\n    // no need to stack null pointers\n    case ExpressionId.Const: return !isConstZero(value);\n    // already kept in another slot\n    case ExpressionId.LocalGet:\n    case ExpressionId.LocalSet: return false; // tee\n  }\n  return true;\n}\n\n/** Instruments a module with a shadow stack for precise GC. */\nexport class ShadowStackPass extends Pass {\n  /** Stack frame slots, per function. */\n  slotMaps: Map<FunctionRef, SlotMap> = new Map();\n  /** Temporary locals, per function. */\n  tempMaps: Map<FunctionRef, TempMap> = new Map();\n  /** Exports (with managed operands) map. */\n  exportMap: Map<string,i32[]> = new Map();\n  /** Compiler reference. */\n  compiler: Compiler;\n\n  constructor(compiler: Compiler) {\n    super(compiler.module);\n    this.compiler = compiler;\n  }\n\n  /** Compiler options. */\n  get options(): Options { return this.compiler.options; }\n  /** Target pointer type. */\n  get ptrType(): TypeRef { return this.options.sizeTypeRef; }\n  /** Target pointer size. */\n  get ptrSize(): i32 { return this.ptrType == TypeRef.I64 ? 8 : 4; }\n  /** Target pointer addition operation. */\n  get ptrBinaryAdd(): BinaryOp { return this.ptrType == TypeRef.I64 ? BinaryOp.AddI64 : BinaryOp.AddI32; }\n  /** Target pointer subtraction operation. */\n  get ptrBinarySub(): BinaryOp { return this.ptrType == TypeRef.I64 ? BinaryOp.SubI64 : BinaryOp.SubI32; }\n\n  /** Gets a constant with the specified value of the target pointer type. */\n  ptrConst(value: i32): ExpressionRef {\n    return this.ptrType == TypeRef.I64\n      ? this.module.i64(value)\n      : this.module.i32(value);\n  }\n\n  /** Notes the presence of a slot for the specified (imaginary) local, returning the slot index. */\n  noteSlot(func: FunctionRef, localIndex: Index): i32 {\n    let slotMap: SlotMap;\n    if (this.slotMaps.has(func)) {\n      slotMap = changetype<SlotMap>(this.slotMaps.get(func));\n      if (slotMap.has(localIndex)) {\n        return changetype<i32>(slotMap.get(localIndex));\n      }\n    } else {\n      slotMap = new Map();\n      this.slotMaps.set(func, slotMap);\n    }\n    let slotIndex = slotMap.size;\n    slotMap.set(localIndex, slotIndex);\n    return slotIndex;\n  }\n\n  /** Notes the presence of an exported function taking managed operands. */\n  noteExport(name: string, managedOperandIndices: i32[]): void {\n    if (!managedOperandIndices.length) return;\n    this.exportMap.set(name, managedOperandIndices);\n  }\n\n  /** Gets a shared temporary local of the given type in the specified functions. */\n  getSharedTemp(func: FunctionRef, type: TypeRef): Index {\n    let tempMap: TempMap;\n    if (this.tempMaps.has(func)) {\n      tempMap = changetype<TempMap>(this.tempMaps.get(func));\n      if (tempMap.has(type)) {\n        return changetype<Index>(tempMap.get(type));\n      }\n    } else {\n      tempMap = new Map();\n      this.tempMaps.set(func, tempMap);\n    }\n    let numLocals = _BinaryenFunctionGetNumLocals(func);\n    let localIndex = numLocals + tempMap.size;\n    tempMap.set(type, localIndex);\n    return localIndex;\n  }\n\n  /** Makes an expression modifying the stack pointer by the given offset. */\n  makeStackOffset(offset: i32): ExpressionRef {\n    assert(offset != 0);\n    var module = this.module;\n    var expr = module.global_set(BuiltinNames.stack_pointer,\n      module.binary(offset >= 0 ? this.ptrBinaryAdd : this.ptrBinarySub,\n        module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n        this.ptrConst(abs(offset))\n      )\n    );\n    if (offset > 0) return expr;\n    return module.block(null, [\n      expr,\n      this.makeStackCheck()\n    ], TypeRef.None);\n  }\n\n  /** Makes a sequence of expressions zeroing the stack frame. */\n  makeStackFill(frameSize: i32, stmts: ExpressionRef[]): void {\n    assert(frameSize > 0);\n    var module = this.module;\n    if (this.options.hasFeature(Feature.BULK_MEMORY) && frameSize > 16) {\n      stmts.push(\n        module.memory_fill(\n          module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n          module.i32(0), // TODO: Wasm64 also i32?\n          this.ptrConst(frameSize)\n        )\n      );\n    } else {\n      let remain = frameSize;\n      while (remain >= 8) {\n        // store<i64>(__stack_pointer, 0, frameSize - remain)\n        stmts.push(\n          module.store(8,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.i64(0),\n            TypeRef.I64,\n            frameSize - remain\n          )\n        );\n        remain -= 8;\n      }\n      if (remain) {\n        assert(remain == 4);\n        // store<i32>(__stack_pointer, 0, frameSize - remain)\n        stmts.push(\n          module.store(4,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.i32(0),\n            TypeRef.I32,\n            frameSize - remain\n          )\n        );\n      }\n    }\n  }\n\n  private hasStackCheckFunction: bool = false;\n\n  /** Makes a check that the current stack pointer is valid. */\n  makeStackCheck(): ExpressionRef {\n    var module = this.module;\n    if (!this.hasStackCheckFunction) {\n      this.hasStackCheckFunction = true;\n      module.addFunction(\"~stack_check\", TypeRef.None, TypeRef.None, null,\n        module.if(\n          module.binary(BinaryOp.LtI32,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.global_get(BuiltinNames.data_end, this.ptrType)\n          ),\n          this.compiler.makeStaticAbort(this.compiler.ensureStaticString(\"stack overflow\"), this.compiler.program.nativeSource)\n        )\n      );\n    }\n    return module.call(\"~stack_check\", null, TypeRef.None);\n  }\n\n  private updateCallOperands(operands: ExpressionRef[]): i32 {\n    var module = this.module;\n    var numSlots = 0;\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      let operand = operands[i];\n      let match = matchPattern(module, operand);\n      if (!match) continue;\n      if (!needsSlot(module, match)) {\n        operands[i] = match;\n        continue;\n      }\n      let currentFunction = this.currentFunction;\n      let numLocals = _BinaryenFunctionGetNumLocals(currentFunction);\n      let slotIndex = this.noteSlot(currentFunction, numLocals + this.callSlotOffset + i);\n      let temp = this.getSharedTemp(currentFunction, this.ptrType);\n      let stmts = new Array<ExpressionRef>();\n      // t = value\n      stmts.push(\n        module.local_set(temp, match, false)\n      );\n      // store<usize>(__stack_pointer, t, slotIndex * ptrSize)\n      stmts.push(\n        module.store(this.ptrSize,\n          module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n          module.local_get(temp, this.ptrType),\n          this.ptrType, slotIndex * this.ptrSize\n        )\n      );\n      // -> t\n      stmts.push(\n        module.local_get(temp, this.ptrType)\n      );\n      operands[i] = module.block(null, stmts, this.ptrType);\n      ++numSlots;\n    }\n    return numSlots;\n  }\n\n  /** Slot offset accounting for nested calls. */\n  private callSlotOffset: i32 = 0;\n  /** Slot offset stack in nested calls. */\n  private callSlotStack: i32[] = new Array();\n\n  /** @override */\n  visitCallPre(call: ExpressionRef): void {\n    var numOperands = _BinaryenCallGetNumOperands(call);\n    var operands = new Array<ExpressionRef>(numOperands);\n    for (let i: Index = 0; i < numOperands; ++i) {\n      operands[i] = _BinaryenCallGetOperandAt(call, i);\n    }\n    let numSlots = this.updateCallOperands(operands);\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      _BinaryenCallSetOperandAt(call, i, operands[i]);\n    }\n    if (numSlots) {\n      // Reserve these slots for us so nested calls use their own\n      this.callSlotOffset += numSlots;\n    }\n    this.callSlotStack.push(numSlots);\n  }\n\n  /** @override */\n  visitCall(call: ExpressionRef): void {\n    let numSlots = this.callSlotStack.pop();\n    if (numSlots) this.callSlotOffset -= numSlots;\n  }\n\n  /** @override */\n  visitCallIndirectPre(callIndirect: ExpressionRef): void {\n    let numOperands = _BinaryenCallIndirectGetNumOperands(callIndirect);\n    let operands = new Array<ExpressionRef>(numOperands);\n    for (let i: Index = 0; i < numOperands; ++i) {\n      operands[i] = _BinaryenCallIndirectGetOperandAt(callIndirect, i);\n    }\n    let numSlots = this.updateCallOperands(operands);\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      _BinaryenCallIndirectSetOperandAt(callIndirect, i, operands[i]);\n    }\n    if (numSlots) {\n      // Reserve these slots for us so nested calls use their own\n      this.callSlotOffset += numSlots;\n    }\n    this.callSlotStack.push(numSlots);\n  }\n\n  /** @override */\n  visitCallIndirect(callIndirect: ExpressionRef): void {\n    let numSlots = this.callSlotStack.pop();\n    if (numSlots) this.callSlotOffset -= numSlots;\n  }\n\n  /** @override */\n  visitLocalSet(localSet: ExpressionRef): void {\n    let module = this.module;\n    let value = _BinaryenLocalSetGetValue(localSet);\n    let match = matchPattern(module, value);\n    if (!match) return;\n    if (!needsSlot(module, match)) {\n      _BinaryenLocalSetSetValue(localSet, match);\n      return;\n    }\n    let index = _BinaryenLocalSetGetIndex(localSet);\n    let slotIndex = this.noteSlot(this.currentFunction, index);\n    let stmts = new Array<ExpressionRef>();\n    // store<usize>(__stack_pointer, local = match, slotIndex * ptrSize)\n    stmts.push(\n      module.store(this.ptrSize,\n        module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n        module.local_tee(index, match, false),\n        this.ptrType, slotIndex * this.ptrSize\n      )\n    );\n    if (_BinaryenLocalSetIsTee(localSet)) {\n      // -> local\n      stmts.push(\n        module.local_get(index, this.ptrType)\n      );\n      this.replaceCurrent(module.flatten(stmts, this.ptrType));\n    } else {\n      this.replaceCurrent(module.flatten(stmts, TypeRef.None));\n    }\n  }\n\n  /** Updates a function with additional locals etc. */\n  updateFunction(funcRef: FunctionRef): void {\n    let name = _BinaryenFunctionGetName(funcRef);\n    let params = _BinaryenFunctionGetParams(funcRef);\n    let results = _BinaryenFunctionGetResults(funcRef);\n    let body = assert(_BinaryenFunctionGetBody(funcRef));\n    let numVars = _BinaryenFunctionGetNumVars(funcRef);\n    let vars = new Array<TypeRef>();\n    for (let i: Index = 0; i < numVars; ++i) {\n      vars[i] = _BinaryenFunctionGetVar(funcRef, i);\n    }\n    let tempMaps = this.tempMaps;\n    if (tempMaps.has(funcRef)) {\n      let tempMap = changetype<TempMap>(tempMaps.get(funcRef));\n      for (let _keys = Map_keys(tempMap), i = 0, k = _keys.length; i < k; ++i) {\n        vars.push(_keys[i]);\n      }\n    }\n    let moduleRef = this.module.ref;\n    _BinaryenRemoveFunction(moduleRef, name);\n    let cArr = allocPtrArray(vars);\n    _BinaryenAddFunction(moduleRef, name, params, results, cArr, vars.length, body);\n    _free(cArr);\n  }\n\n  /** Updates a function export taking managed arguments. */\n  updateExport(exportRef: ExportRef, managedOperandIndices: i32[]): void {\n    var module = this.module;\n    var moduleRef = module.ref;\n    assert(_BinaryenExportGetKind(exportRef) == ExternalKind.Function);\n\n    var internalNameRef = _BinaryenExportGetValue(exportRef);\n    var internalName = module.readStringCached(internalNameRef)!;\n    var externalNameRef = _BinaryenExportGetName(exportRef);\n    var funcRef = _BinaryenGetFunction(moduleRef, internalNameRef);\n    var params = _BinaryenFunctionGetParams(funcRef);\n    var paramTypes = expandType(params);\n    var numParams = paramTypes.length;\n    var results = _BinaryenFunctionGetResults(funcRef);\n    var numLocals = numParams;\n    var vars = new Array<TypeRef>();\n    var numSlots = assert(managedOperandIndices.length);\n    var frameSize = numSlots * this.ptrSize;\n    var wrapperName = \"export:\" + internalName;\n    var wrapperNameRef = module.allocStringCached(wrapperName);\n\n    if (_BinaryenGetFunction(moduleRef, wrapperNameRef) == 0) {\n      let stmts = new Array<ExpressionRef>();\n      // __stack_pointer -= frameSize\n      stmts.push(\n        this.makeStackOffset(-frameSize)\n      );\n      for (let slotIndex = 0; slotIndex < numSlots; ++slotIndex) {\n        // store<usize>(__stack_pointer, $local, slotIndex * ptrSize)\n        stmts.push(\n          module.store(this.ptrSize,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.local_get(managedOperandIndices[slotIndex], this.ptrType),\n            this.ptrType, slotIndex * this.ptrSize\n          )\n        );\n      }\n      let forwardedOperands = new Array<ExpressionRef>(numParams);\n      for (let i = 0; i < numParams; ++i) {\n        forwardedOperands[i] = module.local_get(i, paramTypes[i]);\n      }\n      if (results != TypeRef.None) {\n        let tempIndex = numLocals++;\n        vars.push(results);\n        // t = original(...)\n        stmts.push(\n          module.local_set(tempIndex,\n            module.call(internalName, forwardedOperands, results),\n            false // internal\n          )\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n        // -> t\n        stmts.push(\n          module.local_get(tempIndex, results)\n        );\n      } else {\n        // original(...)\n        stmts.push(\n          module.call(internalName, forwardedOperands, results)\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n      }\n      let cArr = allocPtrArray(vars);\n      _BinaryenAddFunction(moduleRef, wrapperNameRef, params, results, cArr, vars.length,\n        module.block(null, stmts, results)\n      );\n      _free(cArr);\n    }\n    _BinaryenRemoveExport(moduleRef, externalNameRef);\n    _BinaryenAddFunctionExport(moduleRef, wrapperNameRef, externalNameRef);\n  }\n\n  /** @override */\n  walkModule(): void {\n    // Run the pass normally\n    super.walkModule();\n\n    // Instrument returns in functions utilizing stack slots\n    var module = this.module;\n    var instrumentReturns = new InstrumentReturns(this);\n    for (let _keys = Map_keys(this.slotMaps), i = 0, k = _keys.length; i < k; ++i) {\n      let func = _keys[i];\n      let slotMap = changetype<SlotMap>(this.slotMaps.get(func));\n      let frameSize = slotMap.size * this.ptrSize;\n\n      // Instrument function returns\n      instrumentReturns.frameSize = frameSize;\n      instrumentReturns.walkFunction(func);\n\n      // Instrument function entry\n      let stmts = new Array<ExpressionRef>();\n      // __stack_pointer -= frameSize\n      stmts.push(\n        this.makeStackOffset(-frameSize)\n      );\n      // memory.fill(__stack_pointer, 0, frameSize)\n      this.makeStackFill(frameSize, stmts);\n      \n      // Handle implicit return\n      let body = _BinaryenFunctionGetBody(func);\n      let bodyType = _BinaryenExpressionGetType(body);\n      if (bodyType == TypeRef.Unreachable) {\n        // body\n        stmts.push(\n          body\n        );\n      } else if (bodyType == TypeRef.None) {\n        // body\n        stmts.push(\n          body\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n      } else {\n        let temp = this.getSharedTemp(func, bodyType);\n        // t = body\n        stmts.push(\n          module.local_set(temp, body, false)\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n        // -> t\n        stmts.push(\n          module.local_get(temp, bodyType)\n        );\n      }\n      _BinaryenFunctionSetBody(func, module.flatten(stmts, bodyType));\n    }\n\n    // Update functions we added more locals to\n    // TODO: _BinaryenFunctionAddVar ?\n    for (let _keys = Map_keys(this.tempMaps), i = 0, k = _keys.length; i < k; ++i) {\n      this.updateFunction(_keys[i]);\n    }\n\n    // Update exports taking managed arguments\n    var exportMap = this.exportMap;\n    for (let _keys = Map_keys(exportMap), i = 0, k = _keys.length; i < k; ++i) {\n      let exportName = _keys[i];\n      let exportRef = _BinaryenGetExport(module.ref, module.allocStringCached(exportName));\n      let managedOperandIndices = changetype<i32[]>(exportMap.get(exportName));\n      this.updateExport(exportRef, managedOperandIndices);\n    }\n  }\n}\n\n/** Companion pass instrumenting `return` statements to restore the stack frame. */\nclass InstrumentReturns extends Pass {\n  /** Parent pass. */\n  parentPass: ShadowStackPass;\n  /** Frame size of the current function being processed. */\n  frameSize: i32 = 0;\n\n  constructor(shadowStack: ShadowStackPass) {\n    super(shadowStack.module);\n    this.parentPass = shadowStack;\n  }\n\n  /** @override */\n  visitReturn(ret: ExpressionRef): void {\n    assert(this.frameSize);\n    var module = this.module;\n    var value = _BinaryenReturnGetValue(ret);\n    var stmts = new Array<ExpressionRef>();\n    if (value) {\n      let returnType = _BinaryenExpressionGetType(value);\n      let temp = this.parentPass.getSharedTemp(this.currentFunction, returnType);\n      // t = value\n      stmts.push(\n        module.local_set(temp, value, false)\n      );\n      // __stack_pointer += frameSize\n      stmts.push(\n        this.parentPass.makeStackOffset(+this.frameSize)\n      );\n      // return t\n      _BinaryenReturnSetValue(ret, module.local_get(temp, returnType));\n    } else {\n      // __stack_pointer += frameSize\n      stmts.push(\n        this.parentPass.makeStackOffset(+this.frameSize)\n      );\n      // return\n    }\n    stmts.push(\n      ret\n    );\n    this.replaceCurrent(module.flatten(stmts, TypeRef.Unreachable));\n  }\n}","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// └─File                     File, analogous to Source in the AST\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef,\n  MemorySegment\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  writeI64,\n  writeI32AsI64,\n  writeI64AsI32\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n// Memory manager constants\nconst AL_SIZE = 16;\nconst AL_MASK = AL_SIZE - 1;\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_SUBST + \".wasm\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver!: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code range. */\n  get nativeRange(): Range { return this.nativeSource.range; }\n  /** Special native code file. */\n  nativeFile!: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Function` prototype. */\n  get functionPrototype(): ClassPrototype {\n    var cached = this._functionPrototype;\n    if (!cached) this._functionPrototype = cached = <ClassPrototype>this.require(CommonNames.Function, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _functionPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `Object` instance. */\n  get objectInstance(): Class {\n    var cached = this._objectInstance;\n    if (!cached) this._objectInstance = cached = this.requireClass(CommonNames.Object);\n    return cached;\n  }\n  private _objectInstance: Class | null = null;\n\n  /** Gets the standard `TemplateStringsArray` instance. */\n  get templateStringsArrayInstance(): Class {\n    var cached = this._templateStringsArrayInstance;\n    if (!cached) this._templateStringsArrayInstance = cached = this.requireClass(CommonNames.TemplateStringsArray);\n    return cached;\n  }\n  private _templateStringsArrayInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    var prototype = this.lookup(CommonNames.abort);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__new(size: usize, id: u32): usize` instance. */\n  get newInstance(): Function {\n    var cached = this._newInstance;\n    if (!cached) this._newInstance = cached = this.requireFunction(CommonNames.new_);\n    return cached;\n  }\n  private _newInstance: Function | null = null;\n\n  /** Gets the runtime `__renew(ptr: usize, size: usize): usize` instance. */\n  get renewInstance(): Function {\n    var cached = this._renewInstance;\n    if (!cached) this._renewInstance = cached = this.requireFunction(CommonNames.renew);\n    return cached;\n  }\n  private _renewInstance: Function | null = null;\n\n  /** Gets the runtime `__link(parentPtr: usize, childPtr: usize, expectMultiple: bool): void` instance. */\n  get linkInstance(): Function {\n    var cached = this._linkInstance;\n    if (!cached) this._linkInstance = cached = this.requireFunction(CommonNames.link);\n    return cached;\n  }\n  private _linkInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__newBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get newBufferInstance(): Function {\n    var cached = this._newBufferInstance;\n    if (!cached) this._newBufferInstance = cached = this.requireFunction(CommonNames.newBuffer);\n    return cached;\n  }\n  private _newBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__newArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get newArrayInstance(): Function {\n    var cached = this._newArrayInstance;\n    if (!cached) this._newArrayInstance = cached = this.requireFunction(CommonNames.newArray);\n    return cached;\n  }\n  private _newArrayInstance: Function | null = null;\n\n  /** Gets the runtime's internal `BLOCK` instance. */\n  get BLOCKInstance(): Class {\n    var cached = this._BLOCKInstance;\n    if (!cached) this._BLOCKInstance = cached = this.requireClass(CommonNames.BLOCK);\n    return cached;\n  }\n  private _BLOCKInstance: Class | null = null;\n\n  /** Gets the runtime's internal `OBJECT` instance. */\n  get OBJECTInstance(): Class {\n    var cached = this._OBJECTInstance;\n    if (!cached) this._OBJECTInstance = cached = this.requireClass(CommonNames.OBJECT);\n    return cached;\n  }\n  private _OBJECTInstance: Class | null = null;\n\n  // Utility\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Gets the overhead of a memory manager block. */\n  get blockOverhead(): i32 {\n    // BLOCK | data...\n    //       ^ 16b alignment\n    return this.BLOCKInstance.nextMemoryOffset;\n  }\n\n  /** Gets the overhead of a managed object, excl. block overhead, incl. alignment. */\n  get objectOverhead(): i32 {\n    // OBJECT+align | data...\n    //        └ 0 ┘ ^ 16b alignment\n    return (this.OBJECTInstance.nextMemoryOffset - this.blockOverhead + AL_MASK) & ~AL_MASK;\n  }\n\n  /** Gets the total overhead of a managed object, incl. block overhead. */\n  get totalOverhead(): i32 {\n    // BLOCK | OBJECT+align | data...\n    // └     = TOTAL      ┘ ^ 16b alignment\n    return this.blockOverhead + this.objectOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart(currentOffset: i32): i32 {\n    var blockOverhead = this.blockOverhead;\n    return ((currentOffset + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart64(currentOffset: i64): i64 {\n    var blockOverhead = i64_new(this.blockOverhead);\n    return i64_sub(i64_align(i64_add(currentOffset, blockOverhead), AL_SIZE), blockOverhead);\n  }\n\n  /** Computes the size of a memory manager block, excl. block overhead. */\n  computeBlockSize(payloadSize: i32, isManaged: bool): i32 {\n    // see: std/rt/tlsf.ts, computeSize; becomes mmInfo\n    if (isManaged) payloadSize += this.objectOverhead;\n    // we know that payload must be aligned, and that block sizes must be chosen\n    // so that blocks are adjacent with the next payload aligned. hence, block\n    // size is payloadSize rounded up to where the next block would start:\n    var blockSize = this.computeBlockStart(payloadSize);\n    // make sure that block size is valid according to TLSF requirements\n    var blockOverhead = this.blockOverhead;\n    var blockMinsize = ((3 * this.options.usizeType.byteSize + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n    if (blockSize < blockMinsize) blockSize = blockMinsize;\n    const blockMaxsize = 1 << 30; // 1 << (FL_BITS + SB_BITS - 1), exclusive\n    const tagsMask = 3;\n    if (blockSize >= blockMaxsize || (blockSize & tagsMask) != 0) {\n      throw new Error(\"invalid block size\");\n    }\n    return blockSize;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.nonnull, new TypeDefinition(\n      CommonNames.nonnull,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.nonnull, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.funcref, Type.funcref);\n    this.registerNativeType(CommonNames.externref, Type.externref);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n    this.registerNativeType(CommonNames.eqref, Type.eqref);\n    this.registerNativeType(CommonNames.i31ref, Type.i31ref);\n    this.registerNativeType(CommonNames.dataref, Type.dataref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n    this.registerConstantInteger(CommonNames.ASC_EXPORT_RUNTIME, Type.bool,\n      i64_new(options.exportRuntime ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_MAJOR, Type.i32,\n      i64_new(options.bundleMajorVersion));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_MINOR, Type.i32,\n      i64_new(options.bundleMinorVersion));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_PATCH, Type.i32,\n      i64_new(options.bundlePatchVersion));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_GC, Type.bool,\n      i64_new(options.hasFeature(Feature.GC) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MEMORY64, Type.bool,\n      i64_new(options.hasFeature(Feature.MEMORY64) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports.\n    // note that imports may depend upon imports, so repeat until there's no more progress.\n    do {\n      let i = 0, madeProgress = false;\n      while (i < queuedImports.length) {\n        let queuedImport = queuedImports[i];\n        let localIdentifier = queuedImport.localIdentifier;\n        let foreignIdentifier = queuedImport.foreignIdentifier;\n        // File must be found here, as it would otherwise already have been reported by the parser\n        let foreignFile = assert(this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt));\n        if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            foreignIdentifier.text,\n            foreignFile,\n            queuedExports\n          );\n          if (element) {\n            queuedImport.localFile.add(\n              localIdentifier.text,\n              element,\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n          }\n        } else { // i.e. import * as bar from \"./bar\"\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asAliasNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n          queuedImports.splice(i, 1);\n          madeProgress = true;\n        }\n      }\n      if (!madeProgress) {\n        // report queued imports we were unable to resolve\n        for (let j = 0, l = queuedImports.length; j < l; ++j) {\n          let queuedImport = queuedImports[j];\n          let foreignIdentifier = queuedImport.foreignIdentifier;\n          if (foreignIdentifier) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n            );\n          }\n        }\n        break;\n      }\n    } while (true);\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          // File must be found here, as it would otherwise already have been reported by the parser\n          let foreignFile = assert(this.lookupForeignFile(foreignPath, assert(queuedExport.foreignPathAlt)));\n          let element = this.lookupForeign(localName, foreignFile, queuedExports);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookup(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) {\n      this.registerWrapperClass(Type.funcref, CommonNames.Funcref);\n      this.registerWrapperClass(Type.externref, CommonNames.Externref);\n      if (options.hasFeature(Feature.GC)) {\n        this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n        this.registerWrapperClass(Type.eqref, CommonNames.Eqref);\n        this.registerWrapperClass(Type.i31ref, CommonNames.I31ref);\n        this.registerWrapperClass(Type.dataref, CommonNames.Dataref);\n      }\n    }\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) {\n          this.elementsByName.delete(alias);\n          continue;\n        }\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range,\n                  baseMember.identifierNode.text\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookup(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookup(name);\n    if (!element) throw new Error(\"Missing standard library component: \" + name);\n    if (element.kind != kind) throw Error(\"Invalid standard library component kind: \" + name);\n    return element;\n  }\n\n  /** Requires that a global variable is present and returns it. */\n  requireGlobal(name: string): Global {\n    return <Global>this.require(name, ElementKind.GLOBAL);\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"Invalid standard library class: \" + name);\n    return resolved;\n  }\n\n  /** Requires that a global function is present and returns it. */\n  requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"Invalid standard library function: \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the wrapper class of a non-class type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.isInternalReference && !wrapperClasses.has(type));\n    var element = assert(this.lookup(className));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = assert(this.resolver.resolveClass(<ClassPrototype>element, null));\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.isIntegerInclReference);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.isFloatValue);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** The other file. */\n    foreignFile: File,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      // check if already resolved\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // follow queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n\n          // re-exported from another file\n          if (queuedExportForeignPath) {\n            let otherFile = this.lookupForeignFile(queuedExportForeignPath, assert(queuedExport.foreignPathAlt));\n            if (!otherFile) return null;\n            foreignName = queuedExport.localIdentifier.text;\n            foreignFile = otherFile;\n            continue;\n          }\n\n          // exported from this file\n          element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n          if (element) return element;\n        }\n      }\n      break;\n    } while (true);\n\n    // follow star exports\n    var exportsStar = foreignFile.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = this.lookupForeign(foreignName, exportsStar[i], queuedExports);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n    if (foreignFile) {\n      var element = this.lookupForeign(declaration.foreignName.text, foreignFile, queuedExports);\n      if (element) {\n        parent.add(declaration.name.text, element, declaration.name /* isImport */);\n        return;\n      }\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary || declaration.is(CommonFlags.EXPORT)) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // keep original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent!: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction!: Function;\n  /** Array of `import * as X` alias namespaces of this file. */\n  aliasNamespaces: Array<Namespace> = new Array<Namespace>();\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookup(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n\n    // Also, add to the namespaces that capture our exports\n    for(let i = 0; i < this.aliasNamespaces.length; i++) {\n      let ns = this.aliasNamespaces[i];\n      ns.add(name, element);\n    }\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asAliasNamespace(\n    name: string,\n    parent: Element,\n    localIdentifier: IdentifierExpression\n  ): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    // NOTE: Some exports are still queued, and can't yet be added here,\n    // so we remember all the alias namespaces and add to them as well\n    // when adding an element to the file.\n    this.aliasNamespaces.push(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.isIntegerInclReference);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.isFloatValue);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Original name of the (temporary) local. */\n  private originalName: string;\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.originalName = name;\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n\n  /** Sets the temporary name of this local. */\n  setTemporaryName(name: string): void {\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n\n  /** Resets the temporary name of this local. */\n  resetTemporaryName(): void {\n    var name = this.originalName;\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    var parentKind = parent.kind;\n    if (parentKind == ElementKind.PROPERTY_PROTOTYPE) parentKind = parent.parent.kind;\n    return parentKind == ElementKind.CLASS || parentKind == ElementKind.INTERFACE;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow!: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n  /** Runtime memory segment, if created. */\n  memorySegment: MemorySegment | null = null;\n  /** Original function, if a stub. Otherwise `this`. */\n  original!: Function;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.original = this;\n    var program = prototype.program;\n    this.type = signature.type;\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          thisType,\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = this.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Gets the name of the parameter at the specified index. */\n  getParameterName(index: i32): string {\n    var parameters = (<FunctionDeclaration>this.declaration).signature.parameters;\n    return parameters.length > index\n      ? parameters[index].name.text\n      : getDefaultParameterName(index);\n  }\n\n  /** Gets the class or interface this function belongs to, if an instance method. */\n  getClassOrInterface(): Class | null {\n    var parent = this.parent;\n    if (parent.kind == ElementKind.PROPERTY) parent = parent.parent;\n    if (parent.kind == ElementKind.CLASS || parent.kind == ElementKind.INTERFACE) {\n      return <Class>parent;\n    }\n    return null;\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.original.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.original = this.original;\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempFuncrefs: Local[] | null = null;\n  tempExternrefs: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempEqrefs: Local[] | null = null;\n  tempI31refs: Local[] | null = null;\n  tempDatarefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt() - 1 // source maps are 0-based\n        );\n      }\n    }\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the field's `this` type. */\n  get thisType(): Type {\n    var parent = this.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    return (<Class>parent).type;\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    var cached = this._internalGetterName;\n    if (cached === null) this._internalGetterName = cached = this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n    return cached;\n  }\n  private _internalGetterName: string | null = null;\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    var cached = this._internalSetterName;\n    if (cached === null) this._internalSetterName = cached = this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n    return cached;\n  }\n  private _internalSetterName: string | null = null;\n\n  /** Gets the signature of the respective getter function. */\n  get internalGetterSignature(): Signature {\n    var cached = this._internalGetterSignature;\n    if (!cached) this._internalGetterSignature = cached = new Signature(this.program, null, this.type, this.thisType);\n    return cached;\n  }\n  private _internalGetterSignature: Signature | null = null;\n\n  /** Gets the signature of the respective setter function. */\n  get internalSetterSignature(): Signature {\n    var cached = this._internalSetterSignature;\n    if (!cached) this._internalGetterSignature = cached = new Signature(this.program, [ this.type ], Type.void, this.thisType);\n    return cached;\n  }\n  private _internalSetterSignature: Signature | null = null;\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n  /** Whether the field initialization check has already been performed. */\n  didCheckFieldInitialization: bool = false;\n  /** Runtime visitor function reference. */\n  visitRef: FunctionRef = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    type.classReference = this;\n    this.setType(type);\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads != null && overloads.has(kind)) {\n        return assert(overloads.get(kind));\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Gets the method of the specified name, resolved with the given type arguments. */\n  getMethod(name: string, typeArguments: Type[] | null = null): Function | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) {\n      let bound = changetype<Element>(members.get(name));\n      if (bound.kind == ElementKind.FUNCTION_PROTOTYPE) {\n        return this.program.resolver.resolveFunction(<FunctionPrototype>bound, typeArguments);\n      }\n    }\n    return null;\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Creates a buffer suitable to hold a runtime instance of this class. */\n  createBuffer(overhead: i32 = 0): Uint8Array {\n    var program = this.program;\n    var payloadSize = this.nextMemoryOffset + overhead;\n    var blockSize = program.computeBlockSize(payloadSize, true); // excl. overhead\n    var buffer = new Uint8Array(program.blockOverhead + blockSize);\n    var OBJECT = program.OBJECTInstance;\n    OBJECT.writeField(\"mmInfo\", blockSize, buffer, 0);\n    OBJECT.writeField(\"gcInfo\", 0, buffer, 0);\n    OBJECT.writeField(\"gcInfo2\", 0, buffer, 0);\n    OBJECT.writeField(\"rtId\", this.id, buffer, 0);\n    OBJECT.writeField(\"rtSize\", payloadSize, buffer, 0);\n    return buffer;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32 = this.program.totalOverhead): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      let typeKind = fieldInstance.type.kind;\n      switch (typeKind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          assert(!i64_is(value));\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          assert(!i64_is(value));\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          assert(!i64_is(value));\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (this.program.options.isWasm64) {\n            if (i64_is(value)) {\n              writeI64(value, buffer, offset);\n            } else {\n              writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.USIZE);\n            }\n            return 8;\n          } else {\n            if (i64_is(value)) {\n              writeI64AsI32(value, buffer, offset, typeKind == TypeKind.USIZE);\n            } else {\n              writeI32(i32(value), buffer, offset);\n            }\n            return 4;\n          }\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          if (i64_is(value)) {\n            writeI64(value, buffer, offset);\n          } else {\n            writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.U64);\n          }\n          return 8;\n        }\n        case TypeKind.F32: {\n          assert(!i64_is(value));\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          assert(!i64_is(value));\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is pointerfree. Useful to know for the GC. */\n  get isPointerfree(): bool {\n    var program = this.program;\n\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n\n      // Check that there are no managed instance fields\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.isManaged) return false;\n        }\n      }\n\n      // Check that this isn't a managed collection\n      if (instanceMembers.has(CommonNames.visit)) {\n        let prototype = this.prototype;\n        if (\n          prototype == program.arrayPrototype ||\n          prototype == program.staticArrayPrototype ||\n          prototype == program.setPrototype ||\n          prototype == program.mapPrototype\n        ) {\n          // Note that we cannot know for sure anymore as soon as the collection\n          // is extended, because user code may implement a custom visitor.\n          let typeArguments = assert(this.getTypeArgumentsTo(prototype));\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (typeArguments[i].isManaged) return false;\n          }\n          return true;\n        }\n        return false; // has a custom __visit\n      }\n    }\n    return true;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index];\n}\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  uniqueMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n  /** Whether a new overload has been discovered. */\n  discoveredOverload: bool = false;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          uniqueMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.nonnull) return this.resolveBuiltinNotNullableType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = uniqueMap(ctxTypes), // update\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (type.isInternalReference) return type.asNullable();\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_cannot_be_nullable,\n            nameNode.range, nameNode.identifier.text\n          );\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNode.range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNode.range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.getClassOrWrapper(this.program);\n    if (classReference) {\n      let overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n      if (overload) return overload.signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNode.range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.getSignature();\n    if (signatureReference) return signatureReference.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_has_no_call_signatures,\n        typeArgumentNode.range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinNotNullableType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    if (!typeArgument.isNullableReference) return typeArgument;\n    return typeArgument.nonNullableType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. Updated in place with the new set of contextual types. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    var oldCtxTypes = uniqueMap<string,Type>(ctxTypes);\n    ctxTypes.clear();\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            oldCtxTypes, // update\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            uniqueMap<string,Type>(ctxTypes), // don't update\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = uniqueMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let typeParameterNode = typeParameterNodes[i];\n        let name = typeParameterNode.name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n          let defaultType = typeParameterNode.defaultType;\n          if (defaultType) {\n            let resolvedDefaultType = this.resolveType(defaultType, ctxFlow.actualFunction, contextualTypeArguments, reportMode);\n            if (!resolvedDefaultType) return null;\n            resolvedTypeArguments[i] = resolvedDefaultType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, uniqueMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      let classReference = type.getClassOrWrapper(this.program);\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    let classReference = type.getClassOrWrapper(this.program);\n    if (classReference) return classReference;\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    var outerFlow = ctxFlow.outer;\n    if (outerFlow) {\n      if (element = outerFlow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.getClass();\n        if (classReference) {\n          return classReference.type.asNullable();\n        } else {\n          let signatureReference = ctxType.getSignature();\n          if (signatureReference) {\n            return signatureReference.type.asNullable();\n          } else if (ctxType.isExternalReference) {\n            return ctxType; // TODO: nullable?\n          }\n        }\n        return this.program.options.usizeType;\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, uniqueMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, variableLikeElement.type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, returnType.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // Function with shadow type, i.e. function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        } else if (!target.is(CommonFlags.GENERIC)) {\n          // Inherit from 'Function' if not overridden, i.e. fn.call\n          let members = target.members;\n          if (!members || !members.has(propertyName)) {\n            let functionInstance = this.resolveFunction(<FunctionPrototype>target, null, uniqueMap<string,Type>(), ReportMode.SWALLOW);\n            if (functionInstance) {\n              let wrapper = functionInstance.type.getClassOrWrapper(this.program);\n              if (wrapper) target = wrapper;\n            }\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            let member = assert(members.get(propertyName));\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    let classReference = targetType.getClassOrWrapper(this.program);\n    if (classReference) {\n      do {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (ctxType.isValue) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      case Token.DOT_DOT_DOT: {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            node.range, \"Spread operator\"\n          );\n        }\n        return null;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is common type of LHS and RHS, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        return assert(intType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        return assert(fltType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.STRING:\n      case LiteralKind.TEMPLATE: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.getClass();\n        if (classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n                node.range, \"T\"\n              );\n            }\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.isInternalReference\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n      case LiteralKind.OBJECT: {\n        if (ctxType.isClass) return ctxType.classReference;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            node.range\n          );\n        }\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let varType = (<VariableLikeElement>target).type;\n        let varElement = this.getElementOfType(varType);\n        if (!varElement || varElement.kind != ElementKind.CLASS) {\n          break;\n        }\n        target = varElement;\n        // fall-through\n      }\n      case ElementKind.CLASS: {\n        let typeArguments = (<Class>target).getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          let signatureReference = assert(ftype.signatureReference);\n          return signatureReference.returnType;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    return assert(Type.bool.getClassOrWrapper(this.program));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      if (parameterType == Type.void) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      parameterTypes[i] = parameterType;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // remember discovered overloads for virtual stub finalization\n    if (classInstance) {\n      let methodOrPropertyName = instance.declaration.name.text;\n      let baseClass = classInstance.base;\n      while (baseClass) {\n        let baseMembers = baseClass.members;\n        if (baseMembers && baseMembers.has(methodOrPropertyName)) {\n          this.discoveredOverload = true;\n          break;\n        }\n        baseClass = baseClass.base;\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes, // update\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves reachable overloads of the given instance method. */\n  resolveOverloads(instance: Function): Function[] | null {\n    var overloadPrototypes = instance.prototype.overloads;\n    if (!overloadPrototypes) return null;\n\n    var parentClassInstance = assert(instance.getClassOrInterface());\n    var overloads = new Set<Function>();\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (!classInstances) continue;\n      for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n        let classInstance = _values[j];\n        // Check if the parent class is a subtype of instance's class\n        if (!classInstance.isAssignableTo(parentClassInstance)) continue;\n        let overloadInstance: Function | null;\n        if (isProperty) {\n          let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n          assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n          let boundPropertyInstance = this.resolveProperty(<PropertyPrototype>boundProperty);\n          if (!boundPropertyInstance) continue;\n          if (instance.is(CommonFlags.GET)) {\n            overloadInstance = boundPropertyInstance.getterInstance;\n          } else {\n            assert(instance.is(CommonFlags.SET));\n            overloadInstance = boundPropertyInstance.setterInstance;\n          }\n        } else {\n          let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n          assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          overloadInstance = this.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n        }\n        if (overloadInstance) overloads.add(overloadInstance);\n      }\n    }\n    return Set_values(overloads);\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        uniqueMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          uniqueMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n              if (fieldType == Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldTypeNode.range\n                  );\n                }\n                break;\n              }\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      if (overloadPrototype.is(CommonFlags.GENERIC)) {\n        // Already errored during initialization: AS212: Decorator '@operator' is not valid here\n        continue;\n      }\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes, // update\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n\n  private ensureOneTypeArgument(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): TypeNode | null {\n    var typeArgumentNodes = node.typeArguments;\n    let numTypeArguments = 0;\n    if (!typeArgumentNodes || (numTypeArguments = typeArgumentNodes.length) != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    return typeArgumentNodes[0];\n  }\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n  TEMPLATELITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  start: i32;\n  end: i32;\n  source!: Source;\n  debugInfoRef: usize = 0;\n\n  constructor(start: i32, end: i32) {\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    let range = new Range(\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n    range.source = a.source;\n    return range;\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    let range = new Range(this.start, this.start);\n    range.source = this.source;\n    return range;\n  }\n\n  get atEnd(): Range {\n    let range = new Range(this.end, this.end);\n    range.source = this.source;\n    return range;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n    this.source = source;\n\n    var text = source.text;\n    var end = text.length;\n    var pos = 0;\n    // skip bom\n    if (\n      pos < end &&\n      text.charCodeAt(pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++pos;\n    }\n\n    // skip shebang\n    if (\n      pos + 1 < end &&\n      text.charCodeAt(pos) == CharCode.HASH &&\n      text.charCodeAt(pos + 1) == CharCode.EXCLAMATION\n    ) {\n      pos += 2;\n      while (\n        pos < end &&\n        text.charCodeAt(pos) != CharCode.LINEFEED\n      ) {\n        ++pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n    this.pos = pos;\n    this.end = end;\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    while (pos < end) {\n      this.tokenPos = pos;\n      let c = text.charCodeAt(pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++pos < end &&\n            text.charCodeAt(pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            ++pos;\n            if (\n              maxTokenLength > 2 && pos < end &&\n              text.charCodeAt(pos) == CharCode.EQUALS\n            ) {\n              this.pos = pos + 1;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            this.pos = pos;\n            return Token.EXCLAMATION_EQUALS;\n          }\n          this.pos = pos;\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE: {\n          this.pos = pos;\n          return Token.STRINGLITERAL;\n        }\n        case CharCode.BACKTICK: {\n          this.pos = pos;\n          return Token.TEMPLATELITERAL;\n        }\n        case CharCode.PERCENT: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.PERCENT_EQUALS;\n          }\n          this.pos = pos;\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.AMPERSAND) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          this.pos = pos + 1;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          this.pos = pos + 1;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++pos;\n              if (\n                maxTokenLength > 2 && pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              this.pos = pos;\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          this.pos = pos;\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.PLUS) {\n              this.pos = pos + 1;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          this.pos = pos + 1;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.MINUS) {\n              this.pos = pos + 1;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (isDecimalDigit(chr)) {\n              this.pos = pos - 1;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(pos + 1) == CharCode.DOT\n            ) {\n              this.pos = pos + 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          this.pos = pos;\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = pos;\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                pos + 1 < end &&\n                text.charCodeAt(pos + 1) == CharCode.SLASH\n              ) {\n                ++pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++pos < end) {\n                if (text.charCodeAt(pos) == CharCode.LINEFEED) {\n                  ++pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++pos < end) {\n                c = text.charCodeAt(pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  pos + 1 < end &&\n                  text.charCodeAt(pos + 1) == CharCode.SLASH\n                ) {\n                  pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          this.pos = pos;\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          this.pos = pos + 1;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          this.pos = pos + 1;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              this.pos = pos;\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              this.pos = pos;\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              this.pos = pos + 1;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          this.pos = pos;\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++pos;\n              if (maxTokenLength > 2 && pos < end) {\n                chr = text.charCodeAt(pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++pos;\n                  if (\n                    maxTokenLength > 3 && pos < end &&\n                    text.charCodeAt(pos) == CharCode.EQUALS\n                  ) {\n                    this.pos = pos + 1;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  this.pos = pos;\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  this.pos = pos + 1;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              this.pos = pos;\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          this.pos = pos + 1;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          this.pos = pos + 1;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.CARET_EQUALS;\n          }\n          this.pos = pos;\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          this.pos = pos + 1;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.BAR) {\n              this.pos = pos + 1;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.BAR_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          this.pos = pos + 1;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          this.pos = pos + 1;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            let posBefore = pos;\n            while (\n              ++pos < end &&\n              isIdentifierPart(c = text.charCodeAt(pos))\n            ) { /* nop */ }\n            if (identifierHandling != IdentifierHandling.ALWAYS) {\n              let maybeKeywordToken = tokenFromKeyword(text.substring(posBefore, pos));\n              if (\n                maybeKeywordToken !== Token.INVALID &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(maybeKeywordToken)\n                )\n              ) {\n                this.pos = pos;\n                return maybeKeywordToken;\n              }\n            }\n            this.pos = posBefore;\n            return Token.IDENTIFIER;\n          } else if (isWhiteSpace(c)) {\n            ++pos;\n            break;\n          }\n          let start = pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && pos < end &&\n            ((text.charCodeAt(pos)) & 0xFC00) == 0xDC00\n          ) ++pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, pos)\n          );\n          this.pos = pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    this.pos = pos;\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    if (token == Token.GREATERTHAN) {  // where parsing type arguments\n      maxCompoundLength = 1;\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    let range = new Range(start, end);\n    range.source = this.source;\n    return range;\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var start = pos;\n    while (\n      ++pos < end &&\n      isIdentifierPart(text.charCodeAt(pos))\n    );\n    this.pos = pos;\n    return text.substring(start, pos);\n  }\n\n  readingTemplateString: bool = false;\n  readStringStart: i32 = 0;\n  readStringEnd: i32 = 0;\n\n  readString(quote: i32 = 0, isTaggedTemplate: bool = false): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    if (!quote) quote = text.charCodeAt(pos++);\n    var start = pos;\n    this.readStringStart = start;\n    var result = \"\";\n\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        this.readStringEnd = end;\n        break;\n      }\n      let c = text.charCodeAt(pos);\n      if (c == quote) {\n        this.readStringEnd = pos;\n        result += text.substring(start, pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, pos);\n        this.pos = pos; // save\n        result += this.readEscapeSequence(isTaggedTemplate);\n        pos = this.pos; // restore\n        start = pos;\n        continue;\n      }\n      if (quote == CharCode.BACKTICK) {\n        if (c == CharCode.DOLLAR && pos + 1 < end && text.charCodeAt(pos + 1) == CharCode.OPENBRACE) {\n          result += text.substring(start, pos);\n          this.readStringEnd = pos;\n          this.pos = pos + 2;\n          this.readingTemplateString = true;\n          return result;\n        }\n      } else if (isLineBreak(c)) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, pos)\n        );\n        this.readStringEnd = pos;\n        break;\n      }\n      ++pos;\n    }\n    this.pos = pos;\n    this.readingTemplateString = false;\n    return result;\n  }\n\n  readEscapeSequence(isTaggedTemplate: bool = false): string {\n    // for context on isTaggedTemplate, see: https://tc39.es/proposal-template-literal-revision/\n    var start = this.pos;\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: {\n        if (isTaggedTemplate && this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n          return text.substring(start, this.pos);\n        }\n        return \"\\0\";\n      }\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(isTaggedTemplate ? start : -1); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(isTaggedTemplate ? start : -1); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(2, isTaggedTemplate ? start : - 1); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 2 < this.end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos = pos + 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos = pos + 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos = pos + 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(pos + 1))) {\n        let start = pos;\n        this.pos = pos + 1;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    let pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var text = this.source.text;\n    var end = this.end;\n    var start = this.pos;\n    var sepCount = this.readDecimalFloatPartial(false);\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      sepCount += this.readDecimalFloatPartial();\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        sepCount += this.readDecimalFloatPartial();\n      }\n    }\n    let result = text.substring(start, this.pos);\n    if (sepCount) result = result.replaceAll(\"_\", \"\");\n    return parseFloat(result);\n  }\n\n  /** Reads past one section of a decimal float literal. Returns the number of separators encountered. */\n  private readDecimalFloatPartial(allowLeadingZeroSep: bool = true): u32 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var start = pos;\n    var end = this.end;\n    var sepEnd = start;\n    var sepCount = 0;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n\n      if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (!allowLeadingZeroSep && pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n        ++sepCount;\n      } else if (!isDecimalDigit(c)) {\n        break;\n      }\n      ++pos;\n    }\n\n    if (pos != start && sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n\n    this.pos = pos;\n    return sepCount;\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2, startIfTaggedTemplate: i32 = -1): string {\n    var value = 0;\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    while (pos < end) {\n      let c = text.charCodeAt(pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else if (~startIfTaggedTemplate) {\n        this.pos = --pos;\n        return text.substring(startIfTaggedTemplate, pos);\n      } else {\n        this.pos = pos;\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(pos - 1, pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) { // invalid\n      this.pos = pos;\n      if (~startIfTaggedTemplate) {\n        return text.substring(startIfTaggedTemplate, pos);\n      }\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(pos)\n      );\n      return \"\";\n    }\n    this.pos = pos;\n    return String.fromCharCode(value);\n  }\n\n  checkForIdentifierStartAfterNumericLiteral(): void {\n    // TODO: BigInt n\n    var pos = this.pos;\n    if (pos < this.end && isIdentifierStart(this.source.text.charCodeAt(pos))) {\n      this.error(\n        DiagnosticCode.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal,\n        this.range(pos)\n      );\n    }\n  }\n\n  readUnicodeEscape(startIfTaggedTemplate: i32 = -1): string {\n    return this.readHexadecimalEscape(4, startIfTaggedTemplate);\n  }\n\n  private readExtendedUnicodeEscape(startIfTaggedTemplate: i32 = -1): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n          this.range(start, this.pos)\n        );\n      }\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.Unexpected_end_of_text,\n          this.range(start, end)\n        );\n      }\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.Unterminated_Unicode_escape_sequence,\n          this.range(start, this.pos)\n        );\n      }\n      invalid = true;\n    }\n\n    if (invalid) {\n      return ~startIfTaggedTemplate\n        ? text.substring(startIfTaggedTemplate, this.pos)\n        : \"\";\n    }\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  TypeRef,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Function reference. */\n  FUNCREF,\n  /** External reference. */\n  EXTERNREF,\n  /** Any reference. */\n  ANYREF,\n  /** Equatable reference. */\n  EQREF,\n  /** 31-bit integer reference. */\n  I31REF,\n  /** Data reference. */\n  DATAREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a varying (in size) type. */\n  VARYING = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is an external type. */\n  EXTERNAL = 1 << 11,\n  /** Is a class. */\n  CLASS = 1 << 12,\n  /** Is a function. */\n  FUNCTION = 1 << 13\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  private _nonNullableType: Type | null = null;\n  /** Respective nullable type, if non-nullable. */\n  private _nullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    if (!(flags & TypeFlags.NULLABLE)) {\n      this._nonNullableType = this;\n    } else {\n      this._nullableType = this;\n    }\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this type represents a basic value. */\n  get isValue(): bool {\n    return this.is(TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer value. */\n  get isIntegerValue(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a small (< 32 bits) integer value. */\n  get isShortIntegerValue(): bool {\n    return this.is(TypeFlags.SHORT | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a long (> 32 bits) integer value. */\n  get isLongIntegerValue(): bool {\n    return this.is(TypeFlags.LONG | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a signed integer value. */\n  get isSignedIntegerValue(): bool {\n    return this.is(TypeFlags.SIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an unsigned integer value. */\n  get isUnsignedIntegerValue(): bool {\n    return this.is(TypeFlags.UNSIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a varying (in size) integer value. */\n  get isVaryingIntegerValue(): bool {\n    return this.is(TypeFlags.VARYING | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer, including references.  */\n  get isIntegerInclReference(): bool {\n    return this.is(TypeFlags.INTEGER);\n  }\n\n  /** Tests if this type represents a floating point value. */\n  get isFloatValue(): bool {\n    return this.is(TypeFlags.FLOAT | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents a numeric (integer or floating point) value. */\n  get isNumericValue(): bool {\n    return this.isIntegerValue || this.isFloatValue;\n  }\n\n  /** Tests if this type represents a boolean value. */\n  get isBooleanValue(): bool {\n    return this == Type.bool;\n  }\n\n  /** Tests if this type represents a vector value. */\n  get isVectorValue(): bool {\n    return this.is(TypeFlags.VECTOR | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents an internal or external reference. */\n  get isReference(): bool {\n    return this.is(TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a nullable internal or external reference. */\n  get isNullableReference(): bool {\n    return this.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an internal object. */\n  get isInternalReference(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an external object. */\n  get isExternalReference(): bool {\n    return this.is(TypeFlags.EXTERNAL | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a class. */\n  get isClass(): bool {\n    return this.isInternalReference\n      ? this.classReference !== null\n      : false;\n  }\n\n  /** Gets the underlying class of this type, if any. */\n  getClass(): Class | null {\n    return this.isInternalReference\n      ? this.classReference\n      : null;\n  }\n\n  /** Gets the underlying class or wrapper class of this type, if any. */\n  getClassOrWrapper(program: Program): Class | null {\n    let classReference = this.getClass();\n    if (classReference) {\n      // typical class\n      return classReference;\n    } else {\n      let signatureReference = this.getSignature();\n      if (signatureReference) {\n        // function wrapper\n        let type = signatureReference.type;\n        let wrapper = assert(program.resolver.resolveClass(program.functionPrototype, [ type ]));\n        wrapper.wrappedType = type;\n        return wrapper;\n      } else {\n        let wrapperClasses = program.wrapperClasses;\n        if (wrapperClasses.has(this)) {\n          // value wrapper\n          return assert(wrapperClasses.get(this));\n        }\n      }\n    }\n    return null;\n  }\n\n  /** Tests if this type represents a function. */\n  get isFunction(): bool {\n    return this.isInternalReference\n      ? this.signatureReference !== null\n      : false;\n  }\n\n  /** Gets the underlying function signature of this type, if any. */\n  getSignature(): Signature | null {\n    return this.isInternalReference\n      ? this.signatureReference\n      : null;\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.isInternalReference) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      return this.signatureReference !== null; // function references are managed\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Gets the corresponding non-nullable type. */\n  get nonNullableType(): Type {\n    if (this.isExternalReference) {\n      return this; // TODO\n    }\n    return assert(this._nonNullableType); // set either in ctor or asNullable\n  }\n\n  /** Gets the corresponding nullable type, if applicable. */\n  get nullableType(): Type | null {\n    return this._nullableType; // set either in ctor or asNullable\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.isInternalReference);\n    var nullableType = this._nullableType;\n    if (!nullableType) {\n      assert(!this.isNullableReference);\n      this._nullableType = nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      nullableType.classReference = this.classReference;         // either a class reference\n      nullableType.signatureReference = this.signatureReference; // or a function reference\n      nullableType._nonNullableType = this;\n    }\n    return nullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.isReference) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.isNullableReference == other.isNullableReference\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.isReference) {\n      if (target.isReference) {\n        if (!this.isNullableReference || target.isNullableReference) {\n          if (currentClass = this.getClass()) {\n            if (targetClass = target.getClass()) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.getSignature()) {\n            if (targetFunction = target.getSignature()) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.isExternalReference && (this.kind == target.kind || (target.kind == TypeKind.ANYREF && this.kind != TypeKind.EXTERNREF))) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.isReference) {\n      if (this.isIntegerValue) {\n        if (target.isIntegerValue) {\n          if (\n            !signednessIsRelevant ||\n            this.isBooleanValue || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.isSignedIntegerValue == target.isSignedIntegerValue\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.isFloatValue) {\n        if (target.isFloatValue) {\n          return this.size <= target.size;\n        }\n      } else if (this.isVectorValue) {\n        if (target.isVectorValue) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.isReference) return this.isAssignableTo(target);\n    else if (target.isReference) return false;\n    // not dealing with references from here on\n    if (this.isIntegerValue) {\n      return target.isIntegerValue && target.size == this.size && (\n        !signednessIsRelevant ||\n        this.isSignedIntegerValue == target.isSignedIntegerValue\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    // special in that it allows integer references as well\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(validWat: bool = false): string {\n    const nullablePostfix = validWat\n      ? \"|null\"\n      : \" | null\";\n    if (this.isReference) {\n      let classReference = this.getClass();\n      if (classReference) {\n        return this.isNullableReference\n          ? classReference.internalName + nullablePostfix\n          : classReference.internalName;\n      } else {\n        let signatureReference = this.getSignature();\n        if (signatureReference) {\n          return this.isNullableReference\n            ? \"(\" + signatureReference.toString(validWat) + \")\" + nullablePostfix\n            : signatureReference.toString(validWat);\n        }\n      }\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      case TypeKind.EQREF: return \"eqref\";\n      case TypeKind.I31REF: return \"i31ref\";\n      case TypeKind.DATAREF: return \"dataref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective type reference. */\n  toRef(): TypeRef {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return TypeRef.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return TypeRef.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return TypeRef.I64;\n      case TypeKind.F32: return TypeRef.F32;\n      case TypeKind.F64: return TypeRef.F64;\n      case TypeKind.V128: return TypeRef.V128;\n      // TODO: nullable/non-nullable refs have different type refs\n      case TypeKind.FUNCREF: return TypeRef.Funcref;\n      case TypeKind.EXTERNREF: return TypeRef.Externref;\n      case TypeKind.ANYREF: return TypeRef.Anyref;\n      case TypeKind.EQREF: return TypeRef.Eqref;\n      case TypeKind.I31REF: return TypeRef.I31ref;\n      case TypeKind.DATAREF: return TypeRef.Dataref;\n      case TypeKind.VOID: return TypeRef.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Function reference. */\n  static readonly funcref: Type = new Type(TypeKind.FUNCREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** External reference. */\n  static readonly externref: Type = new Type(TypeKind.EXTERNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Any reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Equatable reference. */\n  static readonly eqref: Type = new Type(TypeKind.EQREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** 31-bit integer reference. */\n  static readonly i31ref: Type = new Type(TypeKind.I31REF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Data reference. */\n  static readonly dataref: Type = new Type(TypeKind.DATAREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of type references. */\nexport function typesToRefs(types: Type[]): TypeRef[] {\n  var numTypes = types.length;\n  var ret = new Array<TypeRef>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toRef();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString(true);\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** Unique id representing this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    this.type = type;\n    type.signatureReference = this;\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get paramRefs(): TypeRef {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return TypeRef.None;\n      return thisType.toRef();\n    }\n    if (thisType) {\n      let typeRefs = new Array<TypeRef>(1 + numParameterTypes);\n      typeRefs[0] = thisType.toRef();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        typeRefs[i + 1] = parameterTypes[i].toRef();\n      }\n      return createType(typeRefs);\n    }\n    return createType(typesToRefs(parameterTypes));\n  }\n\n  get resultRefs(): TypeRef {\n    return this.returnType.toRef();\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Tests if this signature has at least one managed operand. */\n  get hasManagedOperands(): bool {\n    var thisType = this.thisType;\n    if (thisType) {\n      if (thisType.isManaged) return true;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (parameterTypes[i].isManaged) return true;\n    }\n    return false;\n  }\n\n  /** Gets the indices of all managed operands. */\n  getManagedOperandIndices(): i32[] {\n    var indices = new Array<i32>();\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (thisType.isManaged) {\n        indices.push(index);\n      }\n      ++index;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (parameterTypes[i].isManaged) {\n        indices.push(index);\n      }\n      ++index;\n    }\n    return indices;\n  }\n\n  /** Converts this signature to a string. */\n  toString(validWat: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(validWat ? \"%28\" : \"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(validWat ? \"this:\" : \"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString(validWat));\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(validWat ? \"%2C\" : \", \");\n        if (i == restIndex) sb.push(\"...\");\n        sb.push(parameters[i].toString(validWat));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?\");\n      }\n    }\n    sb.push(validWat ? \"%29=>\" : \") => \");\n    sb.push(this.returnType.toString(validWat));\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    return new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n  }\n}\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8\n       | i32(buffer[offset + 2]) << 16\n       | i32(buffer[offset + 3]) << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Writes a 32-bit integer as a 64-bit integer to the specified buffer. */\nexport function writeI32AsI64(value: i32, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  writeI32(value, buffer, offset);\n  writeI32(unsigned || value >= 0 ? 0 : -1, buffer, offset + 4);\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Writes a 64-bit integer as a 32-bit integer to the specified buffer. */\nexport function writeI64AsI32(value: i64, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  assert(unsigned ? i64_is_u32(value) : i64_is_i32(value));\n  writeI32(i64_low(value), buffer, offset);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\n/** Makes a unique map. Typically used to track contextual type arguemnts. */\nexport function uniqueMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./terminal\";\nexport * from \"./text\";\nexport * from \"./vector\";\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Terminal utility.\n * @license Apache-2.0\n */\n\n/** Gray terminal color code. */\nexport const COLOR_GRAY = \"\\u001b[90m\";\n/** Red terminal color code. */\nexport const COLOR_RED = \"\\u001b[91m\";\n/** Green terminal color code. */\nexport const COLOR_GREEN = \"\\u001b[92m\";\n/** Yellow terminal color code. */\nexport const COLOR_YELLOW = \"\\u001b[93m\";\n/** Blue terminal color code. */\nexport const COLOR_BLUE = \"\\u001b[94m\";\n/** Magenta terminal color code. */\nexport const COLOR_MAGENTA = \"\\u001b[95m\";\n/** Cyan terminal color code. */\nexport const COLOR_CYAN = \"\\u001b[96m\";\n/** White terminal color code. */\nexport const COLOR_WHITE = \"\\u001b[97m\";\n/** Terminal color reset code. */\nexport const COLOR_RESET = \"\\u001b[0m\";\n\n/** Whether terminal colors are enabled or not. */\nvar colorsEnabled = true;\n\n/** Checks whether terminal colors are enabled or not. */\nexport function isColorsEnabled(): bool {\n  return colorsEnabled;\n}\n\n/** Sets whether terminal colors are enabled or not. */\nexport function setColorsEnabled(isEnabled: bool): bool {\n  var wasEnabled = isEnabled;\n  colorsEnabled = isEnabled;\n  return wasEnabled;\n}\n\n/** Wraps the specified text in the specified terminal color code. */\nexport function colorize(text: string, color: string): string {\n  return colorsEnabled ? color + text + COLOR_RESET : text;\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid hexadecimal digit. */\nexport function isHexDigit(c: i32): bool {\n  return isDecimalDigit(c) || ((c | 32) >= CharCode.a && (c | 32) <= CharCode.f);\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  let c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Various vector utility.\n * @license Apache-2.0\n */\n\n/** v128 zero constant. */\nexport const v128_zero = new Uint8Array(16);\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9, // see: https://github.com/WebAssembly/multi-value\n  /** Garbage collection. */\n  GC = 1 << 10, // see: https://github.com/WebAssembly/gc\n  /** Memory64. */\n  MEMORY64 = 1 << 11 // see: https://github.com/WebAssembly/memory64\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n    case Feature.GC: return \"gc\";\n    case Feature.MEMORY64: return \"memory64\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** Portable. */\n  JS = 0,\n  /** WebAssembly with 32-bit pointers. */\n  WASM32 = 1,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64 = 2,\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type has no outgoing pointers. */\n  POINTERFREE = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function toText(watFormat = true) {\n  if (watFormat) {\n    // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n    // of unreachable statements not actually emitted by the compiler. Optimizing\n    // StackIR removes these again, but may also suppress useless code emitted by\n    // the compiler that's then no longer visible in tests. Both not ideal.\n    return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n  } else {\n    return binaryen.wrapModule(this.ref).emitText();\n  }\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n","/**\n * @fileoverview Floating point glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero    = Long.ZERO;\nglobal.i64_one     = Long.ONE;\nglobal.i64_neg_one = Long.fromInt(-1);\n\nglobal.i64_is = function i64_is(value) {\n  return Long.isLong(value);\n};\n\nglobal.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function i64_low(value) {\n  return value.low;\n};\n\nglobal.i64_high = function i64_high(value) {\n  return value.high;\n};\n\nglobal.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(global.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\nglobal.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function i64_not(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function i64_to_f32(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\nif (typeof globalScope.ASC_TARGET === \"undefined\") {\n\n  globalScope.ASC_TARGET = 0; // Target.JS\n  globalScope.ASC_NO_ASSERT = false;\n  globalScope.ASC_MEMORY_BASE = 0;\n  globalScope.ASC_OPTIMIZE_LEVEL = 3;\n  globalScope.ASC_SHRINK_LEVEL = 0;\n  globalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\n  globalScope.ASC_FEATURE_SIGN_EXTENSION = false;\n  globalScope.ASC_FEATURE_BULK_MEMORY = false;\n  globalScope.ASC_FEATURE_SIMD = false;\n  globalScope.ASC_FEATURE_THREADS = false;\n\n  var F64 = new Float64Array(1);\n  var U64 = new Uint32Array(F64.buffer);\n\n  Object.defineProperties(\n    globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n    {\n      \"MIN_VALUE\": { value: -128, writable: false },\n      \"MAX_VALUE\": { value:  127, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n    {\n      \"MIN_VALUE\": { value: -32768, writable: false },\n      \"MAX_VALUE\": { value:  32767, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n    {\n      \"MIN_VALUE\": { value: -2147483648, writable: false },\n      \"MAX_VALUE\": { value:  2147483647, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n    {\n      \"MIN_VALUE\": { value:   0, writable: false },\n      \"MAX_VALUE\": { value: 255, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n    {\n      \"MIN_VALUE\": { value:     0, writable: false },\n      \"MAX_VALUE\": { value: 65535, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n    {\n      \"MIN_VALUE\": { value:          0, writable: false },\n      \"MAX_VALUE\": { value: 4294967295, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"bool\"] = function bool(value) { return !!value; },\n    {\n      \"MIN_VALUE\": { value: false, writable: false },\n      \"MAX_VALUE\": { value: true,  writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n    {\n      \"EPSILON\":   { value: 1.1920928955078125e-07, writable: false },\n      \"MIN_VALUE\": { value: 1.4012984643248170e-45, writable: false },\n      \"MAX_VALUE\": { value: 3.4028234663852886e+38, writable: false },\n      \"MIN_NORMAL_VALUE\":  { value:  1.1754943508222875e-38, writable: false },\n      \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n      \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n      \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n      \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n      \"NaN\": { value: NaN, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"f64\"] = function f64(value) { return +value; },\n    {\n      \"EPSILON\":   { value: 2.2204460492503131e-016, writable: false },\n      \"MIN_VALUE\": { value:                  5e-324, writable: false },\n      \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n      \"MIN_NORMAL_VALUE\":  { value:  2.2250738585072014e-308, writable: false },\n      \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n      \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n      \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n      \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n      \"NaN\": { value: NaN, writable: false }\n    }\n  );\n\n  globalScope[\"clz\"] = Math.clz32;\n\n  globalScope[\"ctz\"] = function ctz(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  };\n\n  globalScope[\"popcnt\"] = function popcnt(value) {\n    value -= value >>> 1 & 0x55555555;\n    value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n    return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n  };\n\n  globalScope[\"rotl\"] = function rotl(value, shift) {\n    shift &= 31;\n    return (value << shift) | (value >>> (32 - shift));\n  };\n\n  globalScope[\"rotr\"] = function rotr(value, shift) {\n    shift &= 31;\n    return (value >>> shift) | (value << (32 - shift));\n  };\n\n  globalScope[\"abs\"] = Math.abs;\n\n  globalScope[\"max\"] = Math.max;\n\n  globalScope[\"min\"] = Math.min;\n\n  globalScope[\"ceil\"] = Math.ceil;\n\n  globalScope[\"floor\"] = Math.floor;\n\n  // Adopt code from https://github.com/rfk/wasm-polyfill\n  globalScope[\"nearest\"] = function nearest(value) {\n    if (Math.abs(value - Math.trunc(value)) === 0.5) {\n      return 2.0 * Math.round(value * 0.5);\n    }\n    return Math.round(value);\n  };\n\n  globalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n    return condition ? ifTrue : ifFalse;\n  };\n\n  globalScope[\"sqrt\"] = Math.sqrt;\n\n  globalScope[\"trunc\"] = Math.trunc;\n\n  globalScope[\"copysign\"] = function copysign(x, y) {\n    return Math.abs(x) * Math.sign(y);\n  };\n\n  globalScope[\"bswap\"] = function bswap(value) {\n    var a = value >> 8 & 0x00FF00FF;\n    var b = (value & 0x00FF00FF) << 8;\n    value = a | b;\n    a = value >> 16 & 0x0000FFFF;\n    b = (value & 0x0000FFFF) << 16;\n    return a | b;\n  };\n\n  globalScope[\"bswap16\"] = function bswap16(value) {\n    return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n  };\n\n  function UnreachableError() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, UnreachableError);\n    } else {\n      this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n    }\n  }\n  UnreachableError.prototype = Object.create(Error.prototype);\n  UnreachableError.prototype.name = \"UnreachableError\";\n  UnreachableError.prototype.message = \"unreachable\";\n\n  globalScope[\"unreachable\"] = function unreachable() {\n    throw new UnreachableError();\n  };\n\n  function AssertionError(message) {\n    this.message = message || \"assertion failed\";\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AssertionError);\n    } else {\n      this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n    }\n  }\n  AssertionError.prototype = Object.create(Error.prototype);\n  AssertionError.prototype.name = \"AssertionError\";\n\n  globalScope[\"assert\"] = function assert(isTrueish, message) {\n    if (isTrueish) return isTrueish;\n    throw new AssertionError(message);\n  };\n\n  globalScope[\"changetype\"] = function changetype(value) {\n    return value;\n  };\n\n  String[\"fromCharCodes\"] = function fromCharCodes(arr) {\n    const CHUNKSIZE = 1 << 13;\n    const len = arr.length;\n    if (len <= CHUNKSIZE) {\n      return String.fromCharCode.apply(String, arr);\n    }\n    let index = 0;\n    let parts = '';\n    while (index < len) {\n      parts += String.fromCharCode.apply(\n        String,\n        arr.slice(index, Math.min(index + CHUNKSIZE, len))\n      );\n      index += CHUNKSIZE;\n    }\n    return parts;\n  };\n\n  String[\"fromCodePoints\"] = function fromCodePoints(arr) {\n    const CHUNKSIZE = 1 << 13;\n    const len = arr.length;\n    if (len <= CHUNKSIZE) {\n      return String.fromCodePoint.apply(String, arr);\n    }\n    let index = 0;\n    let parts = '';\n    while (index < len) {\n      parts += String.fromCodePoint.apply(\n        String,\n        arr.slice(index, Math.min(index + CHUNKSIZE, len))\n      );\n      index += CHUNKSIZE;\n    }\n    return parts;\n  };\n\n  if (!String.prototype.at) {\n    Object.defineProperty(String.prototype, \"at\", {\n      value: function at(index) {\n        return this.charAt(index >= 0 ? index : index + this.length);\n      },\n      configurable: true\n    });\n  }\n\n  if (!String.prototype.replaceAll) {\n    Object.defineProperty(String.prototype, \"replaceAll\", {\n      value: function replaceAll(search, replacment) {\n        var res = this.split(search).join(replacment);\n        if (!search.length) res = replacment + res + replacment;\n        return res;\n      },\n      configurable: true\n    });\n  }\n\n  function defaultComparator(a, b) {\n    if (a === b) {\n      if (a !== 0) return 0;\n      a = 1 / a, b = 1 / b;\n    } else {\n      var nanA = a != a, nanB = b != b;\n      if (nanA | nanB) return nanA - nanB;\n      if (a == null) a = String(a);\n      if (b == null) b = String(b);\n    }\n    return a > b ? 1 : -1;\n  }\n\n  const arraySort = Array.prototype.sort;\n  Array.prototype.sort = function sort(comparator) {\n    return arraySort.call(this, comparator || defaultComparator);\n  };\n\n  [ Array,\n    Uint8ClampedArray,\n    Uint8Array, Int8Array,\n    Uint16Array, Int16Array,\n    Uint32Array, Int32Array,\n    Float32Array, Float64Array\n  ].forEach(Ctr => {\n    if (!Ctr.prototype.at) {\n      Object.defineProperty(Ctr.prototype, \"at\", {\n        value: function at(index) {\n          return this[index >= 0 ? index : index + this.length];\n        },\n        configurable: true\n      });\n    }\n\n    if (!Ctr.prototype.findLastIndex) {\n      Object.defineProperty(Ctr.prototype, \"findLastIndex\", {\n        value: function findLastIndex(fn) {\n          for (let i = this.length - 1; i >= 0; --i) {\n            if (fn(this[i], i, this)) return i;\n          }\n          return -1;\n        },\n        configurable: true\n      });\n    }\n  });\n\n  globalScope[\"isInteger\"] = Number.isInteger;\n\n  globalScope[\"isFloat\"] = function isFloat(arg) {\n    return typeof arg === \"number\";\n  };\n\n  globalScope[\"isNullable\"] = function isNullable(arg) {\n    return true;\n  };\n\n  globalScope[\"isReference\"] = function isReference(arg) {\n    return typeof arg === \"object\" || typeof arg === \"string\";\n  };\n\n  globalScope[\"isFunction\"] = function isFunction(arg) {\n    return typeof arg === \"function\";\n  };\n\n  globalScope[\"isString\"] = function isString(arg) {\n    return typeof arg === \"string\" || arg instanceof String;\n  };\n\n  globalScope[\"isArray\"] = Array.isArray;\n  globalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n    return expr\n      && typeof expr === 'object'\n      && typeof expr.length === 'number'\n      && expr.length >= 0\n      && Math.trunc(expr.length) === expr.length;\n  };\n\n  globalScope[\"isDefined\"] = function isDefined(expr) {\n    return typeof expr !== \"undefined\";\n  };\n\n  globalScope[\"isConstant\"] = function isConstant(expr) {\n    return false;\n  };\n\n  globalScope[\"unchecked\"] = function unchecked(expr) {\n    return expr;\n  };\n\n  globalScope[\"fmod\"] = function fmod(x, y) {\n    return x % y;\n  };\n\n  globalScope[\"fmodf\"] = function fmodf(x, y) {\n    return Math.fround(x % y);\n  };\n\n  globalScope[\"JSMath\"] = Math;\n\n  Object.defineProperties(globalScope[\"JSMath\"], {\n    sincos_sin: { value: 0.0, writable: true },\n    sincos_cos: { value: 0.0, writable: true },\n    signbit: {\n      value: function signbit(x) {\n        F64[0] = x; return Boolean(U64[1] >>> 31);\n      }\n    },\n    sincos: {\n      value: function sincos(x) {\n        this.sincos_sin = Math.sin(x);\n        this.sincos_cos = Math.cos(x);\n      }\n    },\n    exp2: {\n      value: function exp2(x) {\n        return Math.pow(2, x);\n      }\n    }\n  });\n\n  globalScope[\"unmanaged\"] = function() { /* nop */ };\n\n  globalScope[\"trace\"] = function(message, n) {\n    if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n    console.error(\"trace: \" + message);\n  };\n\n  Object.defineProperty(Int8Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Int8Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Uint8Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Uint8Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Uint8ClampedArray, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Uint8ClampedArray(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Int16Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Int16Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Uint16Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Uint16Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Int32Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Int32Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Uint32Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Uint32Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Float32Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Float32Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Float64Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Float64Array(buffer, byteOffset, length);\n    }\n  });\n} else {\n  console.warn(\"compiler mismatch: std/portable included twice\");\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__911__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n__webpack_require__(308);\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(780);\n"],"sourceRoot":""}