{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nasync function exponentialBackoff(startWaitTime, retryNumber, waitBackoff, getResult) {\n  // TODO: jitter?\n  let waitTime = startWaitTime;\n\n  for (let i = 0; i < retryNumber; i++) {\n    const result = await getResult();\n\n    if (result) {\n      return result;\n    }\n\n    await sleep(waitTime);\n    waitTime *= waitBackoff;\n  }\n\n  return null;\n}\n\nexports.default = exponentialBackoff; // Sleep given number of millis.\n\nfunction sleep(millis) {\n  return new Promise(resolve => setTimeout(resolve, millis));\n}","map":{"version":3,"sources":["/home/jjsullivan/near-roster-ux-project/roster-ux-app/roster-ux-web/node_modules/near-api-js/lib/utils/exponential-backoff.js"],"names":["Object","defineProperty","exports","value","exponentialBackoff","startWaitTime","retryNumber","waitBackoff","getResult","waitTime","i","result","sleep","default","millis","Promise","resolve","setTimeout"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,eAAeC,kBAAf,CAAkCC,aAAlC,EAAiDC,WAAjD,EAA8DC,WAA9D,EAA2EC,SAA3E,EAAsF;AAClF;AACA,MAAIC,QAAQ,GAAGJ,aAAf;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAApB,EAAiCI,CAAC,EAAlC,EAAsC;AAClC,UAAMC,MAAM,GAAG,MAAMH,SAAS,EAA9B;;AACA,QAAIG,MAAJ,EAAY;AACR,aAAOA,MAAP;AACH;;AACD,UAAMC,KAAK,CAACH,QAAD,CAAX;AACAA,IAAAA,QAAQ,IAAIF,WAAZ;AACH;;AACD,SAAO,IAAP;AACH;;AACDL,OAAO,CAACW,OAAR,GAAkBT,kBAAlB,C,CACA;;AACA,SAASQ,KAAT,CAAeE,MAAf,EAAuB;AACnB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,MAAV,CAAjC,CAAP;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function exponentialBackoff(startWaitTime, retryNumber, waitBackoff, getResult) {\n    // TODO: jitter?\n    let waitTime = startWaitTime;\n    for (let i = 0; i < retryNumber; i++) {\n        const result = await getResult();\n        if (result) {\n            return result;\n        }\n        await sleep(waitTime);\n        waitTime *= waitBackoff;\n    }\n    return null;\n}\nexports.default = exponentialBackoff;\n// Sleep given number of millis.\nfunction sleep(millis) {\n    return new Promise(resolve => setTimeout(resolve, millis));\n}\n"]},"metadata":{},"sourceType":"script"}