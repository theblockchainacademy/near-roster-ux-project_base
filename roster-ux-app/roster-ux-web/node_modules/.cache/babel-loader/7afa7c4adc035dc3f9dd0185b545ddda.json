{"ast":null,"code":"'use strict';\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffEpochValidators = exports.findSeatPrice = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/** Finds seat price given validators stakes and number of seats.\n *  Calculation follow the spec: https://nomicon.io/Economics/README.html#validator-selection\n * @params validators: current or next epoch validators.\n * @params numSeats: number of seats.\n */\n\n\nfunction findSeatPrice(validators, numSeats) {\n  const stakes = validators.map(v => new bn_js_1.default(v.stake, 10)).sort((a, b) => a.cmp(b));\n  const num = new bn_js_1.default(numSeats);\n  const stakesSum = stakes.reduce((a, b) => a.add(b));\n\n  if (stakesSum.lt(num)) {\n    throw new Error('Stakes are below seats');\n  } // assert stakesSum >= numSeats\n\n\n  let left = new bn_js_1.default(1),\n      right = stakesSum.add(new bn_js_1.default(1));\n\n  while (!left.eq(right.sub(new bn_js_1.default(1)))) {\n    const mid = left.add(right).div(new bn_js_1.default(2));\n    let found = false;\n    let currentSum = new bn_js_1.default(0);\n\n    for (let i = 0; i < stakes.length; ++i) {\n      currentSum = currentSum.add(stakes[i].div(mid));\n\n      if (currentSum.gte(num)) {\n        left = mid;\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      right = mid;\n    }\n  }\n\n  return left;\n}\n\nexports.findSeatPrice = findSeatPrice;\n/** Diff validators between current and next epoch.\n * Returns additions, subtractions and changes to validator set.\n * @params currentValidators: list of current validators.\n * @params nextValidators: list of next validators.\n */\n\nfunction diffEpochValidators(currentValidators, nextValidators) {\n  const validatorsMap = new Map();\n  currentValidators.forEach(v => validatorsMap.set(v.account_id, v));\n  const nextValidatorsSet = new Set(nextValidators.map(v => v.account_id));\n  return {\n    newValidators: nextValidators.filter(v => !validatorsMap.has(v.account_id)),\n    removedValidators: currentValidators.filter(v => !nextValidatorsSet.has(v.account_id)),\n    changedValidators: nextValidators.filter(v => validatorsMap.has(v.account_id) && validatorsMap.get(v.account_id).stake != v.stake).map(v => ({\n      current: validatorsMap.get(v.account_id),\n      next: v\n    }))\n  };\n}\n\nexports.diffEpochValidators = diffEpochValidators;","map":{"version":3,"sources":["/home/jjsullivan/near-roster-ux-project_base/roster-ux-app/roster-ux-web/node_modules/near-api-js/lib/validators.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","diffEpochValidators","findSeatPrice","bn_js_1","require","validators","numSeats","stakes","map","v","default","stake","sort","a","b","cmp","num","stakesSum","reduce","add","lt","Error","left","right","eq","sub","mid","div","found","currentSum","i","length","gte","currentValidators","nextValidators","validatorsMap","Map","forEach","set","account_id","nextValidatorsSet","Set","newValidators","filter","has","removedValidators","changedValidators","get","current","next"],"mappings":"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","sourcesContent":["'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.diffEpochValidators = exports.findSeatPrice = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/** Finds seat price given validators stakes and number of seats.\n *  Calculation follow the spec: https://nomicon.io/Economics/README.html#validator-selection\n * @params validators: current or next epoch validators.\n * @params numSeats: number of seats.\n */\nfunction findSeatPrice(validators, numSeats) {\n    const stakes = validators.map(v => new bn_js_1.default(v.stake, 10)).sort((a, b) => a.cmp(b));\n    const num = new bn_js_1.default(numSeats);\n    const stakesSum = stakes.reduce((a, b) => a.add(b));\n    if (stakesSum.lt(num)) {\n        throw new Error('Stakes are below seats');\n    }\n    // assert stakesSum >= numSeats\n    let left = new bn_js_1.default(1), right = stakesSum.add(new bn_js_1.default(1));\n    while (!left.eq(right.sub(new bn_js_1.default(1)))) {\n        const mid = left.add(right).div(new bn_js_1.default(2));\n        let found = false;\n        let currentSum = new bn_js_1.default(0);\n        for (let i = 0; i < stakes.length; ++i) {\n            currentSum = currentSum.add(stakes[i].div(mid));\n            if (currentSum.gte(num)) {\n                left = mid;\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            right = mid;\n        }\n    }\n    return left;\n}\nexports.findSeatPrice = findSeatPrice;\n/** Diff validators between current and next epoch.\n * Returns additions, subtractions and changes to validator set.\n * @params currentValidators: list of current validators.\n * @params nextValidators: list of next validators.\n */\nfunction diffEpochValidators(currentValidators, nextValidators) {\n    const validatorsMap = new Map();\n    currentValidators.forEach(v => validatorsMap.set(v.account_id, v));\n    const nextValidatorsSet = new Set(nextValidators.map(v => v.account_id));\n    return {\n        newValidators: nextValidators.filter(v => !validatorsMap.has(v.account_id)),\n        removedValidators: currentValidators.filter(v => !nextValidatorsSet.has(v.account_id)),\n        changedValidators: nextValidators.filter(v => (validatorsMap.has(v.account_id) && validatorsMap.get(v.account_id).stake != v.stake))\n            .map(v => ({ current: validatorsMap.get(v.account_id), next: v }))\n    };\n}\nexports.diffEpochValidators = diffEpochValidators;\n"]},"metadata":{},"sourceType":"script"}