{"ast":null,"code":"var _jsxFileName = \"/home/jjsullivan/near-roster-ux-project/roster-ux-app/roster-ux-web/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js'; // Initializing contract\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function initContract() {\n  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet'); // Initializing connection to the NEAR TestNet\n\n  const near = await nearAPI.connect({\n    deps: {\n      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()\n    },\n    ...nearConfig\n  }); // Needed to access wallet\n\n  const walletConnection = new nearAPI.WalletConnection(near); // Load in account data\n\n  let currentUser;\n\n  if (walletConnection.getAccountId()) {\n    currentUser = {\n      accountId: walletConnection.getAccountId(),\n      balance: (await walletConnection.account().state()).amount\n    };\n  } // Initializing our contract APIs by contract name and configuration\n\n\n  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {\n    // View methods are read-only – they don't modify the state, but usually return some value\n    viewMethods: [\"get\"],\n    // Change methods can modify the state, but you don't receive the returned value when called\n    changeMethods: [\"create\", \"update\", \"del\"],\n    // Sender is the account ID to initialize transactions.\n    // getAccountId() will return empty string if user is still unauthorized\n    sender: walletConnection.getAccountId()\n  });\n  return {\n    contract,\n    currentUser,\n    nearConfig,\n    walletConnection\n  };\n}\n\nwindow.nearInitPromise = initContract().then(({\n  contract,\n  currentUser,\n  nearConfig,\n  walletConnection\n}) => {\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(App, {\n    contract: contract,\n    currentUser: currentUser,\n    nearConfig: nearConfig,\n    wallet: walletConnection\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this), document.getElementById('root'));\n});","map":{"version":3,"sources":["/home/jjsullivan/near-roster-ux-project/roster-ux-app/roster-ux-web/src/index.js"],"names":["React","ReactDOM","App","getConfig","nearAPI","initContract","nearConfig","process","env","NODE_ENV","near","connect","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","walletConnection","WalletConnection","currentUser","getAccountId","accountId","balance","account","state","amount","contract","Contract","contractName","viewMethods","changeMethods","sender","window","nearInitPromise","then","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,aAAzB,C,CAEA;;;;AACA,eAAeC,YAAf,GAA8B;AAC5B,QAAMC,UAAU,GAAGH,SAAS,CAACI,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,SAAzB,CAA5B,CAD4B,CAG5B;;AACA,QAAMC,IAAI,GAAG,MAAMN,OAAO,CAACO,OAAR,CAAgB;AACjCC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,IAAIT,OAAO,CAACU,SAAR,CAAkBC,2BAAtB;AADN,KAD2B;AAIjC,OAAGT;AAJ8B,GAAhB,CAAnB,CAJ4B,CAW5B;;AACA,QAAMU,gBAAgB,GAAG,IAAIZ,OAAO,CAACa,gBAAZ,CAA6BP,IAA7B,CAAzB,CAZ4B,CAc5B;;AACA,MAAIQ,WAAJ;;AACA,MAAGF,gBAAgB,CAACG,YAAjB,EAAH,EAAoC;AAClCD,IAAAA,WAAW,GAAG;AACZE,MAAAA,SAAS,EAAEJ,gBAAgB,CAACG,YAAjB,EADC;AAEZE,MAAAA,OAAO,EAAE,CAAC,MAAML,gBAAgB,CAACM,OAAjB,GAA2BC,KAA3B,EAAP,EAA2CC;AAFxC,KAAd;AAID,GArB2B,CAuB5B;;;AACA,QAAMC,QAAQ,GAAG,MAAM,IAAIrB,OAAO,CAACsB,QAAZ,CAAqBV,gBAAgB,CAACM,OAAjB,EAArB,EAAiDhB,UAAU,CAACqB,YAA5D,EAA0E;AAC/F;AACAC,IAAAA,WAAW,EAAE,CAAC,KAAD,CAFkF;AAG/F;AACAC,IAAAA,aAAa,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,KAArB,CAJgF;AAK/F;AACA;AACAC,IAAAA,MAAM,EAAEd,gBAAgB,CAACG,YAAjB;AAPuF,GAA1E,CAAvB;AAUA,SAAO;AAAEM,IAAAA,QAAF;AAAYP,IAAAA,WAAZ;AAAyBZ,IAAAA,UAAzB;AAAqCU,IAAAA;AAArC,GAAP;AACD;;AAEDe,MAAM,CAACC,eAAP,GAAyB3B,YAAY,GAClC4B,IADsB,CACjB,CAAC;AAAER,EAAAA,QAAF;AAAYP,EAAAA,WAAZ;AAAyBZ,EAAAA,UAAzB;AAAqCU,EAAAA;AAArC,CAAD,KAA6D;AACjEf,EAAAA,QAAQ,CAACiC,MAAT,eACE,QAAC,GAAD;AACE,IAAA,QAAQ,EAAET,QADZ;AAEE,IAAA,WAAW,EAAEP,WAFf;AAGE,IAAA,UAAU,EAAEZ,UAHd;AAIE,IAAA,MAAM,EAAEU;AAJV;AAAA;AAAA;AAAA;AAAA,UADF,EAOEmB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF;AASD,CAXsB,CAAzB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n// Initializing contract\nasync function initContract() {\n  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');\n\n  // Initializing connection to the NEAR TestNet\n  const near = await nearAPI.connect({\n    deps: {\n      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()\n    },\n    ...nearConfig\n  });\n\n  // Needed to access wallet\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in account data\n  let currentUser;\n  if(walletConnection.getAccountId()) {\n    currentUser = {\n      accountId: walletConnection.getAccountId(),\n      balance: (await walletConnection.account().state()).amount\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {\n    // View methods are read-only – they don't modify the state, but usually return some value\n    viewMethods: [\"get\"],\n    // Change methods can modify the state, but you don't receive the returned value when called\n    changeMethods: [\"create\", \"update\", \"del\"],\n    // Sender is the account ID to initialize transactions.\n    // getAccountId() will return empty string if user is still unauthorized\n    sender: walletConnection.getAccountId()\n  });\n\n  return { contract, currentUser, nearConfig, walletConnection };\n}\n\nwindow.nearInitPromise = initContract()\n  .then(({ contract, currentUser, nearConfig, walletConnection }) => {\n    ReactDOM.render(\n      <App\n        contract={contract}\n        currentUser={currentUser}\n        nearConfig={nearConfig}\n        wallet={walletConnection}\n      />,\n      document.getElementById('root')\n    );\n  });"]},"metadata":{},"sourceType":"module"}