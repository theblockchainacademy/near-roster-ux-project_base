{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\n\nconst depd_1 = __importDefault(require(\"depd\"));\n\nconst provider_1 = require(\"./provider\");\n\nconst web_1 = require(\"../utils/web\");\n\nconst errors_1 = require(\"../utils/errors\");\n\nObject.defineProperty(exports, \"TypedError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.TypedError;\n  }\n});\nObject.defineProperty(exports, \"ErrorContext\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.ErrorContext;\n  }\n});\n\nconst borsh_1 = require(\"borsh\");\n\nconst exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\n\nconst rpc_errors_1 = require(\"../utils/rpc_errors\"); // Default number of retries before giving up on a request.\n\n\nconst REQUEST_RETRY_NUMBER = 12; // Default wait until next retry in millis.\n\nconst REQUEST_RETRY_WAIT = 500; // Exponential back off for waiting to retry.\n\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5; /// Keep ids unique across all connections.\n\nlet _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\n\nclass JsonRpcProvider extends provider_1.Provider {\n  /**\n   * @param url RPC API endpoint URL\n   */\n  constructor(url) {\n    super();\n    this.connection = {\n      url\n    };\n  }\n  /**\n   * Gets the RPC's status\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n   */\n\n\n  async status() {\n    return this.sendJsonRpc('status', []);\n  }\n  /**\n   * Sends a signed transaction to the RPC and waits until transaction is fully complete\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n   *\n   * @param signedTransaction The signed transaction being sent\n   */\n\n\n  async sendTransaction(signedTransaction) {\n    const bytes = signedTransaction.encode();\n    return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n  }\n  /**\n   * Sends a signed transaction to the RPC and immediately returns transaction hash\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n   * @param signedTransaction The signed transaction being sent\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  async sendTransactionAsync(signedTransaction) {\n    const bytes = signedTransaction.encode();\n    return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n  }\n  /**\n   * Gets a transaction's status from the RPC\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n   *\n   * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n   * @param accountId The NEAR account that signed the transaction\n   */\n\n\n  async txStatus(txHash, accountId) {\n    if (typeof txHash === 'string') {\n      return this.txStatusString(txHash, accountId);\n    } else {\n      return this.txStatusUint8Array(txHash, accountId);\n    }\n  }\n\n  async txStatusUint8Array(txHash, accountId) {\n    return this.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]);\n  }\n\n  async txStatusString(txHash, accountId) {\n    return this.sendJsonRpc('tx', [txHash, accountId]);\n  }\n  /**\n   * Gets a transaction's status from the RPC with receipts\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n   * @param txHash The hash of the transaction\n   * @param accountId The NEAR account that signed the transaction\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  async txStatusReceipts(txHash, accountId) {\n    return this.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]);\n  }\n  /**\n   * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n   * Query the RPC by passing an {@link RpcQueryRequest}\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n   *\n   * @typeParam T the shape of the returned query response\n   */\n\n\n  async query(...args) {\n    let result;\n\n    if (args.length === 1) {\n      result = await this.sendJsonRpc('query', args[0]);\n    } else {\n      const [path, data] = args;\n      result = await this.sendJsonRpc('query', [path, data]);\n    }\n\n    if (result && result.error) {\n      throw new errors_1.TypedError(`Querying ${args} failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, rpc_errors_1.getErrorTypeFromErrorMessage(result.error));\n    }\n\n    return result;\n  }\n  /**\n   * Query for block info from the RPC\n   * pass block_id OR finality as blockQuery, not both\n   * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n   *\n   * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n   */\n\n\n  async block(blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    let {\n      blockId\n    } = blockQuery;\n\n    if (typeof blockQuery !== 'object') {\n      const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n      deprecate('use `block({ blockId })` or `block({ finality })` instead');\n      blockId = blockQuery;\n    }\n\n    return this.sendJsonRpc('block', {\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Query changes in block from the RPC\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n   */\n\n\n  async blockChanges(blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', {\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n   * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n   *\n   * @param chunkId Hash of a chunk ID or shard ID\n   */\n\n\n  async chunk(chunkId) {\n    return this.sendJsonRpc('chunk', [chunkId]);\n  }\n  /**\n   * Query validators of the epoch defined by the given block id.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n   *\n   * @param blockId Block hash or height, or null for latest.\n   */\n\n\n  async validators(blockId) {\n    return this.sendJsonRpc('validators', [blockId]);\n  }\n  /**\n   * @deprecated\n   * Gets the genesis config from RPC\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}\n   */\n\n\n  async experimental_genesisConfig() {\n    const deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');\n    deprecate('use `experimental_protocolConfig({ sync_checkpoint: \\'genesis\\' })` to fetch the up-to-date or genesis protocol config explicitly');\n    return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', {\n      sync_checkpoint: 'genesis'\n    });\n  }\n  /**\n   * Gets the protocol config at a block from RPC\n   * @see {@link }\n   *\n   * @param blockReference specifies the block to get the protocol config for\n   */\n\n\n  async experimental_protocolConfig(blockReference) {\n    return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n  }\n  /**\n   * @deprecated Use {@link lightClientProof} instead\n   */\n\n\n  async experimental_lightClientProof(request) {\n    const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n    deprecate('use `lightClientProof` instead');\n    return await this.lightClientProof(request);\n  }\n  /**\n   * Gets a light client execution proof for verifying execution outcomes\n   * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n   */\n\n\n  async lightClientProof(request) {\n    return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n  }\n  /**\n   * Gets access key changes for a given array of accountIds\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  async accessKeyChanges(accountIdArray, blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes', {\n      changes_type: 'all_access_key_changes',\n      account_ids: accountIdArray,\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Gets single access key changes for a given array of access keys\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  async singleAccessKeyChanges(accessKeyArray, blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes', {\n      changes_type: 'single_access_key_changes',\n      keys: accessKeyArray,\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Gets account changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  async accountChanges(accountIdArray, blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes', {\n      changes_type: 'account_changes',\n      account_ids: accountIdArray,\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Gets contract state changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * Note: If you pass a keyPrefix it must be base64 encoded\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  async contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes', {\n      changes_type: 'data_changes',\n      account_ids: accountIdArray,\n      key_prefix_base64: keyPrefix,\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Gets contract code changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * Note: Change is returned in a base64 encoded WASM file\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  async contractCodeChanges(accountIdArray, blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes', {\n      changes_type: 'contract_code_changes',\n      account_ids: accountIdArray,\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Returns gas price for a specific block_height or block_hash.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n   *\n   * @param blockId Block hash or height, or null for latest.\n   */\n\n\n  async gasPrice(blockId) {\n    return await this.sendJsonRpc('gas_price', [blockId]);\n  }\n  /**\n   * Directly call the RPC specifying the method and params\n   *\n   * @param method RPC method\n   * @param params Parameters to the method\n   */\n\n\n  async sendJsonRpc(method, params) {\n    const response = await exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, async () => {\n      try {\n        const request = {\n          method,\n          params,\n          id: _nextId++,\n          jsonrpc: '2.0'\n        };\n        const response = await web_1.fetchJson(this.connection, JSON.stringify(request));\n\n        if (response.error) {\n          if (typeof response.error.data === 'object') {\n            if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n              // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n              throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n            }\n\n            throw rpc_errors_1.parseRpcError(response.error.data);\n          } else {\n            const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`; // NOTE: All this hackery is happening because structured errors not implemented\n            // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n\n            if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error') || errorMessage.includes('query has timed out')) {\n              throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n            }\n\n            throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(response.error.data));\n          }\n        } // Success when response.error is not exist\n\n\n        return response;\n      } catch (error) {\n        if (error.type === 'TimeoutError') {\n          console.warn(`Retrying request to ${method} as it has timed out`, params);\n          return null;\n        }\n\n        throw error;\n      }\n    });\n    const {\n      result\n    } = response; // From jsonrpc spec:\n    // result\n    //   This member is REQUIRED on success.\n    //   This member MUST NOT exist if there was an error invoking the method.\n\n    if (typeof result === 'undefined') {\n      throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');\n    }\n\n    return result;\n  }\n\n}\n\nexports.JsonRpcProvider = JsonRpcProvider;","map":{"version":3,"sources":["/home/jjsullivan/near-roster-ux-project/roster-ux-app/todos-crud-web/node_modules/near-api-js/lib/providers/json-rpc-provider.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","JsonRpcProvider","ErrorContext","TypedError","depd_1","require","provider_1","web_1","errors_1","enumerable","get","borsh_1","exponential_backoff_1","rpc_errors_1","REQUEST_RETRY_NUMBER","REQUEST_RETRY_WAIT","REQUEST_RETRY_WAIT_BACKOFF","_nextId","Provider","constructor","url","connection","status","sendJsonRpc","sendTransaction","signedTransaction","bytes","encode","Buffer","from","toString","sendTransactionAsync","txStatus","txHash","accountId","txStatusString","txStatusUint8Array","baseEncode","txStatusReceipts","query","args","result","length","path","data","error","JSON","stringify","getErrorTypeFromErrorMessage","block","blockQuery","finality","blockId","deprecate","default","block_id","blockChanges","chunk","chunkId","validators","experimental_genesisConfig","sync_checkpoint","experimental_protocolConfig","blockReference","experimental_lightClientProof","request","lightClientProof","accessKeyChanges","accountIdArray","changes_type","account_ids","singleAccessKeyChanges","accessKeyArray","keys","accountChanges","contractStateChanges","keyPrefix","key_prefix_base64","contractCodeChanges","gasPrice","method","params","response","id","jsonrpc","fetchJson","error_message","error_type","parseRpcError","errorMessage","code","message","includes","type","console","warn"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\nconst depd_1 = __importDefault(require(\"depd\"));\nconst provider_1 = require(\"./provider\");\nconst web_1 = require(\"../utils/web\");\nconst errors_1 = require(\"../utils/errors\");\nObject.defineProperty(exports, \"TypedError\", { enumerable: true, get: function () { return errors_1.TypedError; } });\nObject.defineProperty(exports, \"ErrorContext\", { enumerable: true, get: function () { return errors_1.ErrorContext; } });\nconst borsh_1 = require(\"borsh\");\nconst exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\nconst rpc_errors_1 = require(\"../utils/rpc_errors\");\n// Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\nclass JsonRpcProvider extends provider_1.Provider {\n    /**\n     * @param url RPC API endpoint URL\n     */\n    constructor(url) {\n        super();\n        this.connection = { url };\n    }\n    /**\n     * Gets the RPC's status\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n     */\n    async status() {\n        return this.sendJsonRpc('status', []);\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n    async sendTransaction(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async sendTransactionAsync(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */\n    async txStatus(txHash, accountId) {\n        if (typeof txHash === 'string') {\n            return this.txStatusString(txHash, accountId);\n        }\n        else {\n            return this.txStatusUint8Array(txHash, accountId);\n        }\n    }\n    async txStatusUint8Array(txHash, accountId) {\n        return this.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]);\n    }\n    async txStatusString(txHash, accountId) {\n        return this.sendJsonRpc('tx', [txHash, accountId]);\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async txStatusReceipts(txHash, accountId) {\n        return this.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]);\n    }\n    /**\n     * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n     * Query the RPC by passing an {@link RpcQueryRequest}\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n     *\n     * @typeParam T the shape of the returned query response\n     */\n    async query(...args) {\n        let result;\n        if (args.length === 1) {\n            result = await this.sendJsonRpc('query', args[0]);\n        }\n        else {\n            const [path, data] = args;\n            result = await this.sendJsonRpc('query', [path, data]);\n        }\n        if (result && result.error) {\n            throw new errors_1.TypedError(`Querying ${args} failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, rpc_errors_1.getErrorTypeFromErrorMessage(result.error));\n        }\n        return result;\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n    async block(blockQuery) {\n        const { finality } = blockQuery;\n        let { blockId } = blockQuery;\n        if (typeof blockQuery !== 'object') {\n            const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n            deprecate('use `block({ blockId })` or `block({ finality })` instead');\n            blockId = blockQuery;\n        }\n        return this.sendJsonRpc('block', { block_id: blockId, finality });\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n     */\n    async blockChanges(blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n    async chunk(chunkId) {\n        return this.sendJsonRpc('chunk', [chunkId]);\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async validators(blockId) {\n        return this.sendJsonRpc('validators', [blockId]);\n    }\n    /**\n     * @deprecated\n     * Gets the genesis config from RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}\n     */\n    async experimental_genesisConfig() {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');\n        deprecate('use `experimental_protocolConfig({ sync_checkpoint: \\'genesis\\' })` to fetch the up-to-date or genesis protocol config explicitly');\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', { sync_checkpoint: 'genesis' });\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     * @see {@link }\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n    async experimental_protocolConfig(blockReference) {\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n    }\n    /**\n     * @deprecated Use {@link lightClientProof} instead\n     */\n    async experimental_lightClientProof(request) {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n        deprecate('use `lightClientProof` instead');\n        return await this.lightClientProof(request);\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n     */\n    async lightClientProof(request) {\n        return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accessKeyChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'all_access_key_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n    async singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'single_access_key_changes',\n            keys: accessKeyArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accountChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'account_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'data_changes',\n            account_ids: accountIdArray,\n            key_prefix_base64: keyPrefix,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractCodeChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'contract_code_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async gasPrice(blockId) {\n        return await this.sendJsonRpc('gas_price', [blockId]);\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n    async sendJsonRpc(method, params) {\n        const response = await exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, async () => {\n            try {\n                const request = {\n                    method,\n                    params,\n                    id: (_nextId++),\n                    jsonrpc: '2.0'\n                };\n                const response = await web_1.fetchJson(this.connection, JSON.stringify(request));\n                if (response.error) {\n                    if (typeof response.error.data === 'object') {\n                        if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                            throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                        }\n                        throw rpc_errors_1.parseRpcError(response.error.data);\n                    }\n                    else {\n                        const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                        // NOTE: All this hackery is happening because structured errors not implemented\n                        // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                        if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')\n                            || errorMessage.includes('query has timed out')) {\n                            throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n                        }\n                        throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(response.error.data));\n                    }\n                }\n                // Success when response.error is not exist\n                return response;\n            }\n            catch (error) {\n                if (error.type === 'TimeoutError') {\n                    console.warn(`Retrying request to ${method} as it has timed out`, params);\n                    return null;\n                }\n                throw error;\n            }\n        });\n        const { result } = response;\n        // From jsonrpc spec:\n        // result\n        //   This member is REQUIRED on success.\n        //   This member MUST NOT exist if there was an error invoking the method.\n        if (typeof result === 'undefined') {\n            throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');\n        }\n        return result;\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n"]},"metadata":{},"sourceType":"script"}