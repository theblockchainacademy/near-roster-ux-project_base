{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UrlAccountCreator = exports.LocalAccountCreator = exports.AccountCreator = void 0;\n\nconst web_1 = require(\"./utils/web\");\n/**\n * Account creator provides an interface for implementations to actually create accounts\n */\n\n\nclass AccountCreator {}\n\nexports.AccountCreator = AccountCreator;\n\nclass LocalAccountCreator extends AccountCreator {\n  constructor(masterAccount, initialBalance) {\n    super();\n    this.masterAccount = masterAccount;\n    this.initialBalance = initialBalance;\n  }\n  /**\n   * Creates an account using a masterAccount, meaning the new account is created from an existing account\n   * @param newAccountId The name of the NEAR account to be created\n   * @param publicKey The public key from the masterAccount used to create this account\n   * @returns {Promise<void>}\n   */\n\n\n  async createAccount(newAccountId, publicKey) {\n    await this.masterAccount.createAccount(newAccountId, publicKey, this.initialBalance);\n  }\n\n}\n\nexports.LocalAccountCreator = LocalAccountCreator;\n\nclass UrlAccountCreator extends AccountCreator {\n  constructor(connection, helperUrl) {\n    super();\n    this.connection = connection;\n    this.helperUrl = helperUrl;\n  }\n  /**\n   * Creates an account using a helperUrl\n   * This is [hosted here](https://helper.nearprotocol.com) or set up locally with the [near-contract-helper](https://github.com/nearprotocol/near-contract-helper) repository\n   * @param newAccountId The name of the NEAR account to be created\n   * @param publicKey The public key from the masterAccount used to create this account\n   * @returns {Promise<void>}\n   */\n\n\n  async createAccount(newAccountId, publicKey) {\n    await web_1.fetchJson(`${this.helperUrl}/account`, JSON.stringify({\n      newAccountId,\n      newAccountPublicKey: publicKey.toString()\n    }));\n  }\n\n}\n\nexports.UrlAccountCreator = UrlAccountCreator;","map":{"version":3,"sources":["/home/jjsullivan/near-roster-ux-project/roster-ux-app/todos-crud-web/node_modules/near-api-js/lib/account_creator.js"],"names":["Object","defineProperty","exports","value","UrlAccountCreator","LocalAccountCreator","AccountCreator","web_1","require","constructor","masterAccount","initialBalance","createAccount","newAccountId","publicKey","connection","helperUrl","fetchJson","JSON","stringify","newAccountPublicKey","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4BF,OAAO,CAACG,mBAAR,GAA8BH,OAAO,CAACI,cAAR,GAAyB,KAAK,CAAxF;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;AACA;AACA;AACA;;;AACA,MAAMF,cAAN,CAAqB;;AAErBJ,OAAO,CAACI,cAAR,GAAyBA,cAAzB;;AACA,MAAMD,mBAAN,SAAkCC,cAAlC,CAAiD;AAC7CG,EAAAA,WAAW,CAACC,aAAD,EAAgBC,cAAhB,EAAgC;AACvC;AACA,SAAKD,aAAL,GAAqBA,aAArB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACuB,QAAbC,aAAa,CAACC,YAAD,EAAeC,SAAf,EAA0B;AACzC,UAAM,KAAKJ,aAAL,CAAmBE,aAAnB,CAAiCC,YAAjC,EAA+CC,SAA/C,EAA0D,KAAKH,cAA/D,CAAN;AACH;;AAd4C;;AAgBjDT,OAAO,CAACG,mBAAR,GAA8BA,mBAA9B;;AACA,MAAMD,iBAAN,SAAgCE,cAAhC,CAA+C;AAC3CG,EAAAA,WAAW,CAACM,UAAD,EAAaC,SAAb,EAAwB;AAC/B;AACA,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACuB,QAAbJ,aAAa,CAACC,YAAD,EAAeC,SAAf,EAA0B;AACzC,UAAMP,KAAK,CAACU,SAAN,CAAiB,GAAE,KAAKD,SAAU,UAAlC,EAA6CE,IAAI,CAACC,SAAL,CAAe;AAAEN,MAAAA,YAAF;AAAgBO,MAAAA,mBAAmB,EAAEN,SAAS,CAACO,QAAV;AAArC,KAAf,CAA7C,CAAN;AACH;;AAf0C;;AAiB/CnB,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UrlAccountCreator = exports.LocalAccountCreator = exports.AccountCreator = void 0;\nconst web_1 = require(\"./utils/web\");\n/**\n * Account creator provides an interface for implementations to actually create accounts\n */\nclass AccountCreator {\n}\nexports.AccountCreator = AccountCreator;\nclass LocalAccountCreator extends AccountCreator {\n    constructor(masterAccount, initialBalance) {\n        super();\n        this.masterAccount = masterAccount;\n        this.initialBalance = initialBalance;\n    }\n    /**\n     * Creates an account using a masterAccount, meaning the new account is created from an existing account\n     * @param newAccountId The name of the NEAR account to be created\n     * @param publicKey The public key from the masterAccount used to create this account\n     * @returns {Promise<void>}\n     */\n    async createAccount(newAccountId, publicKey) {\n        await this.masterAccount.createAccount(newAccountId, publicKey, this.initialBalance);\n    }\n}\nexports.LocalAccountCreator = LocalAccountCreator;\nclass UrlAccountCreator extends AccountCreator {\n    constructor(connection, helperUrl) {\n        super();\n        this.connection = connection;\n        this.helperUrl = helperUrl;\n    }\n    /**\n     * Creates an account using a helperUrl\n     * This is [hosted here](https://helper.nearprotocol.com) or set up locally with the [near-contract-helper](https://github.com/nearprotocol/near-contract-helper) repository\n     * @param newAccountId The name of the NEAR account to be created\n     * @param publicKey The public key from the masterAccount used to create this account\n     * @returns {Promise<void>}\n     */\n    async createAccount(newAccountId, publicKey) {\n        await web_1.fetchJson(`${this.helperUrl}/account`, JSON.stringify({ newAccountId, newAccountPublicKey: publicKey.toString() }));\n    }\n}\nexports.UrlAccountCreator = UrlAccountCreator;\n"]},"metadata":{},"sourceType":"script"}