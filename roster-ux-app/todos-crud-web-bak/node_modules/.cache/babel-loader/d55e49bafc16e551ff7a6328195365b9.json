{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Connection = void 0;\n\nconst providers_1 = require(\"./providers\");\n\nconst signer_1 = require(\"./signer\");\n/**\n * @param config Contains connection info details\n * @returns {Provider}\n */\n\n\nfunction getProvider(config) {\n  switch (config.type) {\n    case undefined:\n      return config;\n\n    case 'JsonRpcProvider':\n      return new providers_1.JsonRpcProvider(config.args.url);\n\n    default:\n      throw new Error(`Unknown provider type ${config.type}`);\n  }\n}\n/**\n * @param config Contains connection info details\n * @returns {Signer}\n */\n\n\nfunction getSigner(config) {\n  switch (config.type) {\n    case undefined:\n      return config;\n\n    case 'InMemorySigner':\n      {\n        return new signer_1.InMemorySigner(config.keyStore);\n      }\n\n    default:\n      throw new Error(`Unknown signer type ${config.type}`);\n  }\n}\n/**\n * Connects an account to a given network via a given provider\n */\n\n\nclass Connection {\n  constructor(networkId, provider, signer) {\n    this.networkId = networkId;\n    this.provider = provider;\n    this.signer = signer;\n  }\n  /**\n   * @param config Contains connection info details\n   */\n\n\n  static fromConfig(config) {\n    const provider = getProvider(config.provider);\n    const signer = getSigner(config.signer);\n    return new Connection(config.networkId, provider, signer);\n  }\n\n}\n\nexports.Connection = Connection;","map":{"version":3,"sources":["/home/jjsullivan/near-roster-ux-project/roster-ux-app/todos-crud-web-bak/node_modules/near-api-js/lib/connection.js"],"names":["Object","defineProperty","exports","value","Connection","providers_1","require","signer_1","getProvider","config","type","undefined","JsonRpcProvider","args","url","Error","getSigner","InMemorySigner","keyStore","constructor","networkId","provider","signer","fromConfig"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBC,MAArB,EAA6B;AACzB,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKC,SAAL;AACI,aAAOF,MAAP;;AACJ,SAAK,iBAAL;AAAwB,aAAO,IAAIJ,WAAW,CAACO,eAAhB,CAAgCH,MAAM,CAACI,IAAP,CAAYC,GAA5C,CAAP;;AACxB;AAAS,YAAM,IAAIC,KAAJ,CAAW,yBAAwBN,MAAM,CAACC,IAAK,EAA/C,CAAN;AAJb;AAMH;AACD;AACA;AACA;AACA;;;AACA,SAASM,SAAT,CAAmBP,MAAnB,EAA2B;AACvB,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKC,SAAL;AACI,aAAOF,MAAP;;AACJ,SAAK,gBAAL;AAAuB;AACnB,eAAO,IAAIF,QAAQ,CAACU,cAAb,CAA4BR,MAAM,CAACS,QAAnC,CAAP;AACH;;AACD;AAAS,YAAM,IAAIH,KAAJ,CAAW,uBAAsBN,MAAM,CAACC,IAAK,EAA7C,CAAN;AANb;AAQH;AACD;AACA;AACA;;;AACA,MAAMN,UAAN,CAAiB;AACbe,EAAAA,WAAW,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,MAAtB,EAA8B;AACrC,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;AACD;AACJ;AACA;;;AACqB,SAAVC,UAAU,CAACd,MAAD,EAAS;AACtB,UAAMY,QAAQ,GAAGb,WAAW,CAACC,MAAM,CAACY,QAAR,CAA5B;AACA,UAAMC,MAAM,GAAGN,SAAS,CAACP,MAAM,CAACa,MAAR,CAAxB;AACA,WAAO,IAAIlB,UAAJ,CAAeK,MAAM,CAACW,SAAtB,EAAiCC,QAAjC,EAA2CC,MAA3C,CAAP;AACH;;AAbY;;AAejBpB,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Connection = void 0;\nconst providers_1 = require(\"./providers\");\nconst signer_1 = require(\"./signer\");\n/**\n * @param config Contains connection info details\n * @returns {Provider}\n */\nfunction getProvider(config) {\n    switch (config.type) {\n        case undefined:\n            return config;\n        case 'JsonRpcProvider': return new providers_1.JsonRpcProvider(config.args.url);\n        default: throw new Error(`Unknown provider type ${config.type}`);\n    }\n}\n/**\n * @param config Contains connection info details\n * @returns {Signer}\n */\nfunction getSigner(config) {\n    switch (config.type) {\n        case undefined:\n            return config;\n        case 'InMemorySigner': {\n            return new signer_1.InMemorySigner(config.keyStore);\n        }\n        default: throw new Error(`Unknown signer type ${config.type}`);\n    }\n}\n/**\n * Connects an account to a given network via a given provider\n */\nclass Connection {\n    constructor(networkId, provider, signer) {\n        this.networkId = networkId;\n        this.provider = provider;\n        this.signer = signer;\n    }\n    /**\n     * @param config Contains connection info details\n     */\n    static fromConfig(config) {\n        const provider = getProvider(config.provider);\n        const signer = getSigner(config.signer);\n        return new Connection(config.networkId, provider, signer);\n    }\n}\nexports.Connection = Connection;\n"]},"metadata":{},"sourceType":"script"}