{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemorySigner = exports.Signer = void 0;\n\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\n\nconst key_pair_1 = require(\"./utils/key_pair\");\n\nconst in_memory_key_store_1 = require(\"./key_stores/in_memory_key_store\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\n\n\nclass Signer {}\n\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\n\nclass InMemorySigner extends Signer {\n  constructor(keyStore) {\n    super();\n    this.keyStore = keyStore;\n  }\n  /**\n   * Creates a single account Signer instance with account, network and keyPair provided.\n   *\n   * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n   *\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account to assign the key pair to\n   * @param keyPair The keyPair to use for signing\n   */\n\n\n  static async fromKeyPair(networkId, accountId, keyPair) {\n    const keyStore = new in_memory_key_store_1.InMemoryKeyStore();\n    await keyStore.setKey(networkId, accountId, keyPair);\n    return new InMemorySigner(keyStore);\n  }\n  /**\n   * Creates a public key for the account given\n   * @param accountId The NEAR account to assign a public key to\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns {Promise<PublicKey>}\n   */\n\n\n  async createKey(accountId, networkId) {\n    const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n    await this.keyStore.setKey(networkId, accountId, keyPair);\n    return keyPair.getPublicKey();\n  }\n  /**\n   * Gets the existing public key for a given account\n   * @param accountId The NEAR account to assign a public key to\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns {Promise<PublicKey>} Returns the public key or null if not found\n   */\n\n\n  async getPublicKey(accountId, networkId) {\n    const keyPair = await this.keyStore.getKey(networkId, accountId);\n\n    if (keyPair === null) {\n      return null;\n    }\n\n    return keyPair.getPublicKey();\n  }\n  /**\n   * @param message A message to be signed, typically a serialized transaction\n   * @param accountId the NEAR account signing the message\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns {Promise<Signature>}\n   */\n\n\n  async signMessage(message, accountId, networkId) {\n    const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n\n    if (!accountId) {\n      throw new Error('InMemorySigner requires provided account id');\n    }\n\n    const keyPair = await this.keyStore.getKey(networkId, accountId);\n\n    if (keyPair === null) {\n      throw new Error(`Key for ${accountId} not found in ${networkId}`);\n    }\n\n    return keyPair.sign(hash);\n  }\n\n  toString() {\n    return `InMemorySigner(${this.keyStore})`;\n  }\n\n}\n\nexports.InMemorySigner = InMemorySigner;","map":{"version":3,"sources":["/home/jjsullivan/near-roster-ux-project/roster-ux-app/todos-crud-web/node_modules/near-api-js/lib/signer.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","InMemorySigner","Signer","js_sha256_1","require","key_pair_1","in_memory_key_store_1","constructor","keyStore","fromKeyPair","networkId","accountId","keyPair","InMemoryKeyStore","setKey","createKey","KeyPair","fromRandom","getPublicKey","getKey","signMessage","message","hash","Uint8Array","default","sha256","array","Error","sign","toString"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemorySigner = exports.Signer = void 0;\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst in_memory_key_store_1 = require(\"./key_stores/in_memory_key_store\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\nclass Signer {\n}\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\nclass InMemorySigner extends Signer {\n    constructor(keyStore) {\n        super();\n        this.keyStore = keyStore;\n    }\n    /**\n     * Creates a single account Signer instance with account, network and keyPair provided.\n     *\n     * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n     *\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account to assign the key pair to\n     * @param keyPair The keyPair to use for signing\n     */\n    static async fromKeyPair(networkId, accountId, keyPair) {\n        const keyStore = new in_memory_key_store_1.InMemoryKeyStore();\n        await keyStore.setKey(networkId, accountId, keyPair);\n        return new InMemorySigner(keyStore);\n    }\n    /**\n     * Creates a public key for the account given\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>}\n     */\n    async createKey(accountId, networkId) {\n        const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n        await this.keyStore.setKey(networkId, accountId, keyPair);\n        return keyPair.getPublicKey();\n    }\n    /**\n     * Gets the existing public key for a given account\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>} Returns the public key or null if not found\n     */\n    async getPublicKey(accountId, networkId) {\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            return null;\n        }\n        return keyPair.getPublicKey();\n    }\n    /**\n     * @param message A message to be signed, typically a serialized transaction\n     * @param accountId the NEAR account signing the message\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<Signature>}\n     */\n    async signMessage(message, accountId, networkId) {\n        const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n        if (!accountId) {\n            throw new Error('InMemorySigner requires provided account id');\n        }\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            throw new Error(`Key for ${accountId} not found in ${networkId}`);\n        }\n        return keyPair.sign(hash);\n    }\n    toString() {\n        return `InMemorySigner(${this.keyStore})`;\n    }\n}\nexports.InMemorySigner = InMemorySigner;\n"]},"metadata":{},"sourceType":"script"}